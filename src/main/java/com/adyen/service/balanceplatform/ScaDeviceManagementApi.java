/*
 * Configuration API
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.adyen.service.balanceplatform;

import com.adyen.Client;
import com.adyen.Service;
import com.adyen.constants.ApiConstants;
import com.adyen.model.balanceplatform.BeginScaDeviceRegistrationRequest;
import com.adyen.model.balanceplatform.BeginScaDeviceRegistrationResponse;
import com.adyen.model.balanceplatform.DefaultErrorResponseEntity;
import com.adyen.model.balanceplatform.FinishScaDeviceRegistrationRequest;
import com.adyen.model.balanceplatform.FinishScaDeviceRegistrationResponse;
import com.adyen.model.balanceplatform.SubmitScaAssociationRequest;
import com.adyen.model.balanceplatform.SubmitScaAssociationResponse;
import com.adyen.model.RequestOptions;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.Resource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ScaDeviceManagementApi extends Service {

    public static final String API_VERSION = "2";

    protected String baseURL;

    /**
    * SCA device management constructor in {@link com.adyen.service.balanceplatform package}.
    * @param client {@link Client } (required)
    */
    public ScaDeviceManagementApi(Client client) {
        super(client);
        this.baseURL = createBaseURL("https://balanceplatform-api-test.adyen.com/bcl/v2");
    }

    /**
    * SCA device management constructor in {@link com.adyen.service.balanceplatform package}.
    * Please use this constructor only if you would like to pass along your own url for routing or testing purposes. The latest API version is defined in this class as a constant.
    * @param client {@link Client } (required)
    * @param baseURL {@link String } (required)
    */
    public ScaDeviceManagementApi(Client client, String baseURL) {
        super(client);
        this.baseURL = baseURL;
    }

    /**
    * Begin SCA device registration
    *
    * @param beginScaDeviceRegistrationRequest {@link BeginScaDeviceRegistrationRequest }  (required)
    * @return {@link BeginScaDeviceRegistrationResponse }
    * @throws ApiException if fails to make API call
    */
    public BeginScaDeviceRegistrationResponse beginScaDeviceRegistration(BeginScaDeviceRegistrationRequest beginScaDeviceRegistrationRequest) throws ApiException, IOException {
        return beginScaDeviceRegistration(beginScaDeviceRegistrationRequest, null);
    }

    /**
    * Begin SCA device registration
    *
    * @param beginScaDeviceRegistrationRequest {@link BeginScaDeviceRegistrationRequest }  (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link BeginScaDeviceRegistrationResponse }
    * @throws ApiException if fails to make API call
    */
    public BeginScaDeviceRegistrationResponse beginScaDeviceRegistration(BeginScaDeviceRegistrationRequest beginScaDeviceRegistrationRequest, RequestOptions requestOptions) throws ApiException, IOException {
        String requestBody = beginScaDeviceRegistrationRequest.toJson();
        Resource resource = new Resource(this, this.baseURL + "/scaDevices", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.POST, null);
        return BeginScaDeviceRegistrationResponse.fromJson(jsonResult);
    }

    /**
    * Finish registration process for a SCA device
    *
    * @param deviceId {@link String } The unique identifier of the SCA device that you are associating with a resource. (required)
    * @param finishScaDeviceRegistrationRequest {@link FinishScaDeviceRegistrationRequest }  (required)
    * @return {@link FinishScaDeviceRegistrationResponse }
    * @throws ApiException if fails to make API call
    */
    public FinishScaDeviceRegistrationResponse finishScaDeviceRegistration(String deviceId, FinishScaDeviceRegistrationRequest finishScaDeviceRegistrationRequest) throws ApiException, IOException {
        return finishScaDeviceRegistration(deviceId, finishScaDeviceRegistrationRequest, null);
    }

    /**
    * Finish registration process for a SCA device
    *
    * @param deviceId {@link String } The unique identifier of the SCA device that you are associating with a resource. (required)
    * @param finishScaDeviceRegistrationRequest {@link FinishScaDeviceRegistrationRequest }  (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link FinishScaDeviceRegistrationResponse }
    * @throws ApiException if fails to make API call
    */
    public FinishScaDeviceRegistrationResponse finishScaDeviceRegistration(String deviceId, FinishScaDeviceRegistrationRequest finishScaDeviceRegistrationRequest, RequestOptions requestOptions) throws ApiException, IOException {
        //Add path params
        Map<String, String> pathParams = new HashMap<>();
        if (deviceId == null) {
            throw new IllegalArgumentException("Please provide the deviceId path parameter");
        }
        pathParams.put("deviceId", deviceId);

        String requestBody = finishScaDeviceRegistrationRequest.toJson();
        Resource resource = new Resource(this, this.baseURL + "/scaDevices/{deviceId}", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.PATCH, pathParams);
        return FinishScaDeviceRegistrationResponse.fromJson(jsonResult);
    }

    /**
    * Create a new SCA association for a device
    *
    * @param deviceId {@link String } The unique identifier of the SCA device that you are associating with a resource. (required)
    * @param submitScaAssociationRequest {@link SubmitScaAssociationRequest }  (required)
    * @return {@link SubmitScaAssociationResponse }
    * @throws ApiException if fails to make API call
    */
    public SubmitScaAssociationResponse submitScaAssociation(String deviceId, SubmitScaAssociationRequest submitScaAssociationRequest) throws ApiException, IOException {
        return submitScaAssociation(deviceId, submitScaAssociationRequest, null);
    }

    /**
    * Create a new SCA association for a device
    *
    * @param deviceId {@link String } The unique identifier of the SCA device that you are associating with a resource. (required)
    * @param submitScaAssociationRequest {@link SubmitScaAssociationRequest }  (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link SubmitScaAssociationResponse }
    * @throws ApiException if fails to make API call
    */
    public SubmitScaAssociationResponse submitScaAssociation(String deviceId, SubmitScaAssociationRequest submitScaAssociationRequest, RequestOptions requestOptions) throws ApiException, IOException {
        //Add path params
        Map<String, String> pathParams = new HashMap<>();
        if (deviceId == null) {
            throw new IllegalArgumentException("Please provide the deviceId path parameter");
        }
        pathParams.put("deviceId", deviceId);

        String requestBody = submitScaAssociationRequest.toJson();
        Resource resource = new Resource(this, this.baseURL + "/scaDevices/{deviceId}/scaAssociations", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.POST, pathParams);
        return SubmitScaAssociationResponse.fromJson(jsonResult);
    }
}
