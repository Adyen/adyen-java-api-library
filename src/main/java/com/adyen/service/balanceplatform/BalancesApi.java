/*
 * Configuration API
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.adyen.service.balanceplatform;

import com.adyen.Client;
import com.adyen.Service;
import com.adyen.constants.ApiConstants;
import com.adyen.model.balanceplatform.BalanceWebhookSettingsRequest;
import com.adyen.model.balanceplatform.DefaultErrorResponseEntity;
import com.adyen.model.balanceplatform.PatchableBalanceWebhookSettingsRequest;
import com.adyen.model.balanceplatform.WebhookSettingResponse;
import com.adyen.model.RequestOptions;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.Resource;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BalancesApi extends Service {

    public static final String API_VERSION = "2";

    protected String baseURL;

    /**
    * Balances constructor in {@link com.adyen.service.balanceplatform package}.
    * @param client {@link Client } (required)
    */
    public BalancesApi(Client client) {
        super(client);
        this.baseURL = createBaseURL("https://balanceplatform-api-test.adyen.com/bcl/v2");
    }

    /**
    * Balances constructor in {@link com.adyen.service.balanceplatform package}.
    * Please use this constructor only if you would like to pass along your own url for routing or testing purposes. The latest API version is defined in this class as a constant.
    * @param client {@link Client } (required)
    * @param baseURL {@link String } (required)
    */
    public BalancesApi(Client client, String baseURL) {
        super(client);
        this.baseURL = baseURL;
    }

    /**
    * Get webhook settings
    *
    * @param balancePlatformId {@link String } The unique identifier of the balance platform. (required)
    * @param webhookId {@link String } The unique identifier of the balance webhook. (required)
    * @return {@link List&lt;WebhookSettingResponse&gt; }
    * @throws ApiException if fails to make API call
    */
    public List<WebhookSettingResponse> balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsGet(String balancePlatformId, String webhookId) throws ApiException, IOException {
        return balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsGet(balancePlatformId, webhookId, null);
    }

    /**
    * Get webhook settings
    *
    * @param balancePlatformId {@link String } The unique identifier of the balance platform. (required)
    * @param webhookId {@link String } The unique identifier of the balance webhook. (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link List&lt;WebhookSettingResponse&gt; }
    * @throws ApiException if fails to make API call
    */
    public List<WebhookSettingResponse> balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsGet(String balancePlatformId, String webhookId, RequestOptions requestOptions) throws ApiException, IOException {
        //Add path params
        Map<String, String> pathParams = new HashMap<>();
        if (balancePlatformId == null) {
            throw new IllegalArgumentException("Please provide the balancePlatformId path parameter");
        }
        pathParams.put("balancePlatformId", balancePlatformId);
        if (webhookId == null) {
            throw new IllegalArgumentException("Please provide the webhookId path parameter");
        }
        pathParams.put("webhookId", webhookId);

        String requestBody = null;
        Resource resource = new Resource(this, this.baseURL + "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.GET, pathParams);
        return List<WebhookSettingResponse>.toJson(jsonResult);
    }

    /**
    * Create a balance webhook setting
    *
    * @param balancePlatformId {@link String } The unique identifier of the balance platform. (required)
    * @param webhookId {@link String } The unique identifier of the balance webhook. (required)
    * @param balanceWebhookSettingsRequest {@link BalanceWebhookSettingsRequest }  (required)
    * @param balanceWebhookSettingsRequest {@link BalanceWebhookSettingsRequest }  (required)
    * @return {@link WebhookSettingResponse }
    * @throws ApiException if fails to make API call
    */
    public WebhookSettingResponse balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsPost(String balancePlatformId, String webhookId, BalanceWebhookSettingsRequest balanceWebhookSettingsRequest) throws ApiException, IOException {
        return balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsPost(balancePlatformId, webhookId, balanceWebhookSettingsRequest, null);
    }

    /**
    * Create a balance webhook setting
    *
    * @param balancePlatformId {@link String } The unique identifier of the balance platform. (required)
    * @param webhookId {@link String } The unique identifier of the balance webhook. (required)
    * @param balanceWebhookSettingsRequest {@link BalanceWebhookSettingsRequest }  (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link WebhookSettingResponse }
    * @throws ApiException if fails to make API call
    */
    public WebhookSettingResponse balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsPost(String balancePlatformId, String webhookId, BalanceWebhookSettingsRequest balanceWebhookSettingsRequest, RequestOptions requestOptions) throws ApiException, IOException {
        //Add path params
        Map<String, String> pathParams = new HashMap<>();
        if (balancePlatformId == null) {
            throw new IllegalArgumentException("Please provide the balancePlatformId path parameter");
        }
        pathParams.put("balancePlatformId", balancePlatformId);
        if (webhookId == null) {
            throw new IllegalArgumentException("Please provide the webhookId path parameter");
        }
        pathParams.put("webhookId", webhookId);

        String requestBody = balanceWebhookSettingsRequest.toJson();
        Resource resource = new Resource(this, this.baseURL + "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.POST, pathParams);
        return WebhookSettingResponse.fromJson(jsonResult);
    }

    /**
    * Delete a webhook setting
    *
    * @param balancePlatformId {@link String } The unique identifier of the balance platform. (required)
    * @param webhookId {@link String } The unique identifier of the balance webhook. (required)
    * @param settingId {@link String } The unique identifier of the balance webhook setting. (required)
    * @throws ApiException if fails to make API call
    */
    public void balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsSettingIdDelete(String balancePlatformId, String webhookId, String settingId) throws ApiException, IOException {
        balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsSettingIdDelete(balancePlatformId, webhookId, settingId, null);
    }

    /**
    * Delete a webhook setting
    *
    * @param balancePlatformId {@link String } The unique identifier of the balance platform. (required)
    * @param webhookId {@link String } The unique identifier of the balance webhook. (required)
    * @param settingId {@link String } The unique identifier of the balance webhook setting. (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @throws ApiException if fails to make API call
    */
    public void balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsSettingIdDelete(String balancePlatformId, String webhookId, String settingId, RequestOptions requestOptions) throws ApiException, IOException {
        //Add path params
        Map<String, String> pathParams = new HashMap<>();
        if (balancePlatformId == null) {
            throw new IllegalArgumentException("Please provide the balancePlatformId path parameter");
        }
        pathParams.put("balancePlatformId", balancePlatformId);
        if (webhookId == null) {
            throw new IllegalArgumentException("Please provide the webhookId path parameter");
        }
        pathParams.put("webhookId", webhookId);
        if (settingId == null) {
            throw new IllegalArgumentException("Please provide the settingId path parameter");
        }
        pathParams.put("settingId", settingId);

        String requestBody = null;
        Resource resource = new Resource(this, this.baseURL + "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings/{settingId}", null);
        resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.DELETE, pathParams);
    }

    /**
    * Get a webhook setting
    *
    * @param balancePlatformId {@link String } The unique identifier of the balance platform. (required)
    * @param webhookId {@link String } The unique identifier of the balance webhook. (required)
    * @param settingId {@link String } The unique identifier of the balance webhook setting. (required)
    * @return {@link WebhookSettingResponse }
    * @throws ApiException if fails to make API call
    */
    public WebhookSettingResponse balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsSettingIdGet(String balancePlatformId, String webhookId, String settingId) throws ApiException, IOException {
        return balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsSettingIdGet(balancePlatformId, webhookId, settingId, null);
    }

    /**
    * Get a webhook setting
    *
    * @param balancePlatformId {@link String } The unique identifier of the balance platform. (required)
    * @param webhookId {@link String } The unique identifier of the balance webhook. (required)
    * @param settingId {@link String } The unique identifier of the balance webhook setting. (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link WebhookSettingResponse }
    * @throws ApiException if fails to make API call
    */
    public WebhookSettingResponse balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsSettingIdGet(String balancePlatformId, String webhookId, String settingId, RequestOptions requestOptions) throws ApiException, IOException {
        //Add path params
        Map<String, String> pathParams = new HashMap<>();
        if (balancePlatformId == null) {
            throw new IllegalArgumentException("Please provide the balancePlatformId path parameter");
        }
        pathParams.put("balancePlatformId", balancePlatformId);
        if (webhookId == null) {
            throw new IllegalArgumentException("Please provide the webhookId path parameter");
        }
        pathParams.put("webhookId", webhookId);
        if (settingId == null) {
            throw new IllegalArgumentException("Please provide the settingId path parameter");
        }
        pathParams.put("settingId", settingId);

        String requestBody = null;
        Resource resource = new Resource(this, this.baseURL + "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings/{settingId}", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.GET, pathParams);
        return WebhookSettingResponse.fromJson(jsonResult);
    }

    /**
    * Update a webhook setting
    *
    * @param balancePlatformId {@link String } The unique identifier of the balance platform. (required)
    * @param webhookId {@link String } The unique identifier of the balance webhook. (required)
    * @param settingId {@link String } The unique identifier of the balance webhook setting. (required)
    * @param patchableBalanceWebhookSettingsRequest {@link PatchableBalanceWebhookSettingsRequest }  (required)
    * @param patchableBalanceWebhookSettingsRequest {@link PatchableBalanceWebhookSettingsRequest }  (required)
    * @return {@link WebhookSettingResponse }
    * @throws ApiException if fails to make API call
    */
    public WebhookSettingResponse balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsSettingIdPatch(String balancePlatformId, String webhookId, String settingId, PatchableBalanceWebhookSettingsRequest patchableBalanceWebhookSettingsRequest) throws ApiException, IOException {
        return balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsSettingIdPatch(balancePlatformId, webhookId, settingId, patchableBalanceWebhookSettingsRequest, null);
    }

    /**
    * Update a webhook setting
    *
    * @param balancePlatformId {@link String } The unique identifier of the balance platform. (required)
    * @param webhookId {@link String } The unique identifier of the balance webhook. (required)
    * @param settingId {@link String } The unique identifier of the balance webhook setting. (required)
    * @param patchableBalanceWebhookSettingsRequest {@link PatchableBalanceWebhookSettingsRequest }  (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link WebhookSettingResponse }
    * @throws ApiException if fails to make API call
    */
    public WebhookSettingResponse balancePlatformsBalancePlatformIdWebhooksWebhookIdSettingsSettingIdPatch(String balancePlatformId, String webhookId, String settingId, PatchableBalanceWebhookSettingsRequest patchableBalanceWebhookSettingsRequest, RequestOptions requestOptions) throws ApiException, IOException {
        //Add path params
        Map<String, String> pathParams = new HashMap<>();
        if (balancePlatformId == null) {
            throw new IllegalArgumentException("Please provide the balancePlatformId path parameter");
        }
        pathParams.put("balancePlatformId", balancePlatformId);
        if (webhookId == null) {
            throw new IllegalArgumentException("Please provide the webhookId path parameter");
        }
        pathParams.put("webhookId", webhookId);
        if (settingId == null) {
            throw new IllegalArgumentException("Please provide the settingId path parameter");
        }
        pathParams.put("settingId", settingId);

        String requestBody = patchableBalanceWebhookSettingsRequest.toJson();
        Resource resource = new Resource(this, this.baseURL + "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings/{settingId}", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.PATCH, pathParams);
        return WebhookSettingResponse.fromJson(jsonResult);
    }
}
