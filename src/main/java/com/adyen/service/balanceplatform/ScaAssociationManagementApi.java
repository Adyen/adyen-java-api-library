/*
 * Configuration API
 *
 * The version of the OpenAPI document: 2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.adyen.service.balanceplatform;

import com.adyen.Client;
import com.adyen.Service;
import com.adyen.constants.ApiConstants;
import com.adyen.model.RequestOptions;
import com.adyen.model.balanceplatform.ApproveAssociationRequest;
import com.adyen.model.balanceplatform.ApproveAssociationResponse;
import com.adyen.model.balanceplatform.ListAssociationsResponse;
import com.adyen.model.balanceplatform.RemoveAssociationRequest;
import com.adyen.model.balanceplatform.ScaEntityType;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.Resource;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ScaAssociationManagementApi extends Service {

  public static final String API_VERSION = "2";

  protected String baseURL;

  /**
   * SCA association management constructor in {@link com.adyen.service.balanceplatform package}.
   *
   * @param client {@link Client } (required)
   */
  public ScaAssociationManagementApi(Client client) {
    super(client);
    this.baseURL = createBaseURL("https://balanceplatform-api-test.adyen.com/bcl/v2");
  }

  /**
   * SCA association management constructor in {@link com.adyen.service.balanceplatform package}.
   * Please use this constructor only if you would like to pass along your own url for routing or
   * testing purposes. The latest API version is defined in this class as a constant.
   *
   * @param client {@link Client } (required)
   * @param baseURL {@link String } (required)
   */
  public ScaAssociationManagementApi(Client client, String baseURL) {
    super(client);
    this.baseURL = baseURL;
  }

  /**
   * Approve a pending approval association
   *
   * @param wwWAuthenticate {@link String } The header for authenticating through SCA. (required)
   * @param approveAssociationRequest {@link ApproveAssociationRequest } (required)
   * @return {@link ApproveAssociationResponse }
   * @throws ApiException if fails to make API call
   */
  public ApproveAssociationResponse approveAssociation(
      String wwWAuthenticate, ApproveAssociationRequest approveAssociationRequest)
      throws ApiException, IOException {
    return approveAssociation(approveAssociationRequest, null);
  }

  /**
   * Approve a pending approval association
   *
   * @param approveAssociationRequest {@link ApproveAssociationRequest } (required)
   * @param requestOptions {@link RequestOptions } Object to store additional data such as
   *     idempotency-keys (optional)
   * @return {@link ApproveAssociationResponse }
   * @throws ApiException if fails to make API call
   */
  public ApproveAssociationResponse approveAssociation(
      ApproveAssociationRequest approveAssociationRequest, RequestOptions requestOptions)
      throws ApiException, IOException {
    String requestBody = approveAssociationRequest.toJson();
    Resource resource = new Resource(this, this.baseURL + "/scaAssociations", null);
    String jsonResult =
        resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.PATCH, null);
    return ApproveAssociationResponse.fromJson(jsonResult);
  }

  /**
   * Get a list of devices associated with an entity
   *
   * @param entityType {@link ScaEntityType } The type of entity you want to retrieve a list of
   *     associations for. Possible values: **accountHolder** or **paymentInstrument**. (required)
   * @param entityId {@link String } The unique identifier of the entity. (required)
   * @param pageSize {@link Integer } The number of items to have on a page. Default: **5**.
   *     (required)
   * @param pageNumber {@link Integer } The index of the page to retrieve. The index of the first
   *     page is **0** (zero). Default: **0**. (required)
   * @return {@link ListAssociationsResponse }
   * @throws ApiException if fails to make API call
   */
  public ListAssociationsResponse listAssociations(
      ScaEntityType entityType, String entityId, Integer pageSize, Integer pageNumber)
      throws ApiException, IOException {
    return listAssociations(entityType, entityId, pageSize, pageNumber, null);
  }

  /**
   * Get a list of devices associated with an entity
   *
   * @param entityType {@link ScaEntityType } Query: The type of entity you want to retrieve a list
   *     of associations for. Possible values: **accountHolder** or **paymentInstrument**.
   *     (required)
   * @param entityId {@link String } Query: The unique identifier of the entity. (required)
   * @param pageSize {@link Integer } Query: The number of items to have on a page. Default: **5**.
   *     (required)
   * @param pageNumber {@link Integer } Query: The index of the page to retrieve. The index of the
   *     first page is **0** (zero). Default: **0**. (required)
   * @param requestOptions {@link RequestOptions } Object to store additional data such as
   *     idempotency-keys (optional)
   * @return {@link ListAssociationsResponse }
   * @throws ApiException if fails to make API call
   */
  public ListAssociationsResponse listAssociations(
      ScaEntityType entityType,
      String entityId,
      Integer pageSize,
      Integer pageNumber,
      RequestOptions requestOptions)
      throws ApiException, IOException {
    // Add query params
    Map<String, String> queryParams = new HashMap<>();
    if (entityType != null) {
      queryParams.put("entityType", entityType.toString());
    }
    if (entityId != null) {
      queryParams.put("entityId", entityId);
    }
    if (pageSize != null) {
      queryParams.put("pageSize", pageSize.toString());
    }
    if (pageNumber != null) {
      queryParams.put("pageNumber", pageNumber.toString());
    }

    String requestBody = null;
    Resource resource = new Resource(this, this.baseURL + "/scaAssociations", null);
    String jsonResult =
        resource.request(
            requestBody, requestOptions, ApiConstants.HttpMethod.GET, null, queryParams);
    return ListAssociationsResponse.fromJson(jsonResult);
  }

  /**
   * Delete association to devices
   *
   * @param wwWAuthenticate {@link String } The header for authenticating through SCA. (required)
   * @param removeAssociationRequest {@link RemoveAssociationRequest } (required)
   * @throws ApiException if fails to make API call
   */
  public void removeAssociation(
      String wwWAuthenticate, RemoveAssociationRequest removeAssociationRequest)
      throws ApiException, IOException {
    removeAssociation(removeAssociationRequest, null);
  }

  /**
   * Delete association to devices
   *
   * @param removeAssociationRequest {@link RemoveAssociationRequest } (required)
   * @param requestOptions {@link RequestOptions } Object to store additional data such as
   *     idempotency-keys (optional)
   * @throws ApiException if fails to make API call
   */
  public void removeAssociation(
      RemoveAssociationRequest removeAssociationRequest, RequestOptions requestOptions)
      throws ApiException, IOException {
    String requestBody = removeAssociationRequest.toJson();
    Resource resource = new Resource(this, this.baseURL + "/scaAssociations", null);
    resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.DELETE, null);
  }
}
