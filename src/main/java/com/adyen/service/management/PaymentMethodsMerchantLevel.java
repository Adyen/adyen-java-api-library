/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.service.management;

import com.adyen.ApiKeyAuthenticatedService;
import com.adyen.Client;
import com.adyen.constants.ApiConstants;
import com.adyen.model.management.JSON;
import com.adyen.model.management.ApplePayInfo;
import com.adyen.model.management.PaymentMethod;
import com.adyen.model.management.PaymentMethodResponse;
import com.adyen.model.management.PaymentMethodSetupInfo;
import com.adyen.model.management.RestServiceError;
import com.adyen.model.management.UpdatePaymentMethodInfo;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.ManagementResource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class PaymentMethodsMerchantLevel extends ApiKeyAuthenticatedService {
    public PaymentMethodsMerchantLevel(Client client) {
        super(client);
        new JSON();
    }

    /**
     * Get all payment methods
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param queryParams  (optional)
     *    storeId: The unique identifier of the store for which to return the payment methods. (optional)<br />
     *    businessLineId: The unique identifier of the Business Line for which to return the payment methods. (optional)<br />
     *    pageSize: The number of items to have on a page, maximum 100. The default is 10 items on a page. (optional)<br />
     *    pageNumber: The number of the page to fetch. (optional)<br />
     * @return PaymentMethodResponse
     * @throws ApiException if fails to make API call
     */
    public PaymentMethodResponse getAllPaymentMethods(String merchantId, Map<String, String> queryParams) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/paymentMethodSettings");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams, queryParams);
        return PaymentMethodResponse.fromJson(jsonResult);
    }
    
    /**
     * Get payment method details
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param paymentMethodId The unique identifier of the payment method. (required)
     * @return PaymentMethod
     * @throws ApiException if fails to make API call
     */
    public PaymentMethod getPaymentMethodDetails(String merchantId, String paymentMethodId) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("paymentMethodId", paymentMethodId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams);
        return PaymentMethod.fromJson(jsonResult);
    }
    
    /**
     * Get Apple Pay domains
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param paymentMethodId The unique identifier of the payment method. (required)
     * @return ApplePayInfo
     * @throws ApiException if fails to make API call
     */
    public ApplePayInfo getApplePayDomains(String merchantId, String paymentMethodId) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("paymentMethodId", paymentMethodId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/getApplePayDomains");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams);
        return ApplePayInfo.fromJson(jsonResult);
    }
    
    /**
     * Update a payment method
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param paymentMethodId The unique identifier of the payment method. (required)
     * @param updatePaymentMethodInfo  (optional)
     * @return PaymentMethod
     * @throws ApiException if fails to make API call
     */
    public PaymentMethod updatePaymentMethod(String merchantId, String paymentMethodId, UpdatePaymentMethodInfo updatePaymentMethodInfo) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("paymentMethodId", paymentMethodId);

        String requestBody = updatePaymentMethodInfo.toJson();
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.PATCH, pathParams);
        return PaymentMethod.fromJson(jsonResult);
    }
    
    /**
     * Request a payment method
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param paymentMethodSetupInfo  (optional)
     * @return PaymentMethod
     * @throws ApiException if fails to make API call
     */
    public PaymentMethod requestPaymentMethod(String merchantId, PaymentMethodSetupInfo paymentMethodSetupInfo) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);

        String requestBody = paymentMethodSetupInfo.toJson();
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/paymentMethodSettings");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.POST, pathParams);
        return PaymentMethod.fromJson(jsonResult);
    }
    
    /**
     * Add an Apple Pay domain
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param paymentMethodId The unique identifier of the payment method. (required)
     * @param applePayInfo  (optional)
     * @throws ApiException if fails to make API call
     */
    public void addApplePayDomain(String merchantId, String paymentMethodId, ApplePayInfo applePayInfo) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }
        if (paymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("paymentMethodId", paymentMethodId);

        String requestBody = applePayInfo.toJson();
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/addApplePayDomains");
        resource.request(requestBody, null, ApiConstants.HttpMethod.POST, pathParams);
    }
    
}
