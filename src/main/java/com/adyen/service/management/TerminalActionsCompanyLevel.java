/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.service.management;

import com.adyen.ApiKeyAuthenticatedService;
import com.adyen.Client;
import com.adyen.constants.ApiConstants;
import com.adyen.model.management.JSON;
import com.adyen.model.management.AndroidAppsResponse;
import com.adyen.model.management.AndroidCertificatesResponse;
import com.adyen.model.management.ExternalTerminalAction;
import com.adyen.model.management.ListExternalTerminalActionsResponse;
import com.adyen.model.management.RestServiceError;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.ManagementResource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class TerminalActionsCompanyLevel extends ApiKeyAuthenticatedService {
    public TerminalActionsCompanyLevel(Client client) {
        super(client);
        new JSON();
    }

    /**
     * Get a list of Android apps
     *
     * @param companyId The unique identifier of the company account. (required)
     * @param queryParams  (optional)
     *    pageNumber: The number of the page to fetch. (optional)<br />
     *    pageSize: The number of items to have on a page, maximum 100. The default is 20 items on a page. (optional)<br />
     * @return AndroidAppsResponse
     * @throws ApiException if fails to make API call
     */
    public AndroidAppsResponse listAndroidApps(String companyId, Map<String, String> queryParams) throws ApiException, IOException {
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("companyId", companyId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/companies/{companyId}/androidApps");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams, queryParams);
        return AndroidAppsResponse.fromJson(jsonResult);
    }
    
    /**
     * Get a list of Android certificates
     *
     * @param companyId The unique identifier of the company account. (required)
     * @param queryParams  (optional)
     *    pageNumber: The number of the page to fetch. (optional)<br />
     *    pageSize: The number of items to have on a page, maximum 100. The default is 20 items on a page. (optional)<br />
     * @return AndroidCertificatesResponse
     * @throws ApiException if fails to make API call
     */
    public AndroidCertificatesResponse listAndroidCertificates(String companyId, Map<String, String> queryParams) throws ApiException, IOException {
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("companyId", companyId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/companies/{companyId}/androidCertificates");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams, queryParams);
        return AndroidCertificatesResponse.fromJson(jsonResult);
    }
    
    /**
     * Get a list of terminal actions
     *
     * @param companyId The unique identifier of the company account. (required)
     * @param queryParams  (optional)
     *    pageNumber: The number of the page to fetch. (optional)<br />
     *    pageSize: The number of items to have on a page, maximum 100. The default is 20 items on a page. (optional)<br />
     *    status: Returns terminal actions with the specified status.  Allowed values: **pending**, **successful**, **failed**, **cancelled**, **tryLater**. (optional)<br />
     *    type: Returns terminal actions of the specified type.  Allowed values: **InstallAndroidApp**, **UninstallAndroidApp**, **InstallAndroidCertificate**, **UninstallAndroidCertificate**. (optional)<br />
     * @return ListExternalTerminalActionsResponse
     * @throws ApiException if fails to make API call
     */
    public ListExternalTerminalActionsResponse listTerminalActions(String companyId, Map<String, String> queryParams) throws ApiException, IOException {
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("companyId", companyId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/companies/{companyId}/terminalActions");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams, queryParams);
        return ListExternalTerminalActionsResponse.fromJson(jsonResult);
    }
    
    /**
     * Get terminal action
     *
     * @param companyId The unique identifier of the company account. (required)
     * @param actionId The unique identifier of the terminal action. (required)
     * @return ExternalTerminalAction
     * @throws ApiException if fails to make API call
     */
    public ExternalTerminalAction getTerminalAction(String companyId, String actionId) throws ApiException, IOException {
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId'", 400);
        }
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("companyId", companyId);
        pathParams.put("actionId", actionId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/companies/{companyId}/terminalActions/{actionId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams);
        return ExternalTerminalAction.fromJson(jsonResult);
    }
    
}
