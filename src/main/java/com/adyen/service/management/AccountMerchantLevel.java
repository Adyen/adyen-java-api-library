/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.service.management;

import com.adyen.ApiKeyAuthenticatedService;
import com.adyen.Client;
import com.adyen.constants.ApiConstants;
import com.adyen.model.management.JSON;
import com.adyen.model.management.CreateMerchantRequest;
import com.adyen.model.management.CreateMerchantResponse;
import com.adyen.model.management.ListMerchantResponse;
import com.adyen.model.management.Merchant;
import com.adyen.model.management.RequestActivationResponse;
import com.adyen.model.management.RestServiceError;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.ManagementResource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class AccountMerchantLevel extends ApiKeyAuthenticatedService {
    public AccountMerchantLevel(Client client) {
        super(client);
        new JSON();
    }

    /**
     * Get a list of merchant accounts
     *
     * @param queryParams  (optional)
     *    pageNumber: The number of the page to fetch. (optional)<br />
     *    pageSize: The number of items to have on a page, maximum 100. The default is 10 items on a page. (optional)<br />
     * @return ListMerchantResponse
     * @throws ApiException if fails to make API call
     */
    public ListMerchantResponse listMerchantAccounts(Map<String, String> queryParams) throws ApiException, IOException {

        Map<String, String> pathParams = new HashMap<>();

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/merchants");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams, queryParams);
        return ListMerchantResponse.fromJson(jsonResult);
    }
    
    /**
     * Get a merchant account
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @return Merchant
     * @throws ApiException if fails to make API call
     */
    public Merchant getMerchantAccount(String merchantId) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams);
        return Merchant.fromJson(jsonResult);
    }
    
    /**
     * Create a merchant account
     *
     * @param createMerchantRequest  (optional)
     * @return CreateMerchantResponse
     * @throws ApiException if fails to make API call
     */
    public CreateMerchantResponse createMerchantAccount(CreateMerchantRequest createMerchantRequest) throws ApiException, IOException {

        Map<String, String> pathParams = new HashMap<>();

        String requestBody = createMerchantRequest.toJson();
        ManagementResource resource = new ManagementResource(this, "/merchants");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.POST, pathParams);
        return CreateMerchantResponse.fromJson(jsonResult);
    }
    
    /**
     * Request to activate a merchant account
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @return RequestActivationResponse
     * @throws ApiException if fails to make API call
     */
    public RequestActivationResponse requestToActivateMerchantAccount(String merchantId) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/activate");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.POST, pathParams);
        return RequestActivationResponse.fromJson(jsonResult);
    }
    
}
