/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.service.management;

import com.adyen.ApiKeyAuthenticatedService;
import com.adyen.Client;
import com.adyen.constants.ApiConstants;
import com.adyen.model.management.JSON;
import com.adyen.model.management.CompanyUser;
import com.adyen.model.management.CreateCompanyUserRequest;
import com.adyen.model.management.CreateCompanyUserResponse;
import com.adyen.model.management.ListCompanyUsersResponse;
import com.adyen.model.management.RestServiceError;
import com.adyen.model.management.UpdateCompanyUserRequest;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.ManagementResource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class UsersCompanyLevel extends ApiKeyAuthenticatedService {
    public UsersCompanyLevel(Client client) {
        super(client);
        new JSON();
    }

    /**
     * Get a list of users
     *
     * @param companyId The unique identifier of the company account. (required)
     * @param queryParams  (optional)
     *    pageNumber: The number of the page to return. (optional)<br />
     *    pageSize: The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page. (optional)<br />
     * @return ListCompanyUsersResponse
     * @throws ApiException if fails to make API call
     */
    public ListCompanyUsersResponse listUsers(String companyId, Map<String, String> queryParams) throws ApiException, IOException {
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("companyId", companyId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/companies/{companyId}/users");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams, queryParams);
        return ListCompanyUsersResponse.fromJson(jsonResult);
    }
    
    /**
     * Get user details
     *
     * @param companyId The unique identifier of the company account. (required)
     * @param userId The unique identifier of the user. (required)
     * @return CompanyUser
     * @throws ApiException if fails to make API call
     */
    public CompanyUser getUserDetails(String companyId, String userId) throws ApiException, IOException {
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId'", 400);
        }
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("companyId", companyId);
        pathParams.put("userId", userId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/companies/{companyId}/users/{userId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams);
        return CompanyUser.fromJson(jsonResult);
    }
    
    /**
     * Update user details
     *
     * @param companyId The unique identifier of the company account. (required)
     * @param userId The unique identifier of the user. (required)
     * @param updateCompanyUserRequest  (optional)
     * @return CompanyUser
     * @throws ApiException if fails to make API call
     */
    public CompanyUser updateUserDetails(String companyId, String userId, UpdateCompanyUserRequest updateCompanyUserRequest) throws ApiException, IOException {
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId'", 400);
        }
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("companyId", companyId);
        pathParams.put("userId", userId);

        String requestBody = updateCompanyUserRequest.toJson();
        ManagementResource resource = new ManagementResource(this, "/companies/{companyId}/users/{userId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.PATCH, pathParams);
        return CompanyUser.fromJson(jsonResult);
    }
    
    /**
     * Create a new user
     *
     * @param companyId The unique identifier of the company account. (required)
     * @param createCompanyUserRequest  (optional)
     * @return CreateCompanyUserResponse
     * @throws ApiException if fails to make API call
     */
    public CreateCompanyUserResponse createNewUser(String companyId, CreateCompanyUserRequest createCompanyUserRequest) throws ApiException, IOException {
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("companyId", companyId);

        String requestBody = createCompanyUserRequest.toJson();
        ManagementResource resource = new ManagementResource(this, "/companies/{companyId}/users");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.POST, pathParams);
        return CreateCompanyUserResponse.fromJson(jsonResult);
    }
    
}
