/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.service.management;

import com.adyen.ApiKeyAuthenticatedService;
import com.adyen.Client;
import com.adyen.constants.ApiConstants;
import com.adyen.model.management.JSON;
import com.adyen.model.management.AllowedOrigin;
import com.adyen.model.management.AllowedOriginsResponse;
import com.adyen.model.management.RestServiceError;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.ManagementResource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class AllowedOriginsMerchantLevel extends ApiKeyAuthenticatedService {
    public AllowedOriginsMerchantLevel(Client client) {
        super(client);
        new JSON();
    }

    /**
     * Delete an allowed origin
     *
     * @param merchantId      The unique identifier of the merchant account. (required)
     * @param apiCredentialId Unique identifier of the API credential. (required)
     * @param originId        Unique identifier of the allowed origin. (required)
     * @throws ApiException if fails to make API call
     */
    public void deleteAllowedOrigin(String merchantId, String apiCredentialId, String originId) throws ApiException, IOException {
        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("apiCredentialId", apiCredentialId);
        pathParams.put("originId", originId);

        getManagementResource("/merchants/{merchantId}/apiCredentials/{apiCredentialId}/allowedOrigins/{originId}", null, ApiConstants.HttpMethod.DELETE, pathParams);
    }

    public AllowedOriginsResponse listAllowedOrigins(String merchantId, String apiCredentialId) throws ApiException, IOException {
        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("apiCredentialId", apiCredentialId);

        String requestBody = null;
        String jsonResult = getManagementResource("/merchants/{merchantId}/apiCredentials/{apiCredentialId}/allowedOrigins", null, ApiConstants.HttpMethod.GET, pathParams)
                .request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams);
        return AllowedOriginsResponse.fromJson(jsonResult);
    }

    /**
     * Get an allowed origin
     *
     * @param merchantId      The unique identifier of the merchant account. (required)
     * @param apiCredentialId Unique identifier of the API credential. (required)
     * @param originId        Unique identifier of the allowed origin. (required)
     * @return AllowedOrigin
     * @throws ApiException if fails to make API call
     */
    public AllowedOrigin getAllowedOrigin(String merchantId, String apiCredentialId, String originId) throws ApiException, IOException {
        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("apiCredentialId", apiCredentialId);
        pathParams.put("originId", originId);

        String requestBody = null;
        String jsonResult = getManagementResource("/merchants/{merchantId}/apiCredentials/{apiCredentialId}/allowedOrigins/{originId}", requestBody, ApiConstants.HttpMethod.GET, pathParams)
                .request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams);
        return AllowedOrigin.fromJson(jsonResult);
    }

    /**
     * Create an allowed origin
     *
     * @param merchantId      The unique identifier of the merchant account. (required)
     * @param apiCredentialId Unique identifier of the API credential. (required)
     * @param allowedOrigin   (optional)
     * @return AllowedOriginsResponse
     * @throws ApiException if fails to make API call
     */
    public AllowedOriginsResponse createAllowedOrigin(String merchantId, String apiCredentialId, AllowedOrigin allowedOrigin) throws ApiException, IOException {
        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("apiCredentialId", apiCredentialId);

        String requestBody = allowedOrigin.toJson();
        String jsonResult = getManagementResource("/merchants/{merchantId}/apiCredentials/{apiCredentialId}/allowedOrigins", requestBody,
                ApiConstants.HttpMethod.POST, pathParams).request(requestBody, null, ApiConstants.HttpMethod.POST, pathParams);
        return AllowedOriginsResponse.fromJson(jsonResult);
    }

    private ManagementResource getManagementResource(String path, String requestBody, ApiConstants.HttpMethod httpMethod, Map<String, String> pathParams) throws ApiException, IOException {
        for (Map.Entry<String, String> param : pathParams.entrySet()) {
            if (param.getValue() == null) {
                throw new ApiException("Missing the required parameter '" + param.getKey() + "'", 400);
            }
        }

        ManagementResource resource = new ManagementResource(this, path);
        resource.request(requestBody, null, httpMethod, pathParams);
        return resource;
    }
}
