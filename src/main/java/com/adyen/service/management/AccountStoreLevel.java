/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.service.management;

import com.adyen.ApiKeyAuthenticatedService;
import com.adyen.Client;
import com.adyen.constants.ApiConstants;
import com.adyen.model.management.JSON;
import com.adyen.model.management.ListStoresResponse;
import com.adyen.model.management.RestServiceError;
import com.adyen.model.management.Store;
import com.adyen.model.management.StoreCreationRequest;
import com.adyen.model.management.StoreCreationWithMerchantCodeRequest;
import com.adyen.model.management.UpdateStoreRequest;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.ManagementResource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class AccountStoreLevel extends ApiKeyAuthenticatedService {
    public AccountStoreLevel(Client client) {
        super(client);
        new JSON();
    }

    /**
     * Get a list of stores
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param queryParams  (optional)
     *    pageNumber: The number of the page to fetch. (optional)<br />
     *    pageSize: The number of items to have on a page, maximum 100. The default is 10 items on a page. (optional)<br />
     *    reference: The reference of the store. (optional)<br />
     * @return ListStoresResponse
     * @throws ApiException if fails to make API call
     */
    public ListStoresResponse listStores(String merchantId, Map<String, String> queryParams) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/stores");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams, queryParams);
        return ListStoresResponse.fromJson(jsonResult);
    }
    
    /**
     * Get a store
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param storeId The unique identifier of the store. (required)
     * @return Store
     * @throws ApiException if fails to make API call
     */
    public Store getStore(String merchantId, String storeId) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("storeId", storeId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/stores/{storeId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams);
        return Store.fromJson(jsonResult);
    }
    
    /**
     * Get a list of stores
     *
     * @param queryParams  (optional)
     *    pageNumber: The number of the page to fetch. (optional)<br />
     *    pageSize: The number of items to have on a page, maximum 100. The default is 10 items on a page. (optional)<br />
     *    reference: The reference of the store. (optional)<br />
     *    merchantId: The unique identifier of the merchant account. (optional)<br />
     * @return ListStoresResponse
     * @throws ApiException if fails to make API call
     */
    public ListStoresResponse listStores(Map<String, String> queryParams) throws ApiException, IOException {

        Map<String, String> pathParams = new HashMap<>();

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/stores");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams, queryParams);
        return ListStoresResponse.fromJson(jsonResult);
    }
    
    /**
     * Get a store
     *
     * @param storeId The unique identifier of the store. (required)
     * @return Store
     * @throws ApiException if fails to make API call
     */
    public Store getStore(String storeId) throws ApiException, IOException {
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("storeId", storeId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/stores/{storeId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams);
        return Store.fromJson(jsonResult);
    }
    
    /**
     * Update a store
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param storeId The unique identifier of the store. (required)
     * @param updateStoreRequest  (optional)
     * @return Store
     * @throws ApiException if fails to make API call
     */
    public Store updateStore(String merchantId, String storeId, UpdateStoreRequest updateStoreRequest) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("storeId", storeId);

        String requestBody = updateStoreRequest.toJson();
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/stores/{storeId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.PATCH, pathParams);
        return Store.fromJson(jsonResult);
    }
    
    /**
     * Update a store
     *
     * @param storeId The unique identifier of the store. (required)
     * @param updateStoreRequest  (optional)
     * @return Store
     * @throws ApiException if fails to make API call
     */
    public Store updateStore(String storeId, UpdateStoreRequest updateStoreRequest) throws ApiException, IOException {
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("storeId", storeId);

        String requestBody = updateStoreRequest.toJson();
        ManagementResource resource = new ManagementResource(this, "/stores/{storeId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.PATCH, pathParams);
        return Store.fromJson(jsonResult);
    }
    
    /**
     * Create a store
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param storeCreationRequest  (optional)
     * @return Store
     * @throws ApiException if fails to make API call
     */
    public Store createStore(String merchantId, StoreCreationRequest storeCreationRequest) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);

        String requestBody = storeCreationRequest.toJson();
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/stores");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.POST, pathParams);
        return Store.fromJson(jsonResult);
    }
    
    /**
     * Create a store
     *
     * @param storeCreationWithMerchantCodeRequest  (optional)
     * @return Store
     * @throws ApiException if fails to make API call
     */
    public Store createStore(StoreCreationWithMerchantCodeRequest storeCreationWithMerchantCodeRequest) throws ApiException, IOException {

        Map<String, String> pathParams = new HashMap<>();

        String requestBody = storeCreationWithMerchantCodeRequest.toJson();
        ManagementResource resource = new ManagementResource(this, "/stores");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.POST, pathParams);
        return Store.fromJson(jsonResult);
    }
    
}
