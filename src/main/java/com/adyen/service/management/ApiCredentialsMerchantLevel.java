/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.service.management;

import com.adyen.ApiKeyAuthenticatedService;
import com.adyen.Client;
import com.adyen.constants.ApiConstants;
import com.adyen.model.management.JSON;
import com.adyen.model.management.ApiCredential;
import com.adyen.model.management.CreateApiCredentialResponse;
import com.adyen.model.management.CreateMerchantApiCredentialRequest;
import com.adyen.model.management.ListMerchantApiCredentialsResponse;
import com.adyen.model.management.RestServiceError;
import com.adyen.model.management.UpdateMerchantApiCredentialRequest;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.ManagementResource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ApiCredentialsMerchantLevel extends ApiKeyAuthenticatedService {
    public ApiCredentialsMerchantLevel(Client client) {
        super(client);
        new JSON();
    }

    /**
     * Get a list of API credentials
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param queryParams  (optional)
     *    pageNumber: The number of the page to fetch. (optional)<br />
     *    pageSize: The number of items to have on a page, maximum 100. The default is 10 items on a page. (optional)<br />
     * @return ListMerchantApiCredentialsResponse
     * @throws ApiException if fails to make API call
     */
    public ListMerchantApiCredentialsResponse listApiCredentials(String merchantId, Map<String, String> queryParams) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/apiCredentials");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams, queryParams);
        return ListMerchantApiCredentialsResponse.fromJson(jsonResult);
    }
    
    /**
     * Get an API credential
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param apiCredentialId Unique identifier of the API credential. (required)
     * @return ApiCredential
     * @throws ApiException if fails to make API call
     */
    public ApiCredential getApiCredential(String merchantId, String apiCredentialId) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }
        if (apiCredentialId == null) {
            throw new ApiException("Missing the required parameter 'apiCredentialId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("apiCredentialId", apiCredentialId);

        String requestBody = null;
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/apiCredentials/{apiCredentialId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.GET, pathParams);
        return ApiCredential.fromJson(jsonResult);
    }
    
    /**
     * Update an API credential
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param apiCredentialId Unique identifier of the API credential. (required)
     * @param updateMerchantApiCredentialRequest  (optional)
     * @return ApiCredential
     * @throws ApiException if fails to make API call
     */
    public ApiCredential updateApiCredential(String merchantId, String apiCredentialId, UpdateMerchantApiCredentialRequest updateMerchantApiCredentialRequest) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }
        if (apiCredentialId == null) {
            throw new ApiException("Missing the required parameter 'apiCredentialId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);
        pathParams.put("apiCredentialId", apiCredentialId);

        String requestBody = updateMerchantApiCredentialRequest.toJson();
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/apiCredentials/{apiCredentialId}");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.PATCH, pathParams);
        return ApiCredential.fromJson(jsonResult);
    }
    
    /**
     * Create an API credential
     *
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param createMerchantApiCredentialRequest  (optional)
     * @return CreateApiCredentialResponse
     * @throws ApiException if fails to make API call
     */
    public CreateApiCredentialResponse createApiCredential(String merchantId, CreateMerchantApiCredentialRequest createMerchantApiCredentialRequest) throws ApiException, IOException {
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId'", 400);
        }

        Map<String, String> pathParams = new HashMap<>();
        pathParams.put("merchantId", merchantId);

        String requestBody = createMerchantApiCredentialRequest.toJson();
        ManagementResource resource = new ManagementResource(this, "/merchants/{merchantId}/apiCredentials");
        String jsonResult = resource.request(requestBody, null, ApiConstants.HttpMethod.POST, pathParams);
        return CreateApiCredentialResponse.fromJson(jsonResult);
    }
    
}
