/*
 * Capital API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.adyen.service.capital;

import com.adyen.Client;
import com.adyen.Service;
import com.adyen.constants.ApiConstants;
import com.adyen.model.capital.DefaultErrorResponseEntity;
import com.adyen.model.capital.Disbursement;
import com.adyen.model.capital.Disbursements;
import com.adyen.model.capital.Grant;
import com.adyen.model.capital.GrantInfo;
import com.adyen.model.capital.Grants;
import com.adyen.model.capital.PatchableDisbursement;
import com.adyen.model.RequestOptions;
import com.adyen.service.exception.ApiException;
import com.adyen.service.resource.Resource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class GrantsApi extends Service {

    public static final String API_VERSION = "1";

    protected String baseURL;

    /**
    * Grants constructor in {@link com.adyen.service.capital package}.
    * @param client {@link Client } (required)
    */
    public GrantsApi(Client client) {
        super(client);
        this.baseURL = createBaseURL("https://balanceplatform-api-test.adyen.com/capital/v1");
    }

    /**
    * Grants constructor in {@link com.adyen.service.capital package}.
    * Please use this constructor only if you would like to pass along your own url for routing or testing purposes. The latest API version is defined in this class as a constant.
    * @param client {@link Client } (required)
    * @param baseURL {@link String } (required)
    */
    public GrantsApi(Client client, String baseURL) {
        super(client);
        this.baseURL = baseURL;
    }

    /**
    * Get all the grants of an account holder
    *
    * @param counterpartyAccountHolderId {@link String } The unique identifier of the account holder that received the grants. (required)
    * @return {@link Grants }
    * @throws ApiException if fails to make API call
    */
    public Grants getAllGrants(String counterpartyAccountHolderId) throws ApiException, IOException {
        return getAllGrants(counterpartyAccountHolderId,  null);
    }

    /**
    * Get all the grants of an account holder
    *
    * @param counterpartyAccountHolderId {@link String } Query: The unique identifier of the account holder that received the grants. (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link Grants }
    * @throws ApiException if fails to make API call
    */
    public Grants getAllGrants(String counterpartyAccountHolderId, RequestOptions requestOptions) throws ApiException, IOException {
        //Add query params
        Map<String, String> queryParams = new HashMap<>();
        if (counterpartyAccountHolderId != null) {
        queryParams.put("counterpartyAccountHolderId", counterpartyAccountHolderId);
        }

        String requestBody = null;
        Resource resource = new Resource(this, this.baseURL + "/grants", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.GET, null, queryParams);
        return Grants.fromJson(jsonResult);
    }

    /**
    * Update the repayment configuration of a disbursement
    *
    * @param grantId {@link String } The unique identifier of the grant reference. (required)
    * @param disbursementId {@link String } The unique identifier of the disbursement. (required)
    * @param patchableDisbursement {@link PatchableDisbursement }  (required)
    * @param patchableDisbursement {@link PatchableDisbursement }  (required)
    * @return {@link Disbursement }
    * @throws ApiException if fails to make API call
    */
    public Disbursement updateGrantDisbursement(String grantId, String disbursementId, PatchableDisbursement patchableDisbursement) throws ApiException, IOException {
        return updateGrantDisbursement(grantId, disbursementId, patchableDisbursement, null);
    }

    /**
    * Update the repayment configuration of a disbursement
    *
    * @param grantId {@link String } The unique identifier of the grant reference. (required)
    * @param disbursementId {@link String } The unique identifier of the disbursement. (required)
    * @param patchableDisbursement {@link PatchableDisbursement }  (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link Disbursement }
    * @throws ApiException if fails to make API call
    */
    public Disbursement updateGrantDisbursement(String grantId, String disbursementId, PatchableDisbursement patchableDisbursement, RequestOptions requestOptions) throws ApiException, IOException {
        //Add path params
        Map<String, String> pathParams = new HashMap<>();
        if (grantId == null) {
            throw new IllegalArgumentException("Please provide the grantId path parameter");
        }
        pathParams.put("grantId", grantId);
        if (disbursementId == null) {
            throw new IllegalArgumentException("Please provide the disbursementId path parameter");
        }
        pathParams.put("disbursementId", disbursementId);

        String requestBody = patchableDisbursement.toJson();
        Resource resource = new Resource(this, this.baseURL + "/grants/{grantId}/disbursements/{disbursementId}", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.PATCH, pathParams);
        return Disbursement.fromJson(jsonResult);
    }

    /**
    * Get all the disbursements of a grant
    *
    * @param grantId {@link String } The unique identifier of the grant reference. (required)
    * @return {@link Disbursements }
    * @throws ApiException if fails to make API call
    */
    public Disbursements getAllGrantDisbursements(String grantId) throws ApiException, IOException {
        return getAllGrantDisbursements(grantId, null);
    }

    /**
    * Get all the disbursements of a grant
    *
    * @param grantId {@link String } The unique identifier of the grant reference. (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link Disbursements }
    * @throws ApiException if fails to make API call
    */
    public Disbursements getAllGrantDisbursements(String grantId, RequestOptions requestOptions) throws ApiException, IOException {
        //Add path params
        Map<String, String> pathParams = new HashMap<>();
        if (grantId == null) {
            throw new IllegalArgumentException("Please provide the grantId path parameter");
        }
        pathParams.put("grantId", grantId);

        String requestBody = null;
        Resource resource = new Resource(this, this.baseURL + "/grants/{grantId}/disbursements", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.GET, pathParams);
        return Disbursements.fromJson(jsonResult);
    }

    /**
    * Get the details of a grant
    *
    * @param grantId {@link String } The unique identifier of the grant reference. (required)
    * @return {@link Grant }
    * @throws ApiException if fails to make API call
    */
    public Grant getGrant(String grantId) throws ApiException, IOException {
        return getGrant(grantId, null);
    }

    /**
    * Get the details of a grant
    *
    * @param grantId {@link String } The unique identifier of the grant reference. (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link Grant }
    * @throws ApiException if fails to make API call
    */
    public Grant getGrant(String grantId, RequestOptions requestOptions) throws ApiException, IOException {
        //Add path params
        Map<String, String> pathParams = new HashMap<>();
        if (grantId == null) {
            throw new IllegalArgumentException("Please provide the grantId path parameter");
        }
        pathParams.put("grantId", grantId);

        String requestBody = null;
        Resource resource = new Resource(this, this.baseURL + "/grants/{grantId}", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.GET, pathParams);
        return Grant.fromJson(jsonResult);
    }

    /**
    * Make a request for a grant
    *
    * @param grantInfo {@link GrantInfo }  (required)
    * @return {@link Grant }
    * @throws ApiException if fails to make API call
    */
    public Grant requestGrant(GrantInfo grantInfo) throws ApiException, IOException {
        return requestGrant(grantInfo, null);
    }

    /**
    * Make a request for a grant
    *
    * @param grantInfo {@link GrantInfo }  (required)
    * @param requestOptions {@link RequestOptions } Object to store additional data such as idempotency-keys (optional)
    * @return {@link Grant }
    * @throws ApiException if fails to make API call
    */
    public Grant requestGrant(GrantInfo grantInfo, RequestOptions requestOptions) throws ApiException, IOException {
        String requestBody = grantInfo.toJson();
        Resource resource = new Resource(this, this.baseURL + "/grants", null);
        String jsonResult = resource.request(requestBody, requestOptions, ApiConstants.HttpMethod.POST, null);
        return Grant.fromJson(jsonResult);
    }
}
