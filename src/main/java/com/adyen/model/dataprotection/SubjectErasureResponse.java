/*
 * Adyen Data Protection API
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.adyen.model.dataprotection;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.util.*;
import java.util.Arrays;
import java.util.logging.Logger;

/** SubjectErasureResponse */
@JsonPropertyOrder({SubjectErasureResponse.JSON_PROPERTY_RESULT})
public class SubjectErasureResponse {
  /** The result of this operation. */
  public enum ResultEnum {
    ACTIVE_RECURRING_TOKEN_EXISTS(String.valueOf("ACTIVE_RECURRING_TOKEN_EXISTS")),

    ALREADY_PROCESSED(String.valueOf("ALREADY_PROCESSED")),

    PAYMENT_NOT_FOUND(String.valueOf("PAYMENT_NOT_FOUND")),

    SUCCESS(String.valueOf("SUCCESS"));

    private static final Logger LOG = Logger.getLogger(ResultEnum.class.getName());

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      // handling unexpected value
      LOG.warning(
          "ResultEnum: unexpected enum value '"
              + value
              + "' - Supported values are "
              + Arrays.toString(ResultEnum.values()));
      return null;
    }
  }

  public static final String JSON_PROPERTY_RESULT = "result";
  private ResultEnum result;

  public SubjectErasureResponse() {}

  /**
   * The result of this operation.
   *
   * @param result The result of this operation.
   * @return the current {@code SubjectErasureResponse} instance, allowing for method chaining
   */
  public SubjectErasureResponse result(ResultEnum result) {
    this.result = result;
    return this;
  }

  /**
   * The result of this operation.
   *
   * @return result The result of this operation.
   */
  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ResultEnum getResult() {
    return result;
  }

  /**
   * The result of this operation.
   *
   * @param result The result of this operation.
   */
  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResult(ResultEnum result) {
    this.result = result;
  }

  /** Return true if this SubjectErasureResponse object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubjectErasureResponse subjectErasureResponse = (SubjectErasureResponse) o;
    return Objects.equals(this.result, subjectErasureResponse.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(result);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubjectErasureResponse {\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Create an instance of SubjectErasureResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubjectErasureResponse
   * @throws JsonProcessingException if the JSON string is invalid with respect to
   *     SubjectErasureResponse
   */
  public static SubjectErasureResponse fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, SubjectErasureResponse.class);
  }

  /**
   * Convert an instance of SubjectErasureResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
