package com.adyen.model.clouddevice;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;

/** Type of sale capabilities. */
public enum SaleCapabilitiesType {

  /**
   * To display to the Cashier a new state on which the POI is entering. For instance, during a
   * payment, the POI could display to the Cashier that POI request an
   */
  @Schema(
      description =
          "To display to the Cashier a new state on which the POI is entering. For instance, during a payment, the POI could display to the Cashier that POI request an")
  CASHIER_STATUS("CashierStatus"),

  /** To display to the Cashier information related to an error situation occurring on the POI. */
  @Schema(
      description =
          "To display to the Cashier information related to an error situation occurring on the POI.")
  CASHIER_ERROR("CashierError"),

  /** Standard Cashier display interface (to ask question, or to show information). */
  @Schema(
      description = "Standard Cashier display interface (to ask question, or to show information).")
  CASHIER_DISPLAY("CashierDisplay"),

  /** Information displayed on the Cardholder POI interface, replicated on the Cashier interface. */
  @Schema(
      description =
          "Information displayed on the Cardholder POI interface, replicated on the Cashier interface.")
  POI_REPLICATION("POIReplication"),

  /**
   * Any kind of keyboard allowing all or part of the commands of the Input messageType request from
   * the Sale System to the POI System (InputCommand data element). The
   */
  @Schema(
      description =
          "Any kind of keyboard allowing all or part of the commands of the Input message request from the Sale System to the POI System (InputCommand data element). The")
  CASHIER_INPUT("CashierInput"),

  /**
   * Input of the Cardholder POI interface which can be entered by the Cashier to assist the
   * Customer.
   */
  @Schema(
      description =
          "Input of the Cardholder POI interface which can be entered by the Cashier to assist the Customer.")
  CUSTOMER_ASSISTANCE("CustomerAssistance"),

  /**
   * Standard Customer display interface used by the POI System to ask question, or to show
   * information to the Customer inside a Service dialogue.
   */
  @Schema(
      description =
          "Standard Customer display interface used by the POI System to ask question, or to show information to the Customer inside a Service dialogue.")
  CUSTOMER_DISPLAY("CustomerDisplay"),

  /**
   * To display to the Customer information is related to an error situation occurring on the Sale
   * Terminal during a Sale transaction.
   */
  @Schema(
      description =
          "To display to the Customer information is related to an error situation occurring on the Sale Terminal during a Sale transaction.")
  CUSTOMER_ERROR("CustomerError"),

  /**
   * Any kind of keyboard allowing all or part of the commands of the Input messageType request from
   * the Sale System to the POI System (InputCommand data element). The
   */
  @Schema(
      description =
          "Any kind of keyboard allowing all or part of the commands of the Input message request from the Sale System to the POI System (InputCommand data element). The")
  CUSTOMER_INPUT("CustomerInput"),

  /** Printer for the Payment receipt. */
  @Schema(description = "Printer for the Payment receipt.")
  PRINTER_RECEIPT("PrinterReceipt"),

  /**
   * When the POI System wants to print specific document (check, dynamic currency conversion ...).
   */
  @Schema(
      description =
          "When the POI System wants to print specific document (check, dynamic currency conversion ...). ")
  PRINTER_DOCUMENT("PrinterDocument"),

  /** Coupons, voucher or special ticket generated by the POI and to be printed. */
  @Schema(description = "Coupons, voucher or special ticket generated by the POI and to be printed.")
  PRINTER_VOUCHER("PrinterVoucher"),

  /** Magnetic stripe card reader */
  @Schema(description = "Magnetic stripe card reader")
  MAG_STRIPE("MagStripe"),

  /** Contact ICC card reader */
  ICC("ICC"),

  /** Contactless card reader with EMV applications */
  @Schema(description = "Contactless card reader with EMV applications")
  EMV_CONTACTLESS("EMVContactless");

  private final String value;

  SaleCapabilitiesType(String v) {
    value = v;
  }

  /**
   * Returns the string representation of the SaleCapabilitiesType.
   *
   * @return the string value
   */
  @JsonValue
  public String value() {
    return value;
  }

  /**
   * Creates a SaleCapabilitiesType from a string value.
   *
   * @param v the string value
   * @return the corresponding SaleCapabilitiesType
   */
  @JsonCreator
  public static SaleCapabilitiesType fromValue(String v) {
    return Arrays.stream(values()).filter(s -> s.value.equals(v)).findFirst().orElse(null);
  }
}