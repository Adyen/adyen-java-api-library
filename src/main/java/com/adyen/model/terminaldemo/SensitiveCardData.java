/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.TrackData;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * This data structure could be CMS protected (EnvelopedData). In this case the data structure SensitiveCardData is replaced by the data structure ProtectedCardData of type ContentInformationType. When this data is protected, the exact content is unknown by the Sale System, and might include all the information which are required by an external backup POI Server to make a batch payment transaction in case of problem with the POI System. Sensitive information related to the payment card, entered or read by the Sale System.
 */
@JsonPropertyOrder({
  SensitiveCardData.JSON_PROPERTY_P_A_N,
  SensitiveCardData.JSON_PROPERTY_CARD_SEQ_NUMB,
  SensitiveCardData.JSON_PROPERTY_EXPIRY_DATE,
  SensitiveCardData.JSON_PROPERTY_TRACK_DATA
})

public class SensitiveCardData {
  public static final String JSON_PROPERTY_P_A_N = "PAN";
  private Integer PAN;

  public static final String JSON_PROPERTY_CARD_SEQ_NUMB = "CardSeqNumb";
  private Integer cardSeqNumb;

  public static final String JSON_PROPERTY_EXPIRY_DATE = "ExpiryDate";
  private Integer expiryDate;

  public static final String JSON_PROPERTY_TRACK_DATA = "TrackData";
  private List<TrackData> trackData;

  public SensitiveCardData() { 
  }

  /**
   * Primary Account Number.
   *
   * @param PAN Primary Account Number.
   * @return the current {@code SensitiveCardData} instance, allowing for method chaining
   */
  public SensitiveCardData PAN(Integer PAN) {
    this.PAN = PAN;
    return this;
  }

  /**
   * Primary Account Number.
   * minimum: 8
   * maximum: 28
   * @return PAN Primary Account Number.
   */
  @JsonProperty(JSON_PROPERTY_P_A_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getPAN() {
    return PAN;
  }

  /**
   * Primary Account Number.
   *
   * @param PAN Primary Account Number.
   */
  @JsonProperty(JSON_PROPERTY_P_A_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPAN(Integer PAN) {
    this.PAN = PAN;
  }

  /**
   * Card Sequence Number. If EntryMode is File, Keyed, or Manual.
   *
   * @param cardSeqNumb Card Sequence Number. If EntryMode is File, Keyed, or Manual.
   * @return the current {@code SensitiveCardData} instance, allowing for method chaining
   */
  public SensitiveCardData cardSeqNumb(Integer cardSeqNumb) {
    this.cardSeqNumb = cardSeqNumb;
    return this;
  }

  /**
   * Card Sequence Number. If EntryMode is File, Keyed, or Manual.
   * minimum: 2
   * maximum: 3
   * @return cardSeqNumb Card Sequence Number. If EntryMode is File, Keyed, or Manual.
   */
  @JsonProperty(JSON_PROPERTY_CARD_SEQ_NUMB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getCardSeqNumb() {
    return cardSeqNumb;
  }

  /**
   * Card Sequence Number. If EntryMode is File, Keyed, or Manual.
   *
   * @param cardSeqNumb Card Sequence Number. If EntryMode is File, Keyed, or Manual.
   */
  @JsonProperty(JSON_PROPERTY_CARD_SEQ_NUMB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardSeqNumb(Integer cardSeqNumb) {
    this.cardSeqNumb = cardSeqNumb;
  }

  /**
   * Date after which the card cannot be used. If EntryMode is File.
   *
   * @param expiryDate Date after which the card cannot be used. If EntryMode is File.
   * @return the current {@code SensitiveCardData} instance, allowing for method chaining
   */
  public SensitiveCardData expiryDate(Integer expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * Date after which the card cannot be used. If EntryMode is File.
   * minimum: 4
   * maximum: 4
   * @return expiryDate Date after which the card cannot be used. If EntryMode is File.
   */
  @JsonProperty(JSON_PROPERTY_EXPIRY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getExpiryDate() {
    return expiryDate;
  }

  /**
   * Date after which the card cannot be used. If EntryMode is File.
   *
   * @param expiryDate Date after which the card cannot be used. If EntryMode is File.
   */
  @JsonProperty(JSON_PROPERTY_EXPIRY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiryDate(Integer expiryDate) {
    this.expiryDate = expiryDate;
  }

  /**
   * Magnetic track or magnetic ink characters line. If EntryMode is MagStripe or RFID .
   *
   * @param trackData Magnetic track or magnetic ink characters line. If EntryMode is MagStripe or RFID .
   * @return the current {@code SensitiveCardData} instance, allowing for method chaining
   */
  public SensitiveCardData trackData(List<TrackData> trackData) {
    this.trackData = trackData;
    return this;
  }

  public SensitiveCardData addTrackDataItem(TrackData trackDataItem) {
    if (this.trackData == null) {
      this.trackData = new ArrayList<>();
    }
    this.trackData.add(trackDataItem);
    return this;
  }

  /**
   * Magnetic track or magnetic ink characters line. If EntryMode is MagStripe or RFID .
   * @return trackData Magnetic track or magnetic ink characters line. If EntryMode is MagStripe or RFID .
   */
  @JsonProperty(JSON_PROPERTY_TRACK_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<TrackData> getTrackData() {
    return trackData;
  }

  /**
   * Magnetic track or magnetic ink characters line. If EntryMode is MagStripe or RFID .
   *
   * @param trackData Magnetic track or magnetic ink characters line. If EntryMode is MagStripe or RFID .
   */
  @JsonProperty(JSON_PROPERTY_TRACK_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrackData(List<TrackData> trackData) {
    this.trackData = trackData;
  }

  /**
   * Return true if this SensitiveCardData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SensitiveCardData sensitiveCardData = (SensitiveCardData) o;
    return Objects.equals(this.PAN, sensitiveCardData.PAN) &&
        Objects.equals(this.cardSeqNumb, sensitiveCardData.cardSeqNumb) &&
        Objects.equals(this.expiryDate, sensitiveCardData.expiryDate) &&
        Objects.equals(this.trackData, sensitiveCardData.trackData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(PAN, cardSeqNumb, expiryDate, trackData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SensitiveCardData {\n");
    sb.append("    PAN: ").append(toIndentedString(PAN)).append("\n");
    sb.append("    cardSeqNumb: ").append(toIndentedString(cardSeqNumb)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    trackData: ").append(toIndentedString(trackData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of SensitiveCardData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SensitiveCardData
   * @throws JsonProcessingException if the JSON string is invalid with respect to SensitiveCardData
   */
  public static SensitiveCardData fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, SensitiveCardData.class);
  }
/**
  * Convert an instance of SensitiveCardData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
