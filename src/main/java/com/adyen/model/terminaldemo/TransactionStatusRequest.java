/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.DocumentQualifier;
import com.adyen.model.terminaldemo.MessageReference;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Content of the TransactionStatus Request message. It conveys Information requested for status of the last or current Payment, Loyalty or Reversal transaction.
 */
@JsonPropertyOrder({
  TransactionStatusRequest.JSON_PROPERTY_MESSAGE_REFERENCE,
  TransactionStatusRequest.JSON_PROPERTY_RECEIPT_REPRINT_FLAG,
  TransactionStatusRequest.JSON_PROPERTY_DOCUMENT_QUALIFIER
})

public class TransactionStatusRequest {
  public static final String JSON_PROPERTY_MESSAGE_REFERENCE = "MessageReference";
  private MessageReference messageReference;

  public static final String JSON_PROPERTY_RECEIPT_REPRINT_FLAG = "ReceiptReprintFlag";
  private Boolean receiptReprintFlag;

  public static final String JSON_PROPERTY_DOCUMENT_QUALIFIER = "DocumentQualifier";
  private List<DocumentQualifier> documentQualifier;

  public TransactionStatusRequest() { 
  }

  /**
   * messageReference
   *
   * @param messageReference 
   * @return the current {@code TransactionStatusRequest} instance, allowing for method chaining
   */
  public TransactionStatusRequest messageReference(MessageReference messageReference) {
    this.messageReference = messageReference;
    return this;
  }

  /**
   * Get messageReference
   * @return messageReference 
   */
  @JsonProperty(JSON_PROPERTY_MESSAGE_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public MessageReference getMessageReference() {
    return messageReference;
  }

  /**
   * messageReference
   *
   * @param messageReference 
   */
  @JsonProperty(JSON_PROPERTY_MESSAGE_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessageReference(MessageReference messageReference) {
    this.messageReference = messageReference;
  }

  /**
   * Request to reprint the POI receipt(s). Allows reprinting a receipt with a &#x60;TransactionStatus&#x60; message
   *
   * @param receiptReprintFlag Request to reprint the POI receipt(s). Allows reprinting a receipt with a &#x60;TransactionStatus&#x60; message
   * @return the current {@code TransactionStatusRequest} instance, allowing for method chaining
   */
  public TransactionStatusRequest receiptReprintFlag(Boolean receiptReprintFlag) {
    this.receiptReprintFlag = receiptReprintFlag;
    return this;
  }

  /**
   * Request to reprint the POI receipt(s). Allows reprinting a receipt with a &#x60;TransactionStatus&#x60; message
   * @return receiptReprintFlag Request to reprint the POI receipt(s). Allows reprinting a receipt with a &#x60;TransactionStatus&#x60; message
   */
  @JsonProperty(JSON_PROPERTY_RECEIPT_REPRINT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getReceiptReprintFlag() {
    return receiptReprintFlag;
  }

  /**
   * Request to reprint the POI receipt(s). Allows reprinting a receipt with a &#x60;TransactionStatus&#x60; message
   *
   * @param receiptReprintFlag Request to reprint the POI receipt(s). Allows reprinting a receipt with a &#x60;TransactionStatus&#x60; message
   */
  @JsonProperty(JSON_PROPERTY_RECEIPT_REPRINT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReceiptReprintFlag(Boolean receiptReprintFlag) {
    this.receiptReprintFlag = receiptReprintFlag;
  }

  /**
   * Qualification of the document to print to the Cashier or the Customer. Allows the manager of the printer, Sale or POI Terminal, to send the information to a particular physical printer or to use the paper type accordingly. Possible values: * **CashierReceipt** * **CustomerReceipt** * **Document** * **Journal** * **SaleReceipt** * **Voucher**
   *
   * @param documentQualifier Qualification of the document to print to the Cashier or the Customer. Allows the manager of the printer, Sale or POI Terminal, to send the information to a particular physical printer or to use the paper type accordingly. Possible values: * **CashierReceipt** * **CustomerReceipt** * **Document** * **Journal** * **SaleReceipt** * **Voucher**
   * @return the current {@code TransactionStatusRequest} instance, allowing for method chaining
   */
  public TransactionStatusRequest documentQualifier(List<DocumentQualifier> documentQualifier) {
    this.documentQualifier = documentQualifier;
    return this;
  }

  public TransactionStatusRequest addDocumentQualifierItem(DocumentQualifier documentQualifierItem) {
    if (this.documentQualifier == null) {
      this.documentQualifier = new ArrayList<>();
    }
    this.documentQualifier.add(documentQualifierItem);
    return this;
  }

  /**
   * Qualification of the document to print to the Cashier or the Customer. Allows the manager of the printer, Sale or POI Terminal, to send the information to a particular physical printer or to use the paper type accordingly. Possible values: * **CashierReceipt** * **CustomerReceipt** * **Document** * **Journal** * **SaleReceipt** * **Voucher**
   * @return documentQualifier Qualification of the document to print to the Cashier or the Customer. Allows the manager of the printer, Sale or POI Terminal, to send the information to a particular physical printer or to use the paper type accordingly. Possible values: * **CashierReceipt** * **CustomerReceipt** * **Document** * **Journal** * **SaleReceipt** * **Voucher**
   */
  @JsonProperty(JSON_PROPERTY_DOCUMENT_QUALIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<DocumentQualifier> getDocumentQualifier() {
    return documentQualifier;
  }

  /**
   * Qualification of the document to print to the Cashier or the Customer. Allows the manager of the printer, Sale or POI Terminal, to send the information to a particular physical printer or to use the paper type accordingly. Possible values: * **CashierReceipt** * **CustomerReceipt** * **Document** * **Journal** * **SaleReceipt** * **Voucher**
   *
   * @param documentQualifier Qualification of the document to print to the Cashier or the Customer. Allows the manager of the printer, Sale or POI Terminal, to send the information to a particular physical printer or to use the paper type accordingly. Possible values: * **CashierReceipt** * **CustomerReceipt** * **Document** * **Journal** * **SaleReceipt** * **Voucher**
   */
  @JsonProperty(JSON_PROPERTY_DOCUMENT_QUALIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentQualifier(List<DocumentQualifier> documentQualifier) {
    this.documentQualifier = documentQualifier;
  }

  /**
   * Return true if this TransactionStatusRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionStatusRequest transactionStatusRequest = (TransactionStatusRequest) o;
    return Objects.equals(this.messageReference, transactionStatusRequest.messageReference) &&
        Objects.equals(this.receiptReprintFlag, transactionStatusRequest.receiptReprintFlag) &&
        Objects.equals(this.documentQualifier, transactionStatusRequest.documentQualifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageReference, receiptReprintFlag, documentQualifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionStatusRequest {\n");
    sb.append("    messageReference: ").append(toIndentedString(messageReference)).append("\n");
    sb.append("    receiptReprintFlag: ").append(toIndentedString(receiptReprintFlag)).append("\n");
    sb.append("    documentQualifier: ").append(toIndentedString(documentQualifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of TransactionStatusRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionStatusRequest
   * @throws JsonProcessingException if the JSON string is invalid with respect to TransactionStatusRequest
   */
  public static TransactionStatusRequest fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, TransactionStatusRequest.class);
  }
/**
  * Convert an instance of TransactionStatusRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
