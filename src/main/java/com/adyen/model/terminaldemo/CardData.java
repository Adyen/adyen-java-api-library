/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.PaymentToken;
import com.adyen.model.terminaldemo.SensitiveCardData;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Information related to the payment card used for the transaction. Allows acquisition of the card data by the Sale System before the Payment, CardAcquisition, or BalanceInquiry request to the POI. It can also be sent in the CardAcquisition response, to be processed by the Sale System.
 */
@JsonPropertyOrder({
  CardData.JSON_PROPERTY_PAYMENT_BRAND,
  CardData.JSON_PROPERTY_MASKED_PAN,
  CardData.JSON_PROPERTY_PAYMENT_ACCOUNT_REF,
  CardData.JSON_PROPERTY_ENTRY_MODE,
  CardData.JSON_PROPERTY_CARD_COUNTRY_CODE,
  CardData.JSON_PROPERTY_PROTECTED_CARD_DATA,
  CardData.JSON_PROPERTY_SENSITIVE_CARD_DATA,
  CardData.JSON_PROPERTY_PAYMENT_TOKEN
})

public class CardData {
  public static final String JSON_PROPERTY_PAYMENT_BRAND = "PaymentBrand";
  private String paymentBrand;

  public static final String JSON_PROPERTY_MASKED_PAN = "MaskedPan";
  private String maskedPan;

  public static final String JSON_PROPERTY_PAYMENT_ACCOUNT_REF = "PaymentAccountRef";
  private String paymentAccountRef;

  /**
   * Gets or Sets entryMode
   */
  public enum EntryModeEnum {

    CONTACTLESS(String.valueOf("Contactless")),

    FILE(String.valueOf("File")),

    ICC(String.valueOf("ICC")),

    KEYED(String.valueOf("Keyed")),

    MAGSTRIPE(String.valueOf("MagStripe")),

    MANUAL(String.valueOf("Manual")),

    MOBILE(String.valueOf("Mobile")),

    RFID(String.valueOf("RFID")),

    SCANNED(String.valueOf("Scanned")),

    SYNCHRONOUSICC(String.valueOf("SynchronousICC")),

    TAPPED(String.valueOf("Tapped"));

    private static final Logger LOG = Logger.getLogger(EntryModeEnum.class.getName());

    private String value;

    EntryModeEnum(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntryModeEnum fromValue(String value) {
      for (EntryModeEnum b : EntryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      // handling unexpected value
      LOG.warning("EntryModeEnum: unexpected enum value '" + value + "' - Supported values are "+ Arrays.toString(EntryModeEnum.values()));
      return null;
    }
  }

  public static final String JSON_PROPERTY_ENTRY_MODE = "EntryMode";
  private List<EntryModeEnum> entryMode;

  public static final String JSON_PROPERTY_CARD_COUNTRY_CODE = "CardCountryCode";
  private Integer cardCountryCode;

  public static final String JSON_PROPERTY_PROTECTED_CARD_DATA = "ProtectedCardData";
  private String protectedCardData;

  public static final String JSON_PROPERTY_SENSITIVE_CARD_DATA = "SensitiveCardData";
  private SensitiveCardData sensitiveCardData;

  public static final String JSON_PROPERTY_PAYMENT_TOKEN = "PaymentToken";
  private PaymentToken paymentToken;

  public CardData() { 
  }

  /**
   * Type of payment card. If card PAN is readable. Indicates the card used to pay in the PaymentResponse. Sent in the CardAcquisitionResponse, to leave the Cashier to choose between several applications in a smartcard, or several brand in a co-branded card. In this case, the CardAcquisitionRequest.ForceCustomerSelectionFlag must contain the value False. Brands are part of the POI and Sale Systems configurations.
   *
   * @param paymentBrand Type of payment card. If card PAN is readable. Indicates the card used to pay in the PaymentResponse. Sent in the CardAcquisitionResponse, to leave the Cashier to choose between several applications in a smartcard, or several brand in a co-branded card. In this case, the CardAcquisitionRequest.ForceCustomerSelectionFlag must contain the value False. Brands are part of the POI and Sale Systems configurations.
   * @return the current {@code CardData} instance, allowing for method chaining
   */
  public CardData paymentBrand(String paymentBrand) {
    this.paymentBrand = paymentBrand;
    return this;
  }

  /**
   * Type of payment card. If card PAN is readable. Indicates the card used to pay in the PaymentResponse. Sent in the CardAcquisitionResponse, to leave the Cashier to choose between several applications in a smartcard, or several brand in a co-branded card. In this case, the CardAcquisitionRequest.ForceCustomerSelectionFlag must contain the value False. Brands are part of the POI and Sale Systems configurations.
   * @return paymentBrand Type of payment card. If card PAN is readable. Indicates the card used to pay in the PaymentResponse. Sent in the CardAcquisitionResponse, to leave the Cashier to choose between several applications in a smartcard, or several brand in a co-branded card. In this case, the CardAcquisitionRequest.ForceCustomerSelectionFlag must contain the value False. Brands are part of the POI and Sale Systems configurations.
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPaymentBrand() {
    return paymentBrand;
  }

  /**
   * Type of payment card. If card PAN is readable. Indicates the card used to pay in the PaymentResponse. Sent in the CardAcquisitionResponse, to leave the Cashier to choose between several applications in a smartcard, or several brand in a co-branded card. In this case, the CardAcquisitionRequest.ForceCustomerSelectionFlag must contain the value False. Brands are part of the POI and Sale Systems configurations.
   *
   * @param paymentBrand Type of payment card. If card PAN is readable. Indicates the card used to pay in the PaymentResponse. Sent in the CardAcquisitionResponse, to leave the Cashier to choose between several applications in a smartcard, or several brand in a co-branded card. In this case, the CardAcquisitionRequest.ForceCustomerSelectionFlag must contain the value False. Brands are part of the POI and Sale Systems configurations.
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentBrand(String paymentBrand) {
    this.paymentBrand = paymentBrand;
  }

  /**
   * Masked Primary Account Number Part of the PAN is replaced by a string of * characters, to identify a customer account or relationship. Presence of this data element, which replace the PAN when SensitiveCardData is protected and replaced by ProtectedCardData. Alternatively the MaskedPAN can be used as a token to identify a customer.
   *
   * @param maskedPan Masked Primary Account Number Part of the PAN is replaced by a string of * characters, to identify a customer account or relationship. Presence of this data element, which replace the PAN when SensitiveCardData is protected and replaced by ProtectedCardData. Alternatively the MaskedPAN can be used as a token to identify a customer.
   * @return the current {@code CardData} instance, allowing for method chaining
   */
  public CardData maskedPan(String maskedPan) {
    this.maskedPan = maskedPan;
    return this;
  }

  /**
   * Masked Primary Account Number Part of the PAN is replaced by a string of * characters, to identify a customer account or relationship. Presence of this data element, which replace the PAN when SensitiveCardData is protected and replaced by ProtectedCardData. Alternatively the MaskedPAN can be used as a token to identify a customer.
   * @return maskedPan Masked Primary Account Number Part of the PAN is replaced by a string of * characters, to identify a customer account or relationship. Presence of this data element, which replace the PAN when SensitiveCardData is protected and replaced by ProtectedCardData. Alternatively the MaskedPAN can be used as a token to identify a customer.
   */
  @JsonProperty(JSON_PROPERTY_MASKED_PAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMaskedPan() {
    return maskedPan;
  }

  /**
   * Masked Primary Account Number Part of the PAN is replaced by a string of * characters, to identify a customer account or relationship. Presence of this data element, which replace the PAN when SensitiveCardData is protected and replaced by ProtectedCardData. Alternatively the MaskedPAN can be used as a token to identify a customer.
   *
   * @param maskedPan Masked Primary Account Number Part of the PAN is replaced by a string of * characters, to identify a customer account or relationship. Presence of this data element, which replace the PAN when SensitiveCardData is protected and replaced by ProtectedCardData. Alternatively the MaskedPAN can be used as a token to identify a customer.
   */
  @JsonProperty(JSON_PROPERTY_MASKED_PAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaskedPan(String maskedPan) {
    this.maskedPan = maskedPan;
  }

  /**
   * Reference of the PAN, which identifies the PAN or the card uniquely, named also PAR (Payment Account Reference). This reference may be defined by the card issuer or by a token service provider under the control of the card issuer, and cannot be used for a payment transaction.
   *
   * @param paymentAccountRef Reference of the PAN, which identifies the PAN or the card uniquely, named also PAR (Payment Account Reference). This reference may be defined by the card issuer or by a token service provider under the control of the card issuer, and cannot be used for a payment transaction.
   * @return the current {@code CardData} instance, allowing for method chaining
   */
  public CardData paymentAccountRef(String paymentAccountRef) {
    this.paymentAccountRef = paymentAccountRef;
    return this;
  }

  /**
   * Reference of the PAN, which identifies the PAN or the card uniquely, named also PAR (Payment Account Reference). This reference may be defined by the card issuer or by a token service provider under the control of the card issuer, and cannot be used for a payment transaction.
   * @return paymentAccountRef Reference of the PAN, which identifies the PAN or the card uniquely, named also PAR (Payment Account Reference). This reference may be defined by the card issuer or by a token service provider under the control of the card issuer, and cannot be used for a payment transaction.
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_ACCOUNT_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPaymentAccountRef() {
    return paymentAccountRef;
  }

  /**
   * Reference of the PAN, which identifies the PAN or the card uniquely, named also PAR (Payment Account Reference). This reference may be defined by the card issuer or by a token service provider under the control of the card issuer, and cannot be used for a payment transaction.
   *
   * @param paymentAccountRef Reference of the PAN, which identifies the PAN or the card uniquely, named also PAR (Payment Account Reference). This reference may be defined by the card issuer or by a token service provider under the control of the card issuer, and cannot be used for a payment transaction.
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_ACCOUNT_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentAccountRef(String paymentAccountRef) {
    this.paymentAccountRef = paymentAccountRef;
  }

  /**
   * entryMode
   *
   * @param entryMode 
   * @return the current {@code CardData} instance, allowing for method chaining
   */
  public CardData entryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
    return this;
  }

  public CardData addEntryModeItem(EntryModeEnum entryModeItem) {
    if (this.entryMode == null) {
      this.entryMode = new ArrayList<>();
    }
    this.entryMode.add(entryModeItem);
    return this;
  }

  /**
   * Get entryMode
   * @return entryMode 
   */
  @JsonProperty(JSON_PROPERTY_ENTRY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<EntryModeEnum> getEntryMode() {
    return entryMode;
  }

  /**
   * entryMode
   *
   * @param entryMode 
   */
  @JsonProperty(JSON_PROPERTY_ENTRY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
  }

  /**
   * Country Code attached to the card (3 numerics). If available in the card.
   *
   * @param cardCountryCode Country Code attached to the card (3 numerics). If available in the card.
   * @return the current {@code CardData} instance, allowing for method chaining
   */
  public CardData cardCountryCode(Integer cardCountryCode) {
    this.cardCountryCode = cardCountryCode;
    return this;
  }

  /**
   * Country Code attached to the card (3 numerics). If available in the card.
   * minimum: 3
   * maximum: 3
   * @return cardCountryCode Country Code attached to the card (3 numerics). If available in the card.
   */
  @JsonProperty(JSON_PROPERTY_CARD_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getCardCountryCode() {
    return cardCountryCode;
  }

  /**
   * Country Code attached to the card (3 numerics). If available in the card.
   *
   * @param cardCountryCode Country Code attached to the card (3 numerics). If available in the card.
   */
  @JsonProperty(JSON_PROPERTY_CARD_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardCountryCode(Integer cardCountryCode) {
    this.cardCountryCode = cardCountryCode;
  }

  /**
   * Sensitive information related to the payment card, protected by CMS. SensitiveCardData protected by CMS EnvelopedData.
   *
   * @param protectedCardData Sensitive information related to the payment card, protected by CMS. SensitiveCardData protected by CMS EnvelopedData.
   * @return the current {@code CardData} instance, allowing for method chaining
   */
  public CardData protectedCardData(String protectedCardData) {
    this.protectedCardData = protectedCardData;
    return this;
  }

  /**
   * Sensitive information related to the payment card, protected by CMS. SensitiveCardData protected by CMS EnvelopedData.
   * @return protectedCardData Sensitive information related to the payment card, protected by CMS. SensitiveCardData protected by CMS EnvelopedData.
   */
  @JsonProperty(JSON_PROPERTY_PROTECTED_CARD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getProtectedCardData() {
    return protectedCardData;
  }

  /**
   * Sensitive information related to the payment card, protected by CMS. SensitiveCardData protected by CMS EnvelopedData.
   *
   * @param protectedCardData Sensitive information related to the payment card, protected by CMS. SensitiveCardData protected by CMS EnvelopedData.
   */
  @JsonProperty(JSON_PROPERTY_PROTECTED_CARD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtectedCardData(String protectedCardData) {
    this.protectedCardData = protectedCardData;
  }

  /**
   * sensitiveCardData
   *
   * @param sensitiveCardData 
   * @return the current {@code CardData} instance, allowing for method chaining
   */
  public CardData sensitiveCardData(SensitiveCardData sensitiveCardData) {
    this.sensitiveCardData = sensitiveCardData;
    return this;
  }

  /**
   * Get sensitiveCardData
   * @return sensitiveCardData 
   */
  @JsonProperty(JSON_PROPERTY_SENSITIVE_CARD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SensitiveCardData getSensitiveCardData() {
    return sensitiveCardData;
  }

  /**
   * sensitiveCardData
   *
   * @param sensitiveCardData 
   */
  @JsonProperty(JSON_PROPERTY_SENSITIVE_CARD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSensitiveCardData(SensitiveCardData sensitiveCardData) {
    this.sensitiveCardData = sensitiveCardData;
  }

  /**
   * paymentToken
   *
   * @param paymentToken 
   * @return the current {@code CardData} instance, allowing for method chaining
   */
  public CardData paymentToken(PaymentToken paymentToken) {
    this.paymentToken = paymentToken;
    return this;
  }

  /**
   * Get paymentToken
   * @return paymentToken 
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PaymentToken getPaymentToken() {
    return paymentToken;
  }

  /**
   * paymentToken
   *
   * @param paymentToken 
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentToken(PaymentToken paymentToken) {
    this.paymentToken = paymentToken;
  }

  /**
   * Return true if this CardData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardData cardData = (CardData) o;
    return Objects.equals(this.paymentBrand, cardData.paymentBrand) &&
        Objects.equals(this.maskedPan, cardData.maskedPan) &&
        Objects.equals(this.paymentAccountRef, cardData.paymentAccountRef) &&
        Objects.equals(this.entryMode, cardData.entryMode) &&
        Objects.equals(this.cardCountryCode, cardData.cardCountryCode) &&
        Objects.equals(this.protectedCardData, cardData.protectedCardData) &&
        Objects.equals(this.sensitiveCardData, cardData.sensitiveCardData) &&
        Objects.equals(this.paymentToken, cardData.paymentToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentBrand, maskedPan, paymentAccountRef, entryMode, cardCountryCode, protectedCardData, sensitiveCardData, paymentToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardData {\n");
    sb.append("    paymentBrand: ").append(toIndentedString(paymentBrand)).append("\n");
    sb.append("    maskedPan: ").append(toIndentedString(maskedPan)).append("\n");
    sb.append("    paymentAccountRef: ").append(toIndentedString(paymentAccountRef)).append("\n");
    sb.append("    entryMode: ").append(toIndentedString(entryMode)).append("\n");
    sb.append("    cardCountryCode: ").append(toIndentedString(cardCountryCode)).append("\n");
    sb.append("    protectedCardData: ").append(toIndentedString(protectedCardData)).append("\n");
    sb.append("    sensitiveCardData: ").append(toIndentedString(sensitiveCardData)).append("\n");
    sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of CardData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardData
   * @throws JsonProcessingException if the JSON string is invalid with respect to CardData
   */
  public static CardData fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, CardData.class);
  }
/**
  * Convert an instance of CardData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
