/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.OriginalPOITransaction;
import com.adyen.model.terminaldemo.StoredValueAccountID;
import com.adyen.model.terminaldemo.StoredValueTransactionType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * It contains: - the identification of the stored value accounts or the stored value cards, if provided by the Sale System, and - the associated products sold by the Sale System. Data related to the stored value card.
 */
@JsonPropertyOrder({
  StoredValueData.JSON_PROPERTY_STORED_VALUE_PROVIDER,
  StoredValueData.JSON_PROPERTY_STORED_VALUE_TRANSACTION_TYPE,
  StoredValueData.JSON_PROPERTY_STORED_VALUE_ACCOUNT_I_D,
  StoredValueData.JSON_PROPERTY_ORIGINAL_P_O_I_TRANSACTION,
  StoredValueData.JSON_PROPERTY_PRODUCT_CODE,
  StoredValueData.JSON_PROPERTY_EAN_UPC,
  StoredValueData.JSON_PROPERTY_ITEM_AMOUNT,
  StoredValueData.JSON_PROPERTY_CURRENCY
})

public class StoredValueData {
  public static final String JSON_PROPERTY_STORED_VALUE_PROVIDER = "StoredValueProvider";
  private String storedValueProvider;

  public static final String JSON_PROPERTY_STORED_VALUE_TRANSACTION_TYPE = "StoredValueTransactionType";
  private StoredValueTransactionType storedValueTransactionType;

  public static final String JSON_PROPERTY_STORED_VALUE_ACCOUNT_I_D = "StoredValueAccountID";
  private StoredValueAccountID storedValueAccountID;

  public static final String JSON_PROPERTY_ORIGINAL_P_O_I_TRANSACTION = "OriginalPOITransaction";
  private OriginalPOITransaction originalPOITransaction;

  public static final String JSON_PROPERTY_PRODUCT_CODE = "ProductCode";
  private Integer productCode;

  public static final String JSON_PROPERTY_EAN_UPC = "EanUpc";
  private Integer eanUpc;

  public static final String JSON_PROPERTY_ITEM_AMOUNT = "ItemAmount";
  private BigDecimal itemAmount;

  public static final String JSON_PROPERTY_CURRENCY = "Currency";
  private String currency;

  public StoredValueData() { 
  }

  /**
   * Identification of the provider of the stored value account load/reload. If more than one provider to manage on the POI, and StoredValueAccountID absent.
   *
   * @param storedValueProvider Identification of the provider of the stored value account load/reload. If more than one provider to manage on the POI, and StoredValueAccountID absent.
   * @return the current {@code StoredValueData} instance, allowing for method chaining
   */
  public StoredValueData storedValueProvider(String storedValueProvider) {
    this.storedValueProvider = storedValueProvider;
    return this;
  }

  /**
   * Identification of the provider of the stored value account load/reload. If more than one provider to manage on the POI, and StoredValueAccountID absent.
   * @return storedValueProvider Identification of the provider of the stored value account load/reload. If more than one provider to manage on the POI, and StoredValueAccountID absent.
   */
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStoredValueProvider() {
    return storedValueProvider;
  }

  /**
   * Identification of the provider of the stored value account load/reload. If more than one provider to manage on the POI, and StoredValueAccountID absent.
   *
   * @param storedValueProvider Identification of the provider of the stored value account load/reload. If more than one provider to manage on the POI, and StoredValueAccountID absent.
   */
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoredValueProvider(String storedValueProvider) {
    this.storedValueProvider = storedValueProvider;
  }

  /**
   * storedValueTransactionType
   *
   * @param storedValueTransactionType 
   * @return the current {@code StoredValueData} instance, allowing for method chaining
   */
  public StoredValueData storedValueTransactionType(StoredValueTransactionType storedValueTransactionType) {
    this.storedValueTransactionType = storedValueTransactionType;
    return this;
  }

  /**
   * Get storedValueTransactionType
   * @return storedValueTransactionType 
   */
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public StoredValueTransactionType getStoredValueTransactionType() {
    return storedValueTransactionType;
  }

  /**
   * storedValueTransactionType
   *
   * @param storedValueTransactionType 
   */
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoredValueTransactionType(StoredValueTransactionType storedValueTransactionType) {
    this.storedValueTransactionType = storedValueTransactionType;
  }

  /**
   * storedValueAccountID
   *
   * @param storedValueAccountID 
   * @return the current {@code StoredValueData} instance, allowing for method chaining
   */
  public StoredValueData storedValueAccountID(StoredValueAccountID storedValueAccountID) {
    this.storedValueAccountID = storedValueAccountID;
    return this;
  }

  /**
   * Get storedValueAccountID
   * @return storedValueAccountID 
   */
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_ACCOUNT_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public StoredValueAccountID getStoredValueAccountID() {
    return storedValueAccountID;
  }

  /**
   * storedValueAccountID
   *
   * @param storedValueAccountID 
   */
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_ACCOUNT_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoredValueAccountID(StoredValueAccountID storedValueAccountID) {
    this.storedValueAccountID = storedValueAccountID;
  }

  /**
   * originalPOITransaction
   *
   * @param originalPOITransaction 
   * @return the current {@code StoredValueData} instance, allowing for method chaining
   */
  public StoredValueData originalPOITransaction(OriginalPOITransaction originalPOITransaction) {
    this.originalPOITransaction = originalPOITransaction;
    return this;
  }

  /**
   * Get originalPOITransaction
   * @return originalPOITransaction 
   */
  @JsonProperty(JSON_PROPERTY_ORIGINAL_P_O_I_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OriginalPOITransaction getOriginalPOITransaction() {
    return originalPOITransaction;
  }

  /**
   * originalPOITransaction
   *
   * @param originalPOITransaction 
   */
  @JsonProperty(JSON_PROPERTY_ORIGINAL_P_O_I_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginalPOITransaction(OriginalPOITransaction originalPOITransaction) {
    this.originalPOITransaction = originalPOITransaction;
  }

  /**
   * Product code of item purchased with the transaction.
   *
   * @param productCode Product code of item purchased with the transaction.
   * @return the current {@code StoredValueData} instance, allowing for method chaining
   */
  public StoredValueData productCode(Integer productCode) {
    this.productCode = productCode;
    return this;
  }

  /**
   * Product code of item purchased with the transaction.
   * minimum: 1
   * maximum: 20
   * @return productCode Product code of item purchased with the transaction.
   */
  @JsonProperty(JSON_PROPERTY_PRODUCT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getProductCode() {
    return productCode;
  }

  /**
   * Product code of item purchased with the transaction.
   *
   * @param productCode Product code of item purchased with the transaction.
   */
  @JsonProperty(JSON_PROPERTY_PRODUCT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductCode(Integer productCode) {
    this.productCode = productCode;
  }

  /**
   * Standard product code of item purchased with the transaction.
   *
   * @param eanUpc Standard product code of item purchased with the transaction.
   * @return the current {@code StoredValueData} instance, allowing for method chaining
   */
  public StoredValueData eanUpc(Integer eanUpc) {
    this.eanUpc = eanUpc;
    return this;
  }

  /**
   * Standard product code of item purchased with the transaction.
   * @return eanUpc Standard product code of item purchased with the transaction.
   */
  @JsonProperty(JSON_PROPERTY_EAN_UPC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getEanUpc() {
    return eanUpc;
  }

  /**
   * Standard product code of item purchased with the transaction.
   *
   * @param eanUpc Standard product code of item purchased with the transaction.
   */
  @JsonProperty(JSON_PROPERTY_EAN_UPC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEanUpc(Integer eanUpc) {
    this.eanUpc = eanUpc;
  }

  /**
   * Total amount of the item line.
   *
   * @param itemAmount Total amount of the item line.
   * @return the current {@code StoredValueData} instance, allowing for method chaining
   */
  public StoredValueData itemAmount(BigDecimal itemAmount) {
    this.itemAmount = itemAmount;
    return this;
  }

  /**
   * Total amount of the item line.
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return itemAmount Total amount of the item line.
   */
  @JsonProperty(JSON_PROPERTY_ITEM_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BigDecimal getItemAmount() {
    return itemAmount;
  }

  /**
   * Total amount of the item line.
   *
   * @param itemAmount Total amount of the item line.
   */
  @JsonProperty(JSON_PROPERTY_ITEM_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemAmount(BigDecimal itemAmount) {
    this.itemAmount = itemAmount;
  }

  /**
   * Currency of a monetary amount.
   *
   * @param currency Currency of a monetary amount.
   * @return the current {@code StoredValueData} instance, allowing for method chaining
   */
  public StoredValueData currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of a monetary amount.
   * @return currency Currency of a monetary amount.
   */
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCurrency() {
    return currency;
  }

  /**
   * Currency of a monetary amount.
   *
   * @param currency Currency of a monetary amount.
   */
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }

  /**
   * Return true if this StoredValueData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoredValueData storedValueData = (StoredValueData) o;
    return Objects.equals(this.storedValueProvider, storedValueData.storedValueProvider) &&
        Objects.equals(this.storedValueTransactionType, storedValueData.storedValueTransactionType) &&
        Objects.equals(this.storedValueAccountID, storedValueData.storedValueAccountID) &&
        Objects.equals(this.originalPOITransaction, storedValueData.originalPOITransaction) &&
        Objects.equals(this.productCode, storedValueData.productCode) &&
        Objects.equals(this.eanUpc, storedValueData.eanUpc) &&
        Objects.equals(this.itemAmount, storedValueData.itemAmount) &&
        Objects.equals(this.currency, storedValueData.currency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storedValueProvider, storedValueTransactionType, storedValueAccountID, originalPOITransaction, productCode, eanUpc, itemAmount, currency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoredValueData {\n");
    sb.append("    storedValueProvider: ").append(toIndentedString(storedValueProvider)).append("\n");
    sb.append("    storedValueTransactionType: ").append(toIndentedString(storedValueTransactionType)).append("\n");
    sb.append("    storedValueAccountID: ").append(toIndentedString(storedValueAccountID)).append("\n");
    sb.append("    originalPOITransaction: ").append(toIndentedString(originalPOITransaction)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    eanUpc: ").append(toIndentedString(eanUpc)).append("\n");
    sb.append("    itemAmount: ").append(toIndentedString(itemAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of StoredValueData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoredValueData
   * @throws JsonProcessingException if the JSON string is invalid with respect to StoredValueData
   */
  public static StoredValueData fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, StoredValueData.class);
  }
/**
  * Convert an instance of StoredValueData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
