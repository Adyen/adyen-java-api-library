/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.AccountType;
import com.adyen.model.terminaldemo.PaymentInstrumentData;
import com.adyen.model.terminaldemo.TransactionIDType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * PaymentAccountReq
 */
@JsonPropertyOrder({
  PaymentAccountReq.JSON_PROPERTY_ACCOUNT_TYPE,
  PaymentAccountReq.JSON_PROPERTY_CARD_ACQUISITION_REFERENCE,
  PaymentAccountReq.JSON_PROPERTY_PAYMENT_INSTRUMENT_DATA
})

public class PaymentAccountReq {
  public static final String JSON_PROPERTY_ACCOUNT_TYPE = "AccountType";
  private AccountType accountType;

  public static final String JSON_PROPERTY_CARD_ACQUISITION_REFERENCE = "CardAcquisitionReference";
  private TransactionIDType cardAcquisitionReference;

  public static final String JSON_PROPERTY_PAYMENT_INSTRUMENT_DATA = "PaymentInstrumentData";
  private PaymentInstrumentData paymentInstrumentData;

  public PaymentAccountReq() { 
  }

  /**
   * accountType
   *
   * @param accountType 
   * @return the current {@code PaymentAccountReq} instance, allowing for method chaining
   */
  public PaymentAccountReq accountType(AccountType accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Get accountType
   * @return accountType 
   */
  @JsonProperty(JSON_PROPERTY_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public AccountType getAccountType() {
    return accountType;
  }

  /**
   * accountType
   *
   * @param accountType 
   */
  @JsonProperty(JSON_PROPERTY_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountType(AccountType accountType) {
    this.accountType = accountType;
  }

  /**
   * cardAcquisitionReference
   *
   * @param cardAcquisitionReference 
   * @return the current {@code PaymentAccountReq} instance, allowing for method chaining
   */
  public PaymentAccountReq cardAcquisitionReference(TransactionIDType cardAcquisitionReference) {
    this.cardAcquisitionReference = cardAcquisitionReference;
    return this;
  }

  /**
   * Get cardAcquisitionReference
   * @return cardAcquisitionReference 
   */
  @JsonProperty(JSON_PROPERTY_CARD_ACQUISITION_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TransactionIDType getCardAcquisitionReference() {
    return cardAcquisitionReference;
  }

  /**
   * cardAcquisitionReference
   *
   * @param cardAcquisitionReference 
   */
  @JsonProperty(JSON_PROPERTY_CARD_ACQUISITION_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardAcquisitionReference(TransactionIDType cardAcquisitionReference) {
    this.cardAcquisitionReference = cardAcquisitionReference;
  }

  /**
   * paymentInstrumentData
   *
   * @param paymentInstrumentData 
   * @return the current {@code PaymentAccountReq} instance, allowing for method chaining
   */
  public PaymentAccountReq paymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
    return this;
  }

  /**
   * Get paymentInstrumentData
   * @return paymentInstrumentData 
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_INSTRUMENT_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PaymentInstrumentData getPaymentInstrumentData() {
    return paymentInstrumentData;
  }

  /**
   * paymentInstrumentData
   *
   * @param paymentInstrumentData 
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_INSTRUMENT_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
  }

  /**
   * Return true if this PaymentAccountReq object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAccountReq paymentAccountReq = (PaymentAccountReq) o;
    return Objects.equals(this.accountType, paymentAccountReq.accountType) &&
        Objects.equals(this.cardAcquisitionReference, paymentAccountReq.cardAcquisitionReference) &&
        Objects.equals(this.paymentInstrumentData, paymentAccountReq.paymentInstrumentData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, cardAcquisitionReference, paymentInstrumentData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAccountReq {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    cardAcquisitionReference: ").append(toIndentedString(cardAcquisitionReference)).append("\n");
    sb.append("    paymentInstrumentData: ").append(toIndentedString(paymentInstrumentData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of PaymentAccountReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentAccountReq
   * @throws JsonProcessingException if the JSON string is invalid with respect to PaymentAccountReq
   */
  public static PaymentAccountReq fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, PaymentAccountReq.class);
  }
/**
  * Convert an instance of PaymentAccountReq to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
