/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.TransactionIDType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * LoyaltyAcquirerData
 */
@JsonPropertyOrder({
  LoyaltyAcquirerData.JSON_PROPERTY_LOYALTY_ACQUIRER_I_D,
  LoyaltyAcquirerData.JSON_PROPERTY_APPROVAL_CODE,
  LoyaltyAcquirerData.JSON_PROPERTY_LOYALTY_TRANSACTION_I_D,
  LoyaltyAcquirerData.JSON_PROPERTY_HOST_RECONCILIATION_I_D
})

public class LoyaltyAcquirerData {
  public static final String JSON_PROPERTY_LOYALTY_ACQUIRER_I_D = "LoyaltyAcquirerID";
  private String loyaltyAcquirerID;

  public static final String JSON_PROPERTY_APPROVAL_CODE = "ApprovalCode";
  private String approvalCode;

  public static final String JSON_PROPERTY_LOYALTY_TRANSACTION_I_D = "LoyaltyTransactionID";
  private TransactionIDType loyaltyTransactionID;

  public static final String JSON_PROPERTY_HOST_RECONCILIATION_I_D = "HostReconciliationID";
  private String hostReconciliationID;

  public LoyaltyAcquirerData() { 
  }

  /**
   * Identification of the loyalty Acquirer.
   *
   * @param loyaltyAcquirerID Identification of the loyalty Acquirer.
   * @return the current {@code LoyaltyAcquirerData} instance, allowing for method chaining
   */
  public LoyaltyAcquirerData loyaltyAcquirerID(String loyaltyAcquirerID) {
    this.loyaltyAcquirerID = loyaltyAcquirerID;
    return this;
  }

  /**
   * Identification of the loyalty Acquirer.
   * @return loyaltyAcquirerID Identification of the loyalty Acquirer.
   */
  @JsonProperty(JSON_PROPERTY_LOYALTY_ACQUIRER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLoyaltyAcquirerID() {
    return loyaltyAcquirerID;
  }

  /**
   * Identification of the loyalty Acquirer.
   *
   * @param loyaltyAcquirerID Identification of the loyalty Acquirer.
   */
  @JsonProperty(JSON_PROPERTY_LOYALTY_ACQUIRER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoyaltyAcquirerID(String loyaltyAcquirerID) {
    this.loyaltyAcquirerID = loyaltyAcquirerID;
  }

  /**
   * Code assigned to a transaction approval by the Acquirer. Could be an identifier of the approved transaction for the Acquirer. This data element is conditional for the Loyalty Acquirers. Used in the PaymentRequest request for a referral.
   *
   * @param approvalCode Code assigned to a transaction approval by the Acquirer. Could be an identifier of the approved transaction for the Acquirer. This data element is conditional for the Loyalty Acquirers. Used in the PaymentRequest request for a referral.
   * @return the current {@code LoyaltyAcquirerData} instance, allowing for method chaining
   */
  public LoyaltyAcquirerData approvalCode(String approvalCode) {
    this.approvalCode = approvalCode;
    return this;
  }

  /**
   * Code assigned to a transaction approval by the Acquirer. Could be an identifier of the approved transaction for the Acquirer. This data element is conditional for the Loyalty Acquirers. Used in the PaymentRequest request for a referral.
   * @return approvalCode Code assigned to a transaction approval by the Acquirer. Could be an identifier of the approved transaction for the Acquirer. This data element is conditional for the Loyalty Acquirers. Used in the PaymentRequest request for a referral.
   */
  @JsonProperty(JSON_PROPERTY_APPROVAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getApprovalCode() {
    return approvalCode;
  }

  /**
   * Code assigned to a transaction approval by the Acquirer. Could be an identifier of the approved transaction for the Acquirer. This data element is conditional for the Loyalty Acquirers. Used in the PaymentRequest request for a referral.
   *
   * @param approvalCode Code assigned to a transaction approval by the Acquirer. Could be an identifier of the approved transaction for the Acquirer. This data element is conditional for the Loyalty Acquirers. Used in the PaymentRequest request for a referral.
   */
  @JsonProperty(JSON_PROPERTY_APPROVAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApprovalCode(String approvalCode) {
    this.approvalCode = approvalCode;
  }

  /**
   * loyaltyTransactionID
   *
   * @param loyaltyTransactionID 
   * @return the current {@code LoyaltyAcquirerData} instance, allowing for method chaining
   */
  public LoyaltyAcquirerData loyaltyTransactionID(TransactionIDType loyaltyTransactionID) {
    this.loyaltyTransactionID = loyaltyTransactionID;
    return this;
  }

  /**
   * Get loyaltyTransactionID
   * @return loyaltyTransactionID 
   */
  @JsonProperty(JSON_PROPERTY_LOYALTY_TRANSACTION_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TransactionIDType getLoyaltyTransactionID() {
    return loyaltyTransactionID;
  }

  /**
   * loyaltyTransactionID
   *
   * @param loyaltyTransactionID 
   */
  @JsonProperty(JSON_PROPERTY_LOYALTY_TRANSACTION_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoyaltyTransactionID(TransactionIDType loyaltyTransactionID) {
    this.loyaltyTransactionID = loyaltyTransactionID;
  }

  /**
   * Identifier of a reconciliation period with a payment or loyalty host. Allows the assignment of a transaction to the Acquirer reconciliation (or batch).
   *
   * @param hostReconciliationID Identifier of a reconciliation period with a payment or loyalty host. Allows the assignment of a transaction to the Acquirer reconciliation (or batch).
   * @return the current {@code LoyaltyAcquirerData} instance, allowing for method chaining
   */
  public LoyaltyAcquirerData hostReconciliationID(String hostReconciliationID) {
    this.hostReconciliationID = hostReconciliationID;
    return this;
  }

  /**
   * Identifier of a reconciliation period with a payment or loyalty host. Allows the assignment of a transaction to the Acquirer reconciliation (or batch).
   * @return hostReconciliationID Identifier of a reconciliation period with a payment or loyalty host. Allows the assignment of a transaction to the Acquirer reconciliation (or batch).
   */
  @JsonProperty(JSON_PROPERTY_HOST_RECONCILIATION_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHostReconciliationID() {
    return hostReconciliationID;
  }

  /**
   * Identifier of a reconciliation period with a payment or loyalty host. Allows the assignment of a transaction to the Acquirer reconciliation (or batch).
   *
   * @param hostReconciliationID Identifier of a reconciliation period with a payment or loyalty host. Allows the assignment of a transaction to the Acquirer reconciliation (or batch).
   */
  @JsonProperty(JSON_PROPERTY_HOST_RECONCILIATION_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostReconciliationID(String hostReconciliationID) {
    this.hostReconciliationID = hostReconciliationID;
  }

  /**
   * Return true if this LoyaltyAcquirerData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyAcquirerData loyaltyAcquirerData = (LoyaltyAcquirerData) o;
    return Objects.equals(this.loyaltyAcquirerID, loyaltyAcquirerData.loyaltyAcquirerID) &&
        Objects.equals(this.approvalCode, loyaltyAcquirerData.approvalCode) &&
        Objects.equals(this.loyaltyTransactionID, loyaltyAcquirerData.loyaltyTransactionID) &&
        Objects.equals(this.hostReconciliationID, loyaltyAcquirerData.hostReconciliationID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loyaltyAcquirerID, approvalCode, loyaltyTransactionID, hostReconciliationID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyAcquirerData {\n");
    sb.append("    loyaltyAcquirerID: ").append(toIndentedString(loyaltyAcquirerID)).append("\n");
    sb.append("    approvalCode: ").append(toIndentedString(approvalCode)).append("\n");
    sb.append("    loyaltyTransactionID: ").append(toIndentedString(loyaltyTransactionID)).append("\n");
    sb.append("    hostReconciliationID: ").append(toIndentedString(hostReconciliationID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of LoyaltyAcquirerData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyAcquirerData
   * @throws JsonProcessingException if the JSON string is invalid with respect to LoyaltyAcquirerData
   */
  public static LoyaltyAcquirerData fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, LoyaltyAcquirerData.class);
  }
/**
  * Convert an instance of LoyaltyAcquirerData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
