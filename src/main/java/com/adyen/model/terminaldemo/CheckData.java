/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.TrackData;
import com.adyen.model.terminaldemo.TypeCode;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Information related to the paper check used for the transaction. Allows the check information to be provided by the Sale System before requesting the payment, or stored by the Sale System after processing of the payment.
 */
@JsonPropertyOrder({
  CheckData.JSON_PROPERTY_BANK_I_D,
  CheckData.JSON_PROPERTY_ACCOUNT_NUMBER,
  CheckData.JSON_PROPERTY_CHECK_NUMBER,
  CheckData.JSON_PROPERTY_TRACK_DATA,
  CheckData.JSON_PROPERTY_CHECK_CARD_NUMBER,
  CheckData.JSON_PROPERTY_TYPE_CODE,
  CheckData.JSON_PROPERTY_COUNTRY
})

public class CheckData {
  public static final String JSON_PROPERTY_BANK_I_D = "BankID";
  private String bankID;

  public static final String JSON_PROPERTY_ACCOUNT_NUMBER = "AccountNumber";
  private String accountNumber;

  public static final String JSON_PROPERTY_CHECK_NUMBER = "CheckNumber";
  private String checkNumber;

  public static final String JSON_PROPERTY_TRACK_DATA = "TrackData";
  private TrackData trackData;

  public static final String JSON_PROPERTY_CHECK_CARD_NUMBER = "CheckCardNumber";
  private String checkCardNumber;

  public static final String JSON_PROPERTY_TYPE_CODE = "TypeCode";
  private TypeCode typeCode;

  public static final String JSON_PROPERTY_COUNTRY = "Country";
  private String country;

  public CheckData() { 
  }

  /**
   * Identification of the bank. Mandatory if TrackData absent.
   *
   * @param bankID Identification of the bank. Mandatory if TrackData absent.
   * @return the current {@code CheckData} instance, allowing for method chaining
   */
  public CheckData bankID(String bankID) {
    this.bankID = bankID;
    return this;
  }

  /**
   * Identification of the bank. Mandatory if TrackData absent.
   * @return bankID Identification of the bank. Mandatory if TrackData absent.
   */
  @JsonProperty(JSON_PROPERTY_BANK_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getBankID() {
    return bankID;
  }

  /**
   * Identification of the bank. Mandatory if TrackData absent.
   *
   * @param bankID Identification of the bank. Mandatory if TrackData absent.
   */
  @JsonProperty(JSON_PROPERTY_BANK_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBankID(String bankID) {
    this.bankID = bankID;
  }

  /**
   * Identification of the customer account. Mandatory if TrackData absent.
   *
   * @param accountNumber Identification of the customer account. Mandatory if TrackData absent.
   * @return the current {@code CheckData} instance, allowing for method chaining
   */
  public CheckData accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Identification of the customer account. Mandatory if TrackData absent.
   * @return accountNumber Identification of the customer account. Mandatory if TrackData absent.
   */
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAccountNumber() {
    return accountNumber;
  }

  /**
   * Identification of the customer account. Mandatory if TrackData absent.
   *
   * @param accountNumber Identification of the customer account. Mandatory if TrackData absent.
   */
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  /**
   * Identification of the bank check. Mandatory if TrackData absent.
   *
   * @param checkNumber Identification of the bank check. Mandatory if TrackData absent.
   * @return the current {@code CheckData} instance, allowing for method chaining
   */
  public CheckData checkNumber(String checkNumber) {
    this.checkNumber = checkNumber;
    return this;
  }

  /**
   * Identification of the bank check. Mandatory if TrackData absent.
   * @return checkNumber Identification of the bank check. Mandatory if TrackData absent.
   */
  @JsonProperty(JSON_PROPERTY_CHECK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCheckNumber() {
    return checkNumber;
  }

  /**
   * Identification of the bank check. Mandatory if TrackData absent.
   *
   * @param checkNumber Identification of the bank check. Mandatory if TrackData absent.
   */
  @JsonProperty(JSON_PROPERTY_CHECK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCheckNumber(String checkNumber) {
    this.checkNumber = checkNumber;
  }

  /**
   * trackData
   *
   * @param trackData 
   * @return the current {@code CheckData} instance, allowing for method chaining
   */
  public CheckData trackData(TrackData trackData) {
    this.trackData = trackData;
    return this;
  }

  /**
   * Get trackData
   * @return trackData 
   */
  @JsonProperty(JSON_PROPERTY_TRACK_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TrackData getTrackData() {
    return trackData;
  }

  /**
   * trackData
   *
   * @param trackData 
   */
  @JsonProperty(JSON_PROPERTY_TRACK_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrackData(TrackData trackData) {
    this.trackData = trackData;
  }

  /**
   * Check guarantee card number. If provided by the customer.
   *
   * @param checkCardNumber Check guarantee card number. If provided by the customer.
   * @return the current {@code CheckData} instance, allowing for method chaining
   */
  public CheckData checkCardNumber(String checkCardNumber) {
    this.checkCardNumber = checkCardNumber;
    return this;
  }

  /**
   * Check guarantee card number. If provided by the customer.
   * @return checkCardNumber Check guarantee card number. If provided by the customer.
   */
  @JsonProperty(JSON_PROPERTY_CHECK_CARD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCheckCardNumber() {
    return checkCardNumber;
  }

  /**
   * Check guarantee card number. If provided by the customer.
   *
   * @param checkCardNumber Check guarantee card number. If provided by the customer.
   */
  @JsonProperty(JSON_PROPERTY_CHECK_CARD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCheckCardNumber(String checkCardNumber) {
    this.checkCardNumber = checkCardNumber;
  }

  /**
   * typeCode
   *
   * @param typeCode 
   * @return the current {@code CheckData} instance, allowing for method chaining
   */
  public CheckData typeCode(TypeCode typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * Get typeCode
   * @return typeCode 
   */
  @JsonProperty(JSON_PROPERTY_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TypeCode getTypeCode() {
    return typeCode;
  }

  /**
   * typeCode
   *
   * @param typeCode 
   */
  @JsonProperty(JSON_PROPERTY_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeCode(TypeCode typeCode) {
    this.typeCode = typeCode;
  }

  /**
   * Country of the bank check. Absent if country of the Sale system.
   *
   * @param country Country of the bank check. Absent if country of the Sale system.
   * @return the current {@code CheckData} instance, allowing for method chaining
   */
  public CheckData country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country of the bank check. Absent if country of the Sale system.
   * @return country Country of the bank check. Absent if country of the Sale system.
   */
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCountry() {
    return country;
  }

  /**
   * Country of the bank check. Absent if country of the Sale system.
   *
   * @param country Country of the bank check. Absent if country of the Sale system.
   */
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountry(String country) {
    this.country = country;
  }

  /**
   * Return true if this CheckData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckData checkData = (CheckData) o;
    return Objects.equals(this.bankID, checkData.bankID) &&
        Objects.equals(this.accountNumber, checkData.accountNumber) &&
        Objects.equals(this.checkNumber, checkData.checkNumber) &&
        Objects.equals(this.trackData, checkData.trackData) &&
        Objects.equals(this.checkCardNumber, checkData.checkCardNumber) &&
        Objects.equals(this.typeCode, checkData.typeCode) &&
        Objects.equals(this.country, checkData.country);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankID, accountNumber, checkNumber, trackData, checkCardNumber, typeCode, country);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckData {\n");
    sb.append("    bankID: ").append(toIndentedString(bankID)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    checkNumber: ").append(toIndentedString(checkNumber)).append("\n");
    sb.append("    trackData: ").append(toIndentedString(trackData)).append("\n");
    sb.append("    checkCardNumber: ").append(toIndentedString(checkCardNumber)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of CheckData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckData
   * @throws JsonProcessingException if the JSON string is invalid with respect to CheckData
   */
  public static CheckData fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, CheckData.class);
  }
/**
  * Convert an instance of CheckData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
