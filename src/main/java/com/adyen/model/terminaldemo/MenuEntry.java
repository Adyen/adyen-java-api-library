/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.MenuEntryTag;
import com.adyen.model.terminaldemo.OutputFormat;
import com.adyen.model.terminaldemo.OutputText;
import com.adyen.model.terminaldemo.PredefinedContent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * An entry of the menu to present to the Cashier. It conveys message text and parameters of the menu entry. This output data could be only provided for an input command, in order to choose an entry of the menu.
 */
@JsonPropertyOrder({
  MenuEntry.JSON_PROPERTY_MENU_ENTRY_TAG,
  MenuEntry.JSON_PROPERTY_DEFAULT_SELECTED_FLAG,
  MenuEntry.JSON_PROPERTY_OUTPUT_FORMAT,
  MenuEntry.JSON_PROPERTY_PREDEFINED_CONTENT,
  MenuEntry.JSON_PROPERTY_OUTPUT_TEXT,
  MenuEntry.JSON_PROPERTY_OUTPUT_X_H_T_M_L
})

public class MenuEntry {
  public static final String JSON_PROPERTY_MENU_ENTRY_TAG = "MenuEntryTag";
  private MenuEntryTag menuEntryTag;

  public static final String JSON_PROPERTY_DEFAULT_SELECTED_FLAG = "DefaultSelectedFlag";
  private Boolean defaultSelectedFlag;

  public static final String JSON_PROPERTY_OUTPUT_FORMAT = "OutputFormat";
  private OutputFormat outputFormat;

  public static final String JSON_PROPERTY_PREDEFINED_CONTENT = "PredefinedContent";
  private PredefinedContent predefinedContent;

  public static final String JSON_PROPERTY_OUTPUT_TEXT = "OutputText";
  private List<OutputText> outputText;

  public static final String JSON_PROPERTY_OUTPUT_X_H_T_M_L = "OutputXHTML";
  private byte[] outputXHTML;

  public MenuEntry() { 
  }

  /**
   * menuEntryTag
   *
   * @param menuEntryTag 
   * @return the current {@code MenuEntry} instance, allowing for method chaining
   */
  public MenuEntry menuEntryTag(MenuEntryTag menuEntryTag) {
    this.menuEntryTag = menuEntryTag;
    return this;
  }

  /**
   * Get menuEntryTag
   * @return menuEntryTag 
   */
  @JsonProperty(JSON_PROPERTY_MENU_ENTRY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public MenuEntryTag getMenuEntryTag() {
    return menuEntryTag;
  }

  /**
   * menuEntryTag
   *
   * @param menuEntryTag 
   */
  @JsonProperty(JSON_PROPERTY_MENU_ENTRY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMenuEntryTag(MenuEntryTag menuEntryTag) {
    this.menuEntryTag = menuEntryTag;
  }

  /**
   * Selection of a menu entry to be displayed. In Input request message, it allows selection of one or several menu entries before any user action.
   *
   * @param defaultSelectedFlag Selection of a menu entry to be displayed. In Input request message, it allows selection of one or several menu entries before any user action.
   * @return the current {@code MenuEntry} instance, allowing for method chaining
   */
  public MenuEntry defaultSelectedFlag(Boolean defaultSelectedFlag) {
    this.defaultSelectedFlag = defaultSelectedFlag;
    return this;
  }

  /**
   * Selection of a menu entry to be displayed. In Input request message, it allows selection of one or several menu entries before any user action.
   * @return defaultSelectedFlag Selection of a menu entry to be displayed. In Input request message, it allows selection of one or several menu entries before any user action.
   */
  @JsonProperty(JSON_PROPERTY_DEFAULT_SELECTED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDefaultSelectedFlag() {
    return defaultSelectedFlag;
  }

  /**
   * Selection of a menu entry to be displayed. In Input request message, it allows selection of one or several menu entries before any user action.
   *
   * @param defaultSelectedFlag Selection of a menu entry to be displayed. In Input request message, it allows selection of one or several menu entries before any user action.
   */
  @JsonProperty(JSON_PROPERTY_DEFAULT_SELECTED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultSelectedFlag(Boolean defaultSelectedFlag) {
    this.defaultSelectedFlag = defaultSelectedFlag;
  }

  /**
   * outputFormat
   *
   * @param outputFormat 
   * @return the current {@code MenuEntry} instance, allowing for method chaining
   */
  public MenuEntry outputFormat(OutputFormat outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Get outputFormat
   * @return outputFormat 
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OutputFormat getOutputFormat() {
    return outputFormat;
  }

  /**
   * outputFormat
   *
   * @param outputFormat 
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputFormat(OutputFormat outputFormat) {
    this.outputFormat = outputFormat;
  }

  /**
   * predefinedContent
   *
   * @param predefinedContent 
   * @return the current {@code MenuEntry} instance, allowing for method chaining
   */
  public MenuEntry predefinedContent(PredefinedContent predefinedContent) {
    this.predefinedContent = predefinedContent;
    return this;
  }

  /**
   * Get predefinedContent
   * @return predefinedContent 
   */
  @JsonProperty(JSON_PROPERTY_PREDEFINED_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PredefinedContent getPredefinedContent() {
    return predefinedContent;
  }

  /**
   * predefinedContent
   *
   * @param predefinedContent 
   */
  @JsonProperty(JSON_PROPERTY_PREDEFINED_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPredefinedContent(PredefinedContent predefinedContent) {
    this.predefinedContent = predefinedContent;
  }

  /**
   * Content of text message to display or print. It conveys Information related to the content of the text message and its format. All the data elements related to the format of the text to display or print are parameters valid for the whole Text content.
   *
   * @param outputText Content of text message to display or print. It conveys Information related to the content of the text message and its format. All the data elements related to the format of the text to display or print are parameters valid for the whole Text content.
   * @return the current {@code MenuEntry} instance, allowing for method chaining
   */
  public MenuEntry outputText(List<OutputText> outputText) {
    this.outputText = outputText;
    return this;
  }

  public MenuEntry addOutputTextItem(OutputText outputTextItem) {
    if (this.outputText == null) {
      this.outputText = new ArrayList<>();
    }
    this.outputText.add(outputTextItem);
    return this;
  }

  /**
   * Content of text message to display or print. It conveys Information related to the content of the text message and its format. All the data elements related to the format of the text to display or print are parameters valid for the whole Text content.
   * @return outputText Content of text message to display or print. It conveys Information related to the content of the text message and its format. All the data elements related to the format of the text to display or print are parameters valid for the whole Text content.
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<OutputText> getOutputText() {
    return outputText;
  }

  /**
   * Content of text message to display or print. It conveys Information related to the content of the text message and its format. All the data elements related to the format of the text to display or print are parameters valid for the whole Text content.
   *
   * @param outputText Content of text message to display or print. It conveys Information related to the content of the text message and its format. All the data elements related to the format of the text to display or print are parameters valid for the whole Text content.
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputText(List<OutputText> outputText) {
    this.outputText = outputText;
  }

  /**
   * XHTML document body containing the message to display or print.
   *
   * @param outputXHTML XHTML document body containing the message to display or print.
   * @return the current {@code MenuEntry} instance, allowing for method chaining
   */
  public MenuEntry outputXHTML(byte[] outputXHTML) {
    this.outputXHTML = outputXHTML;
    return this;
  }

  /**
   * XHTML document body containing the message to display or print.
   * @return outputXHTML XHTML document body containing the message to display or print.
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_X_H_T_M_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public byte[] getOutputXHTML() {
    return outputXHTML;
  }

  /**
   * XHTML document body containing the message to display or print.
   *
   * @param outputXHTML XHTML document body containing the message to display or print.
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_X_H_T_M_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputXHTML(byte[] outputXHTML) {
    this.outputXHTML = outputXHTML;
  }

  /**
   * Return true if this MenuEntry object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MenuEntry menuEntry = (MenuEntry) o;
    return Objects.equals(this.menuEntryTag, menuEntry.menuEntryTag) &&
        Objects.equals(this.defaultSelectedFlag, menuEntry.defaultSelectedFlag) &&
        Objects.equals(this.outputFormat, menuEntry.outputFormat) &&
        Objects.equals(this.predefinedContent, menuEntry.predefinedContent) &&
        Objects.equals(this.outputText, menuEntry.outputText) &&
        Arrays.equals(this.outputXHTML, menuEntry.outputXHTML);
  }

  @Override
  public int hashCode() {
    return Objects.hash(menuEntryTag, defaultSelectedFlag, outputFormat, predefinedContent, outputText, Arrays.hashCode(outputXHTML));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MenuEntry {\n");
    sb.append("    menuEntryTag: ").append(toIndentedString(menuEntryTag)).append("\n");
    sb.append("    defaultSelectedFlag: ").append(toIndentedString(defaultSelectedFlag)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    predefinedContent: ").append(toIndentedString(predefinedContent)).append("\n");
    sb.append("    outputText: ").append(toIndentedString(outputText)).append("\n");
    sb.append("    outputXHTML: ").append(toIndentedString(outputXHTML)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of MenuEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MenuEntry
   * @throws JsonProcessingException if the JSON string is invalid with respect to MenuEntry
   */
  public static MenuEntry fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, MenuEntry.class);
  }
/**
  * Convert an instance of MenuEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
