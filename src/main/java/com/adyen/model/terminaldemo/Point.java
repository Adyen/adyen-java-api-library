/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Point
 */
@JsonPropertyOrder({
  Point.JSON_PROPERTY_X,
  Point.JSON_PROPERTY_Y
})

public class Point {
  public static final String JSON_PROPERTY_X = "X";
  private String X;

  public static final String JSON_PROPERTY_Y = "Y";
  private String Y;

  public Point() { 
  }

  /**
   * The hexadecimal value of the coordinates of a point on the abscissa.
   *
   * @param X The hexadecimal value of the coordinates of a point on the abscissa.
   * @return the current {@code Point} instance, allowing for method chaining
   */
  public Point X(String X) {
    this.X = X;
    return this;
  }

  /**
   * The hexadecimal value of the coordinates of a point on the abscissa.
   * @return X The hexadecimal value of the coordinates of a point on the abscissa.
   */
  @JsonProperty(JSON_PROPERTY_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getX() {
    return X;
  }

  /**
   * The hexadecimal value of the coordinates of a point on the abscissa.
   *
   * @param X The hexadecimal value of the coordinates of a point on the abscissa.
   */
  @JsonProperty(JSON_PROPERTY_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setX(String X) {
    this.X = X;
  }

  /**
   * The hexadecimal value of the coordinates of a point on the ordinate.
   *
   * @param Y The hexadecimal value of the coordinates of a point on the ordinate.
   * @return the current {@code Point} instance, allowing for method chaining
   */
  public Point Y(String Y) {
    this.Y = Y;
    return this;
  }

  /**
   * The hexadecimal value of the coordinates of a point on the ordinate.
   * @return Y The hexadecimal value of the coordinates of a point on the ordinate.
   */
  @JsonProperty(JSON_PROPERTY_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getY() {
    return Y;
  }

  /**
   * The hexadecimal value of the coordinates of a point on the ordinate.
   *
   * @param Y The hexadecimal value of the coordinates of a point on the ordinate.
   */
  @JsonProperty(JSON_PROPERTY_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setY(String Y) {
    this.Y = Y;
  }

  /**
   * Return true if this Point object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Point point = (Point) o;
    return Objects.equals(this.X, point.X) &&
        Objects.equals(this.Y, point.Y);
  }

  @Override
  public int hashCode() {
    return Objects.hash(X, Y);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Point {\n");
    sb.append("    X: ").append(toIndentedString(X)).append("\n");
    sb.append("    Y: ").append(toIndentedString(Y)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of Point given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Point
   * @throws JsonProcessingException if the JSON string is invalid with respect to Point
   */
  public static Point fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Point.class);
  }
/**
  * Convert an instance of Point to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
