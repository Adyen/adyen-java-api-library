/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.Device;
import com.adyen.model.terminaldemo.InfoQualify;
import com.adyen.model.terminaldemo.MenuEntry;
import com.adyen.model.terminaldemo.OutputContent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Information to display and how to process it. Contains a complete display operation for a Display or an Input Device type. For the Input Devices, Diagnosis and &#x60;EnableService&#x60;, &#x60;ResponseRequiredFlag&#x60;, and &#x60;MinimumDisplayTime&#x60; shall be absent.
 */
@JsonPropertyOrder({
  DisplayOutput.JSON_PROPERTY_RESPONSE_REQUIRED_FLAG,
  DisplayOutput.JSON_PROPERTY_MINIMUM_DISPLAY_TIME,
  DisplayOutput.JSON_PROPERTY_DEVICE,
  DisplayOutput.JSON_PROPERTY_INFO_QUALIFY,
  DisplayOutput.JSON_PROPERTY_OUTPUT_CONTENT,
  DisplayOutput.JSON_PROPERTY_MENU_ENTRY,
  DisplayOutput.JSON_PROPERTY_OUTPUT_SIGNATURE
})

public class DisplayOutput {
  public static final String JSON_PROPERTY_RESPONSE_REQUIRED_FLAG = "ResponseRequiredFlag";
  private Boolean responseRequiredFlag;

  public static final String JSON_PROPERTY_MINIMUM_DISPLAY_TIME = "MinimumDisplayTime";
  private Integer minimumDisplayTime;

  public static final String JSON_PROPERTY_DEVICE = "Device";
  private Device device;

  public static final String JSON_PROPERTY_INFO_QUALIFY = "InfoQualify";
  private InfoQualify infoQualify;

  public static final String JSON_PROPERTY_OUTPUT_CONTENT = "OutputContent";
  private OutputContent outputContent;

  public static final String JSON_PROPERTY_MENU_ENTRY = "MenuEntry";
  private List<MenuEntry> menuEntry;

  public static final String JSON_PROPERTY_OUTPUT_SIGNATURE = "OutputSignature";
  private byte[] outputSignature;

  public DisplayOutput() { 
  }

  /**
   * Indicates if the message response is required.
   *
   * @param responseRequiredFlag Indicates if the message response is required.
   * @return the current {@code DisplayOutput} instance, allowing for method chaining
   */
  public DisplayOutput responseRequiredFlag(Boolean responseRequiredFlag) {
    this.responseRequiredFlag = responseRequiredFlag;
    return this;
  }

  /**
   * Indicates if the message response is required.
   * @return responseRequiredFlag Indicates if the message response is required.
   */
  @JsonProperty(JSON_PROPERTY_RESPONSE_REQUIRED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getResponseRequiredFlag() {
    return responseRequiredFlag;
  }

  /**
   * Indicates if the message response is required.
   *
   * @param responseRequiredFlag Indicates if the message response is required.
   */
  @JsonProperty(JSON_PROPERTY_RESPONSE_REQUIRED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseRequiredFlag(Boolean responseRequiredFlag) {
    this.responseRequiredFlag = responseRequiredFlag;
  }

  /**
   * Number of seconds the message has to be displayed.
   *
   * @param minimumDisplayTime Number of seconds the message has to be displayed.
   * @return the current {@code DisplayOutput} instance, allowing for method chaining
   */
  public DisplayOutput minimumDisplayTime(Integer minimumDisplayTime) {
    this.minimumDisplayTime = minimumDisplayTime;
    return this;
  }

  /**
   * Number of seconds the message has to be displayed.
   * minimum: 0
   * maximum: 999
   * @return minimumDisplayTime Number of seconds the message has to be displayed.
   */
  @JsonProperty(JSON_PROPERTY_MINIMUM_DISPLAY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMinimumDisplayTime() {
    return minimumDisplayTime;
  }

  /**
   * Number of seconds the message has to be displayed.
   *
   * @param minimumDisplayTime Number of seconds the message has to be displayed.
   */
  @JsonProperty(JSON_PROPERTY_MINIMUM_DISPLAY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumDisplayTime(Integer minimumDisplayTime) {
    this.minimumDisplayTime = minimumDisplayTime;
  }

  /**
   * device
   *
   * @param device 
   * @return the current {@code DisplayOutput} instance, allowing for method chaining
   */
  public DisplayOutput device(Device device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device 
   */
  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Device getDevice() {
    return device;
  }

  /**
   * device
   *
   * @param device 
   */
  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDevice(Device device) {
    this.device = device;
  }

  /**
   * infoQualify
   *
   * @param infoQualify 
   * @return the current {@code DisplayOutput} instance, allowing for method chaining
   */
  public DisplayOutput infoQualify(InfoQualify infoQualify) {
    this.infoQualify = infoQualify;
    return this;
  }

  /**
   * Get infoQualify
   * @return infoQualify 
   */
  @JsonProperty(JSON_PROPERTY_INFO_QUALIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InfoQualify getInfoQualify() {
    return infoQualify;
  }

  /**
   * infoQualify
   *
   * @param infoQualify 
   */
  @JsonProperty(JSON_PROPERTY_INFO_QUALIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInfoQualify(InfoQualify infoQualify) {
    this.infoQualify = infoQualify;
  }

  /**
   * outputContent
   *
   * @param outputContent 
   * @return the current {@code DisplayOutput} instance, allowing for method chaining
   */
  public DisplayOutput outputContent(OutputContent outputContent) {
    this.outputContent = outputContent;
    return this;
  }

  /**
   * Get outputContent
   * @return outputContent 
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OutputContent getOutputContent() {
    return outputContent;
  }

  /**
   * outputContent
   *
   * @param outputContent 
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputContent(OutputContent outputContent) {
    this.outputContent = outputContent;
  }

  /**
   * An entry of the menu to present to the Cashier. It conveys the message text and parameters of the menu entry. This output data could be only provided for an input command, in order to choose an entryof the menu.
   *
   * @param menuEntry An entry of the menu to present to the Cashier. It conveys the message text and parameters of the menu entry. This output data could be only provided for an input command, in order to choose an entryof the menu.
   * @return the current {@code DisplayOutput} instance, allowing for method chaining
   */
  public DisplayOutput menuEntry(List<MenuEntry> menuEntry) {
    this.menuEntry = menuEntry;
    return this;
  }

  public DisplayOutput addMenuEntryItem(MenuEntry menuEntryItem) {
    if (this.menuEntry == null) {
      this.menuEntry = new ArrayList<>();
    }
    this.menuEntry.add(menuEntryItem);
    return this;
  }

  /**
   * An entry of the menu to present to the Cashier. It conveys the message text and parameters of the menu entry. This output data could be only provided for an input command, in order to choose an entryof the menu.
   * @return menuEntry An entry of the menu to present to the Cashier. It conveys the message text and parameters of the menu entry. This output data could be only provided for an input command, in order to choose an entryof the menu.
   */
  @JsonProperty(JSON_PROPERTY_MENU_ENTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<MenuEntry> getMenuEntry() {
    return menuEntry;
  }

  /**
   * An entry of the menu to present to the Cashier. It conveys the message text and parameters of the menu entry. This output data could be only provided for an input command, in order to choose an entryof the menu.
   *
   * @param menuEntry An entry of the menu to present to the Cashier. It conveys the message text and parameters of the menu entry. This output data could be only provided for an input command, in order to choose an entryof the menu.
   */
  @JsonProperty(JSON_PROPERTY_MENU_ENTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMenuEntry(List<MenuEntry> menuEntry) {
    this.menuEntry = menuEntry;
  }

  /**
   * Vendor-specific signature of the text message to display or print. If protection has to be provided to the vendor on the text to display or print.
   *
   * @param outputSignature Vendor-specific signature of the text message to display or print. If protection has to be provided to the vendor on the text to display or print.
   * @return the current {@code DisplayOutput} instance, allowing for method chaining
   */
  public DisplayOutput outputSignature(byte[] outputSignature) {
    this.outputSignature = outputSignature;
    return this;
  }

  /**
   * Vendor-specific signature of the text message to display or print. If protection has to be provided to the vendor on the text to display or print.
   * @return outputSignature Vendor-specific signature of the text message to display or print. If protection has to be provided to the vendor on the text to display or print.
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public byte[] getOutputSignature() {
    return outputSignature;
  }

  /**
   * Vendor-specific signature of the text message to display or print. If protection has to be provided to the vendor on the text to display or print.
   *
   * @param outputSignature Vendor-specific signature of the text message to display or print. If protection has to be provided to the vendor on the text to display or print.
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputSignature(byte[] outputSignature) {
    this.outputSignature = outputSignature;
  }

  /**
   * Return true if this DisplayOutput object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisplayOutput displayOutput = (DisplayOutput) o;
    return Objects.equals(this.responseRequiredFlag, displayOutput.responseRequiredFlag) &&
        Objects.equals(this.minimumDisplayTime, displayOutput.minimumDisplayTime) &&
        Objects.equals(this.device, displayOutput.device) &&
        Objects.equals(this.infoQualify, displayOutput.infoQualify) &&
        Objects.equals(this.outputContent, displayOutput.outputContent) &&
        Objects.equals(this.menuEntry, displayOutput.menuEntry) &&
        Arrays.equals(this.outputSignature, displayOutput.outputSignature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseRequiredFlag, minimumDisplayTime, device, infoQualify, outputContent, menuEntry, Arrays.hashCode(outputSignature));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisplayOutput {\n");
    sb.append("    responseRequiredFlag: ").append(toIndentedString(responseRequiredFlag)).append("\n");
    sb.append("    minimumDisplayTime: ").append(toIndentedString(minimumDisplayTime)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    infoQualify: ").append(toIndentedString(infoQualify)).append("\n");
    sb.append("    outputContent: ").append(toIndentedString(outputContent)).append("\n");
    sb.append("    menuEntry: ").append(toIndentedString(menuEntry)).append("\n");
    sb.append("    outputSignature: ").append(toIndentedString(outputSignature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of DisplayOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisplayOutput
   * @throws JsonProcessingException if the JSON string is invalid with respect to DisplayOutput
   */
  public static DisplayOutput fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, DisplayOutput.class);
  }
/**
  * Convert an instance of DisplayOutput to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
