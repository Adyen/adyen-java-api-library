/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.InputCommand;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Input
 */
@JsonPropertyOrder({
  Input.JSON_PROPERTY_INPUT_COMMAND,
  Input.JSON_PROPERTY_CONFIRMED_FLAG,
  Input.JSON_PROPERTY_FUNCTION_KEY,
  Input.JSON_PROPERTY_TEXT_INPUT,
  Input.JSON_PROPERTY_DIGIT_INPUT,
  Input.JSON_PROPERTY_PASSWORD,
  Input.JSON_PROPERTY_MENU_ENTRY_NUMBER
})

public class Input {
  public static final String JSON_PROPERTY_INPUT_COMMAND = "InputCommand";
  private InputCommand inputCommand;

  public static final String JSON_PROPERTY_CONFIRMED_FLAG = "ConfirmedFlag";
  private Boolean confirmedFlag;

  public static final String JSON_PROPERTY_FUNCTION_KEY = "FunctionKey";
  private Integer functionKey;

  public static final String JSON_PROPERTY_TEXT_INPUT = "TextInput";
  private String textInput;

  public static final String JSON_PROPERTY_DIGIT_INPUT = "DigitInput";
  private Integer digitInput;

  public static final String JSON_PROPERTY_PASSWORD = "Password";
  private String password;

  public static final String JSON_PROPERTY_MENU_ENTRY_NUMBER = "MenuEntryNumber";
  private List<Integer> menuEntryNumber;

  public Input() { 
  }

  /**
   * inputCommand
   *
   * @param inputCommand 
   * @return the current {@code Input} instance, allowing for method chaining
   */
  public Input inputCommand(InputCommand inputCommand) {
    this.inputCommand = inputCommand;
    return this;
  }

  /**
   * Get inputCommand
   * @return inputCommand 
   */
  @JsonProperty(JSON_PROPERTY_INPUT_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InputCommand getInputCommand() {
    return inputCommand;
  }

  /**
   * inputCommand
   *
   * @param inputCommand 
   */
  @JsonProperty(JSON_PROPERTY_INPUT_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputCommand(InputCommand inputCommand) {
    this.inputCommand = inputCommand;
  }

  /**
   * Indicates te response of the user from the &#x60;GetConfirmation&#x60; input command.
   *
   * @param confirmedFlag Indicates te response of the user from the &#x60;GetConfirmation&#x60; input command.
   * @return the current {@code Input} instance, allowing for method chaining
   */
  public Input confirmedFlag(Boolean confirmedFlag) {
    this.confirmedFlag = confirmedFlag;
    return this;
  }

  /**
   * Indicates te response of the user from the &#x60;GetConfirmation&#x60; input command.
   * @return confirmedFlag Indicates te response of the user from the &#x60;GetConfirmation&#x60; input command.
   */
  @JsonProperty(JSON_PROPERTY_CONFIRMED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getConfirmedFlag() {
    return confirmedFlag;
  }

  /**
   * Indicates te response of the user from the &#x60;GetConfirmation&#x60; input command.
   *
   * @param confirmedFlag Indicates te response of the user from the &#x60;GetConfirmation&#x60; input command.
   */
  @JsonProperty(JSON_PROPERTY_CONFIRMED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfirmedFlag(Boolean confirmedFlag) {
    this.confirmedFlag = confirmedFlag;
  }

  /**
   * The number of the function key which is typed by the Customer on the POI or the Cashier on the Sale Terminal.
   *
   * @param functionKey The number of the function key which is typed by the Customer on the POI or the Cashier on the Sale Terminal.
   * @return the current {@code Input} instance, allowing for method chaining
   */
  public Input functionKey(Integer functionKey) {
    this.functionKey = functionKey;
    return this;
  }

  /**
   * The number of the function key which is typed by the Customer on the POI or the Cashier on the Sale Terminal.
   * @return functionKey The number of the function key which is typed by the Customer on the POI or the Cashier on the Sale Terminal.
   */
  @JsonProperty(JSON_PROPERTY_FUNCTION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getFunctionKey() {
    return functionKey;
  }

  /**
   * The number of the function key which is typed by the Customer on the POI or the Cashier on the Sale Terminal.
   *
   * @param functionKey The number of the function key which is typed by the Customer on the POI or the Cashier on the Sale Terminal.
   */
  @JsonProperty(JSON_PROPERTY_FUNCTION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunctionKey(Integer functionKey) {
    this.functionKey = functionKey;
  }

  /**
   * The text typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   *
   * @param textInput The text typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   * @return the current {@code Input} instance, allowing for method chaining
   */
  public Input textInput(String textInput) {
    this.textInput = textInput;
    return this;
  }

  /**
   * The text typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   * @return textInput The text typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   */
  @JsonProperty(JSON_PROPERTY_TEXT_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTextInput() {
    return textInput;
  }

  /**
   * The text typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   *
   * @param textInput The text typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   */
  @JsonProperty(JSON_PROPERTY_TEXT_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTextInput(String textInput) {
    this.textInput = textInput;
  }

  /**
   * The digits typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   *
   * @param digitInput The digits typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   * @return the current {@code Input} instance, allowing for method chaining
   */
  public Input digitInput(Integer digitInput) {
    this.digitInput = digitInput;
    return this;
  }

  /**
   * The digits typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   * @return digitInput The digits typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   */
  @JsonProperty(JSON_PROPERTY_DIGIT_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getDigitInput() {
    return digitInput;
  }

  /**
   * The digits typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   *
   * @param digitInput The digits typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   */
  @JsonProperty(JSON_PROPERTY_DIGIT_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDigitInput(Integer digitInput) {
    this.digitInput = digitInput;
  }

  /**
   * The text password typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   *
   * @param password The text password typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   * @return the current {@code Input} instance, allowing for method chaining
   */
  public Input password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The text password typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   * @return password The text password typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   */
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPassword() {
    return password;
  }

  /**
   * The text password typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   *
   * @param password The text password typed by the Customer on the POI or by the Cashier on the Sale Terminal.
   */
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }

  /**
   * The index of the menu item (from 1 to n) which is selected by the Cashier on the Sale Terminal. The value -1 indicates that the immediate upper level of the menu is requested. The value 0 indicates that the root of the menu is requested.
   *
   * @param menuEntryNumber The index of the menu item (from 1 to n) which is selected by the Cashier on the Sale Terminal. The value -1 indicates that the immediate upper level of the menu is requested. The value 0 indicates that the root of the menu is requested.
   * @return the current {@code Input} instance, allowing for method chaining
   */
  public Input menuEntryNumber(List<Integer> menuEntryNumber) {
    this.menuEntryNumber = menuEntryNumber;
    return this;
  }

  public Input addMenuEntryNumberItem(Integer menuEntryNumberItem) {
    if (this.menuEntryNumber == null) {
      this.menuEntryNumber = new ArrayList<>();
    }
    this.menuEntryNumber.add(menuEntryNumberItem);
    return this;
  }

  /**
   * The index of the menu item (from 1 to n) which is selected by the Cashier on the Sale Terminal. The value -1 indicates that the immediate upper level of the menu is requested. The value 0 indicates that the root of the menu is requested.
   * @return menuEntryNumber The index of the menu item (from 1 to n) which is selected by the Cashier on the Sale Terminal. The value -1 indicates that the immediate upper level of the menu is requested. The value 0 indicates that the root of the menu is requested.
   */
  @JsonProperty(JSON_PROPERTY_MENU_ENTRY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Integer> getMenuEntryNumber() {
    return menuEntryNumber;
  }

  /**
   * The index of the menu item (from 1 to n) which is selected by the Cashier on the Sale Terminal. The value -1 indicates that the immediate upper level of the menu is requested. The value 0 indicates that the root of the menu is requested.
   *
   * @param menuEntryNumber The index of the menu item (from 1 to n) which is selected by the Cashier on the Sale Terminal. The value -1 indicates that the immediate upper level of the menu is requested. The value 0 indicates that the root of the menu is requested.
   */
  @JsonProperty(JSON_PROPERTY_MENU_ENTRY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMenuEntryNumber(List<Integer> menuEntryNumber) {
    this.menuEntryNumber = menuEntryNumber;
  }

  /**
   * Return true if this Input object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Input input = (Input) o;
    return Objects.equals(this.inputCommand, input.inputCommand) &&
        Objects.equals(this.confirmedFlag, input.confirmedFlag) &&
        Objects.equals(this.functionKey, input.functionKey) &&
        Objects.equals(this.textInput, input.textInput) &&
        Objects.equals(this.digitInput, input.digitInput) &&
        Objects.equals(this.password, input.password) &&
        Objects.equals(this.menuEntryNumber, input.menuEntryNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputCommand, confirmedFlag, functionKey, textInput, digitInput, password, menuEntryNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Input {\n");
    sb.append("    inputCommand: ").append(toIndentedString(inputCommand)).append("\n");
    sb.append("    confirmedFlag: ").append(toIndentedString(confirmedFlag)).append("\n");
    sb.append("    functionKey: ").append(toIndentedString(functionKey)).append("\n");
    sb.append("    textInput: ").append(toIndentedString(textInput)).append("\n");
    sb.append("    digitInput: ").append(toIndentedString(digitInput)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    menuEntryNumber: ").append(toIndentedString(menuEntryNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of Input given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Input
   * @throws JsonProcessingException if the JSON string is invalid with respect to Input
   */
  public static Input fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Input.class);
  }
/**
  * Convert an instance of Input to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
