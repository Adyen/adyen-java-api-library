/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.Device;
import com.adyen.model.terminaldemo.InfoQualify;
import com.adyen.model.terminaldemo.InputCommand;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * InputData
 */
@JsonPropertyOrder({
  InputData.JSON_PROPERTY_DEVICE,
  InputData.JSON_PROPERTY_INFO_QUALIFY,
  InputData.JSON_PROPERTY_INPUT_COMMAND,
  InputData.JSON_PROPERTY_NOTIFY_CARD_INPUT_FLAG,
  InputData.JSON_PROPERTY_MAX_INPUT_TIME,
  InputData.JSON_PROPERTY_IMMEDIATE_RESPONSE_FLAG,
  InputData.JSON_PROPERTY_MIN_LENGTH,
  InputData.JSON_PROPERTY_MAX_LENGTH,
  InputData.JSON_PROPERTY_MAX_DECIMAL_LENGTH,
  InputData.JSON_PROPERTY_WAIT_USER_VALIDATION_FLAG,
  InputData.JSON_PROPERTY_DEFAULT_INPUT_STRING,
  InputData.JSON_PROPERTY_DEFAULT_LAYOUT_STRING,
  InputData.JSON_PROPERTY_STRING_MASK,
  InputData.JSON_PROPERTY_FROM_RIGHT_TO_LEFT_FLAG,
  InputData.JSON_PROPERTY_MASK_CHARACTERS_FLAG,
  InputData.JSON_PROPERTY_BEEP_KEY_FLAG,
  InputData.JSON_PROPERTY_GLOBAL_CORRECTION_FLAG,
  InputData.JSON_PROPERTY_DISABLE_CANCEL_FLAG,
  InputData.JSON_PROPERTY_DISABLE_CORRECT_FLAG,
  InputData.JSON_PROPERTY_DISABLE_VALID_FLAG,
  InputData.JSON_PROPERTY_MENU_BACK_FLAG
})

public class InputData {
  public static final String JSON_PROPERTY_DEVICE = "Device";
  private Device device;

  public static final String JSON_PROPERTY_INFO_QUALIFY = "InfoQualify";
  private InfoQualify infoQualify;

  public static final String JSON_PROPERTY_INPUT_COMMAND = "InputCommand";
  private InputCommand inputCommand;

  public static final String JSON_PROPERTY_NOTIFY_CARD_INPUT_FLAG = "NotifyCardInputFlag";
  private Boolean notifyCardInputFlag;

  public static final String JSON_PROPERTY_MAX_INPUT_TIME = "MaxInputTime";
  private Integer maxInputTime;

  public static final String JSON_PROPERTY_IMMEDIATE_RESPONSE_FLAG = "ImmediateResponseFlag";
  private Boolean immediateResponseFlag;

  public static final String JSON_PROPERTY_MIN_LENGTH = "MinLength";
  private Integer minLength;

  public static final String JSON_PROPERTY_MAX_LENGTH = "MaxLength";
  private Integer maxLength;

  public static final String JSON_PROPERTY_MAX_DECIMAL_LENGTH = "MaxDecimalLength";
  private Integer maxDecimalLength;

  public static final String JSON_PROPERTY_WAIT_USER_VALIDATION_FLAG = "WaitUserValidationFlag";
  private Boolean waitUserValidationFlag;

  public static final String JSON_PROPERTY_DEFAULT_INPUT_STRING = "DefaultInputString";
  private String defaultInputString;

  public static final String JSON_PROPERTY_DEFAULT_LAYOUT_STRING = "DefaultLayoutString";
  private String defaultLayoutString;

  public static final String JSON_PROPERTY_STRING_MASK = "StringMask";
  private String stringMask;

  public static final String JSON_PROPERTY_FROM_RIGHT_TO_LEFT_FLAG = "FromRightToLeftFlag";
  private Boolean fromRightToLeftFlag;

  public static final String JSON_PROPERTY_MASK_CHARACTERS_FLAG = "MaskCharactersFlag";
  private Boolean maskCharactersFlag;

  public static final String JSON_PROPERTY_BEEP_KEY_FLAG = "BeepKeyFlag";
  private Boolean beepKeyFlag;

  public static final String JSON_PROPERTY_GLOBAL_CORRECTION_FLAG = "GlobalCorrectionFlag";
  private Boolean globalCorrectionFlag;

  public static final String JSON_PROPERTY_DISABLE_CANCEL_FLAG = "DisableCancelFlag";
  private Boolean disableCancelFlag;

  public static final String JSON_PROPERTY_DISABLE_CORRECT_FLAG = "DisableCorrectFlag";
  private Boolean disableCorrectFlag;

  public static final String JSON_PROPERTY_DISABLE_VALID_FLAG = "DisableValidFlag";
  private Boolean disableValidFlag;

  public static final String JSON_PROPERTY_MENU_BACK_FLAG = "MenuBackFlag";
  private Boolean menuBackFlag;

  public InputData() { 
  }

  /**
   * device
   *
   * @param device 
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData device(Device device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device 
   */
  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Device getDevice() {
    return device;
  }

  /**
   * device
   *
   * @param device 
   */
  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDevice(Device device) {
    this.device = device;
  }

  /**
   * infoQualify
   *
   * @param infoQualify 
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData infoQualify(InfoQualify infoQualify) {
    this.infoQualify = infoQualify;
    return this;
  }

  /**
   * Get infoQualify
   * @return infoQualify 
   */
  @JsonProperty(JSON_PROPERTY_INFO_QUALIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InfoQualify getInfoQualify() {
    return infoQualify;
  }

  /**
   * infoQualify
   *
   * @param infoQualify 
   */
  @JsonProperty(JSON_PROPERTY_INFO_QUALIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInfoQualify(InfoQualify infoQualify) {
    this.infoQualify = infoQualify;
  }

  /**
   * inputCommand
   *
   * @param inputCommand 
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData inputCommand(InputCommand inputCommand) {
    this.inputCommand = inputCommand;
    return this;
  }

  /**
   * Get inputCommand
   * @return inputCommand 
   */
  @JsonProperty(JSON_PROPERTY_INPUT_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InputCommand getInputCommand() {
    return inputCommand;
  }

  /**
   * inputCommand
   *
   * @param inputCommand 
   */
  @JsonProperty(JSON_PROPERTY_INPUT_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputCommand(InputCommand inputCommand) {
    this.inputCommand = inputCommand;
  }

  /**
   * Request Notification of the card entered in the POI card reader.
   *
   * @param notifyCardInputFlag Request Notification of the card entered in the POI card reader.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData notifyCardInputFlag(Boolean notifyCardInputFlag) {
    this.notifyCardInputFlag = notifyCardInputFlag;
    return this;
  }

  /**
   * Request Notification of the card entered in the POI card reader.
   * @return notifyCardInputFlag Request Notification of the card entered in the POI card reader.
   */
  @JsonProperty(JSON_PROPERTY_NOTIFY_CARD_INPUT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getNotifyCardInputFlag() {
    return notifyCardInputFlag;
  }

  /**
   * Request Notification of the card entered in the POI card reader.
   *
   * @param notifyCardInputFlag Request Notification of the card entered in the POI card reader.
   */
  @JsonProperty(JSON_PROPERTY_NOTIFY_CARD_INPUT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotifyCardInputFlag(Boolean notifyCardInputFlag) {
    this.notifyCardInputFlag = notifyCardInputFlag;
  }

  /**
   * Maximum input time in seconds. Limits the time to answer to an Input request message.
   *
   * @param maxInputTime Maximum input time in seconds. Limits the time to answer to an Input request message.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData maxInputTime(Integer maxInputTime) {
    this.maxInputTime = maxInputTime;
    return this;
  }

  /**
   * Maximum input time in seconds. Limits the time to answer to an Input request message.
   * @return maxInputTime Maximum input time in seconds. Limits the time to answer to an Input request message.
   */
  @JsonProperty(JSON_PROPERTY_MAX_INPUT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMaxInputTime() {
    return maxInputTime;
  }

  /**
   * Maximum input time in seconds. Limits the time to answer to an Input request message.
   *
   * @param maxInputTime Maximum input time in seconds. Limits the time to answer to an Input request message.
   */
  @JsonProperty(JSON_PROPERTY_MAX_INPUT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxInputTime(Integer maxInputTime) {
    this.maxInputTime = maxInputTime;
  }

  /**
   * Indicates whether to request an Immediate response to the message without waiting for the completion of the command.
   *
   * @param immediateResponseFlag Indicates whether to request an Immediate response to the message without waiting for the completion of the command.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData immediateResponseFlag(Boolean immediateResponseFlag) {
    this.immediateResponseFlag = immediateResponseFlag;
    return this;
  }

  /**
   * Indicates whether to request an Immediate response to the message without waiting for the completion of the command.
   * @return immediateResponseFlag Indicates whether to request an Immediate response to the message without waiting for the completion of the command.
   */
  @JsonProperty(JSON_PROPERTY_IMMEDIATE_RESPONSE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getImmediateResponseFlag() {
    return immediateResponseFlag;
  }

  /**
   * Indicates whether to request an Immediate response to the message without waiting for the completion of the command.
   *
   * @param immediateResponseFlag Indicates whether to request an Immediate response to the message without waiting for the completion of the command.
   */
  @JsonProperty(JSON_PROPERTY_IMMEDIATE_RESPONSE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImmediateResponseFlag(Boolean immediateResponseFlag) {
    this.immediateResponseFlag = immediateResponseFlag;
  }

  /**
   * Minimum length of an entered string, or minimum number of entries that can be selected in a menu.
   *
   * @param minLength Minimum length of an entered string, or minimum number of entries that can be selected in a menu.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData minLength(Integer minLength) {
    this.minLength = minLength;
    return this;
  }

  /**
   * Minimum length of an entered string, or minimum number of entries that can be selected in a menu.
   * @return minLength Minimum length of an entered string, or minimum number of entries that can be selected in a menu.
   */
  @JsonProperty(JSON_PROPERTY_MIN_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMinLength() {
    return minLength;
  }

  /**
   * Minimum length of an entered string, or minimum number of entries that can be selected in a menu.
   *
   * @param minLength Minimum length of an entered string, or minimum number of entries that can be selected in a menu.
   */
  @JsonProperty(JSON_PROPERTY_MIN_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }

  /**
   * Maximum length of an entered string, or maximum number of entries that can be selected in a menu.
   *
   * @param maxLength Maximum length of an entered string, or maximum number of entries that can be selected in a menu.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData maxLength(Integer maxLength) {
    this.maxLength = maxLength;
    return this;
  }

  /**
   * Maximum length of an entered string, or maximum number of entries that can be selected in a menu.
   * @return maxLength Maximum length of an entered string, or maximum number of entries that can be selected in a menu.
   */
  @JsonProperty(JSON_PROPERTY_MAX_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMaxLength() {
    return maxLength;
  }

  /**
   * Maximum length of an entered string, or maximum number of entries that can be selected in a menu.
   *
   * @param maxLength Maximum length of an entered string, or maximum number of entries that can be selected in a menu.
   */
  @JsonProperty(JSON_PROPERTY_MAX_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }

  /**
   * Maximum input length of the decimal part (without decimal point).
   *
   * @param maxDecimalLength Maximum input length of the decimal part (without decimal point).
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData maxDecimalLength(Integer maxDecimalLength) {
    this.maxDecimalLength = maxDecimalLength;
    return this;
  }

  /**
   * Maximum input length of the decimal part (without decimal point).
   * @return maxDecimalLength Maximum input length of the decimal part (without decimal point).
   */
  @JsonProperty(JSON_PROPERTY_MAX_DECIMAL_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMaxDecimalLength() {
    return maxDecimalLength;
  }

  /**
   * Maximum input length of the decimal part (without decimal point).
   *
   * @param maxDecimalLength Maximum input length of the decimal part (without decimal point).
   */
  @JsonProperty(JSON_PROPERTY_MAX_DECIMAL_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxDecimalLength(Integer maxDecimalLength) {
    this.maxDecimalLength = maxDecimalLength;
  }

  /**
   * Indicates that the user must confirm the entered characters, when the maximum allowed length is reached. During the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60; with &#x60;MaxLength&#x60; or &#x60;MaxDecimalLength&#x60; present in the request.
   *
   * @param waitUserValidationFlag Indicates that the user must confirm the entered characters, when the maximum allowed length is reached. During the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60; with &#x60;MaxLength&#x60; or &#x60;MaxDecimalLength&#x60; present in the request.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData waitUserValidationFlag(Boolean waitUserValidationFlag) {
    this.waitUserValidationFlag = waitUserValidationFlag;
    return this;
  }

  /**
   * Indicates that the user must confirm the entered characters, when the maximum allowed length is reached. During the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60; with &#x60;MaxLength&#x60; or &#x60;MaxDecimalLength&#x60; present in the request.
   * @return waitUserValidationFlag Indicates that the user must confirm the entered characters, when the maximum allowed length is reached. During the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60; with &#x60;MaxLength&#x60; or &#x60;MaxDecimalLength&#x60; present in the request.
   */
  @JsonProperty(JSON_PROPERTY_WAIT_USER_VALIDATION_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getWaitUserValidationFlag() {
    return waitUserValidationFlag;
  }

  /**
   * Indicates that the user must confirm the entered characters, when the maximum allowed length is reached. During the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60; with &#x60;MaxLength&#x60; or &#x60;MaxDecimalLength&#x60; present in the request.
   *
   * @param waitUserValidationFlag Indicates that the user must confirm the entered characters, when the maximum allowed length is reached. During the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60; with &#x60;MaxLength&#x60; or &#x60;MaxDecimalLength&#x60; present in the request.
   */
  @JsonProperty(JSON_PROPERTY_WAIT_USER_VALIDATION_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWaitUserValidationFlag(Boolean waitUserValidationFlag) {
    this.waitUserValidationFlag = waitUserValidationFlag;
  }

  /**
   * Default string value for an input command. On the &#x60;TextString&#x60;, &#x60;DigitString&#x60; and &#x60;DecimalString&#x60; input commands: default string displayed on the input field before entering the string. In &#x60;GetConfirmation&#x60; input command: **Y** for yes, **N** for no.
   *
   * @param defaultInputString Default string value for an input command. On the &#x60;TextString&#x60;, &#x60;DigitString&#x60; and &#x60;DecimalString&#x60; input commands: default string displayed on the input field before entering the string. In &#x60;GetConfirmation&#x60; input command: **Y** for yes, **N** for no.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData defaultInputString(String defaultInputString) {
    this.defaultInputString = defaultInputString;
    return this;
  }

  /**
   * Default string value for an input command. On the &#x60;TextString&#x60;, &#x60;DigitString&#x60; and &#x60;DecimalString&#x60; input commands: default string displayed on the input field before entering the string. In &#x60;GetConfirmation&#x60; input command: **Y** for yes, **N** for no.
   * @return defaultInputString Default string value for an input command. On the &#x60;TextString&#x60;, &#x60;DigitString&#x60; and &#x60;DecimalString&#x60; input commands: default string displayed on the input field before entering the string. In &#x60;GetConfirmation&#x60; input command: **Y** for yes, **N** for no.
   */
  @JsonProperty(JSON_PROPERTY_DEFAULT_INPUT_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDefaultInputString() {
    return defaultInputString;
  }

  /**
   * Default string value for an input command. On the &#x60;TextString&#x60;, &#x60;DigitString&#x60; and &#x60;DecimalString&#x60; input commands: default string displayed on the input field before entering the string. In &#x60;GetConfirmation&#x60; input command: **Y** for yes, **N** for no.
   *
   * @param defaultInputString Default string value for an input command. On the &#x60;TextString&#x60;, &#x60;DigitString&#x60; and &#x60;DecimalString&#x60; input commands: default string displayed on the input field before entering the string. In &#x60;GetConfirmation&#x60; input command: **Y** for yes, **N** for no.
   */
  @JsonProperty(JSON_PROPERTY_DEFAULT_INPUT_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultInputString(String defaultInputString) {
    this.defaultInputString = defaultInputString;
  }

  /**
   * defaultLayoutString
   *
   * @param defaultLayoutString 
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData defaultLayoutString(String defaultLayoutString) {
    this.defaultLayoutString = defaultLayoutString;
    return this;
  }

  /**
   * Get defaultLayoutString
   * @return defaultLayoutString 
   */
  @JsonProperty(JSON_PROPERTY_DEFAULT_LAYOUT_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDefaultLayoutString() {
    return defaultLayoutString;
  }

  /**
   * defaultLayoutString
   *
   * @param defaultLayoutString 
   */
  @JsonProperty(JSON_PROPERTY_DEFAULT_LAYOUT_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultLayoutString(String defaultLayoutString) {
    this.defaultLayoutString = defaultLayoutString;
  }

  /**
   * String mask to get information requiring a specific format. For the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60;. Some information as date or plate number required to be entered with a certain format.
   *
   * @param stringMask String mask to get information requiring a specific format. For the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60;. Some information as date or plate number required to be entered with a certain format.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData stringMask(String stringMask) {
    this.stringMask = stringMask;
    return this;
  }

  /**
   * String mask to get information requiring a specific format. For the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60;. Some information as date or plate number required to be entered with a certain format.
   * @return stringMask String mask to get information requiring a specific format. For the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60;. Some information as date or plate number required to be entered with a certain format.
   */
  @JsonProperty(JSON_PROPERTY_STRING_MASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStringMask() {
    return stringMask;
  }

  /**
   * String mask to get information requiring a specific format. For the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60;. Some information as date or plate number required to be entered with a certain format.
   *
   * @param stringMask String mask to get information requiring a specific format. For the processing of an Input command &#x60;TextString&#x60;, &#x60;DigitString&#x60; or &#x60;DecimalString&#x60;. Some information as date or plate number required to be entered with a certain format.
   */
  @JsonProperty(JSON_PROPERTY_STRING_MASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStringMask(String stringMask) {
    this.stringMask = stringMask;
  }

  /**
   * Indicates if the entered character has to be displayed from the right to the left of the display field.
   *
   * @param fromRightToLeftFlag Indicates if the entered character has to be displayed from the right to the left of the display field.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData fromRightToLeftFlag(Boolean fromRightToLeftFlag) {
    this.fromRightToLeftFlag = fromRightToLeftFlag;
    return this;
  }

  /**
   * Indicates if the entered character has to be displayed from the right to the left of the display field.
   * @return fromRightToLeftFlag Indicates if the entered character has to be displayed from the right to the left of the display field.
   */
  @JsonProperty(JSON_PROPERTY_FROM_RIGHT_TO_LEFT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getFromRightToLeftFlag() {
    return fromRightToLeftFlag;
  }

  /**
   * Indicates if the entered character has to be displayed from the right to the left of the display field.
   *
   * @param fromRightToLeftFlag Indicates if the entered character has to be displayed from the right to the left of the display field.
   */
  @JsonProperty(JSON_PROPERTY_FROM_RIGHT_TO_LEFT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromRightToLeftFlag(Boolean fromRightToLeftFlag) {
    this.fromRightToLeftFlag = fromRightToLeftFlag;
  }

  /**
   * Indicates to mask the characters entered by the user (i.e. replacing in the display of the input, the entered character by a standard character as *).
   *
   * @param maskCharactersFlag Indicates to mask the characters entered by the user (i.e. replacing in the display of the input, the entered character by a standard character as *).
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData maskCharactersFlag(Boolean maskCharactersFlag) {
    this.maskCharactersFlag = maskCharactersFlag;
    return this;
  }

  /**
   * Indicates to mask the characters entered by the user (i.e. replacing in the display of the input, the entered character by a standard character as *).
   * @return maskCharactersFlag Indicates to mask the characters entered by the user (i.e. replacing in the display of the input, the entered character by a standard character as *).
   */
  @JsonProperty(JSON_PROPERTY_MASK_CHARACTERS_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getMaskCharactersFlag() {
    return maskCharactersFlag;
  }

  /**
   * Indicates to mask the characters entered by the user (i.e. replacing in the display of the input, the entered character by a standard character as *).
   *
   * @param maskCharactersFlag Indicates to mask the characters entered by the user (i.e. replacing in the display of the input, the entered character by a standard character as *).
   */
  @JsonProperty(JSON_PROPERTY_MASK_CHARACTERS_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaskCharactersFlag(Boolean maskCharactersFlag) {
    this.maskCharactersFlag = maskCharactersFlag;
  }

  /**
   * Indicates, when the user press a key, if a beep has to be generated (value True).
   *
   * @param beepKeyFlag Indicates, when the user press a key, if a beep has to be generated (value True).
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData beepKeyFlag(Boolean beepKeyFlag) {
    this.beepKeyFlag = beepKeyFlag;
    return this;
  }

  /**
   * Indicates, when the user press a key, if a beep has to be generated (value True).
   * @return beepKeyFlag Indicates, when the user press a key, if a beep has to be generated (value True).
   */
  @JsonProperty(JSON_PROPERTY_BEEP_KEY_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getBeepKeyFlag() {
    return beepKeyFlag;
  }

  /**
   * Indicates, when the user press a key, if a beep has to be generated (value True).
   *
   * @param beepKeyFlag Indicates, when the user press a key, if a beep has to be generated (value True).
   */
  @JsonProperty(JSON_PROPERTY_BEEP_KEY_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeepKeyFlag(Boolean beepKeyFlag) {
    this.beepKeyFlag = beepKeyFlag;
  }

  /**
   * Indicates, when the user presses the Correct function key in an input entry, if all the entered characters are removed (value True) or only the last entered character if any (value False).
   *
   * @param globalCorrectionFlag Indicates, when the user presses the Correct function key in an input entry, if all the entered characters are removed (value True) or only the last entered character if any (value False).
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData globalCorrectionFlag(Boolean globalCorrectionFlag) {
    this.globalCorrectionFlag = globalCorrectionFlag;
    return this;
  }

  /**
   * Indicates, when the user presses the Correct function key in an input entry, if all the entered characters are removed (value True) or only the last entered character if any (value False).
   * @return globalCorrectionFlag Indicates, when the user presses the Correct function key in an input entry, if all the entered characters are removed (value True) or only the last entered character if any (value False).
   */
  @JsonProperty(JSON_PROPERTY_GLOBAL_CORRECTION_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getGlobalCorrectionFlag() {
    return globalCorrectionFlag;
  }

  /**
   * Indicates, when the user presses the Correct function key in an input entry, if all the entered characters are removed (value True) or only the last entered character if any (value False).
   *
   * @param globalCorrectionFlag Indicates, when the user presses the Correct function key in an input entry, if all the entered characters are removed (value True) or only the last entered character if any (value False).
   */
  @JsonProperty(JSON_PROPERTY_GLOBAL_CORRECTION_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGlobalCorrectionFlag(Boolean globalCorrectionFlag) {
    this.globalCorrectionFlag = globalCorrectionFlag;
  }

  /**
   * Indicates if the Cancel function key has to be deactivated (value True).
   *
   * @param disableCancelFlag Indicates if the Cancel function key has to be deactivated (value True).
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData disableCancelFlag(Boolean disableCancelFlag) {
    this.disableCancelFlag = disableCancelFlag;
    return this;
  }

  /**
   * Indicates if the Cancel function key has to be deactivated (value True).
   * @return disableCancelFlag Indicates if the Cancel function key has to be deactivated (value True).
   */
  @JsonProperty(JSON_PROPERTY_DISABLE_CANCEL_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDisableCancelFlag() {
    return disableCancelFlag;
  }

  /**
   * Indicates if the Cancel function key has to be deactivated (value True).
   *
   * @param disableCancelFlag Indicates if the Cancel function key has to be deactivated (value True).
   */
  @JsonProperty(JSON_PROPERTY_DISABLE_CANCEL_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisableCancelFlag(Boolean disableCancelFlag) {
    this.disableCancelFlag = disableCancelFlag;
  }

  /**
   * Indicates if the Correct function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   *
   * @param disableCorrectFlag Indicates if the Correct function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData disableCorrectFlag(Boolean disableCorrectFlag) {
    this.disableCorrectFlag = disableCorrectFlag;
    return this;
  }

  /**
   * Indicates if the Correct function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   * @return disableCorrectFlag Indicates if the Correct function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   */
  @JsonProperty(JSON_PROPERTY_DISABLE_CORRECT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDisableCorrectFlag() {
    return disableCorrectFlag;
  }

  /**
   * Indicates if the Correct function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   *
   * @param disableCorrectFlag Indicates if the Correct function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   */
  @JsonProperty(JSON_PROPERTY_DISABLE_CORRECT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisableCorrectFlag(Boolean disableCorrectFlag) {
    this.disableCorrectFlag = disableCorrectFlag;
  }

  /**
   * Indicates if the Valid function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   *
   * @param disableValidFlag Indicates if the Valid function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData disableValidFlag(Boolean disableValidFlag) {
    this.disableValidFlag = disableValidFlag;
    return this;
  }

  /**
   * Indicates if the Valid function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   * @return disableValidFlag Indicates if the Valid function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   */
  @JsonProperty(JSON_PROPERTY_DISABLE_VALID_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDisableValidFlag() {
    return disableValidFlag;
  }

  /**
   * Indicates if the Valid function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   *
   * @param disableValidFlag Indicates if the Valid function key has to be deactivated (value True). During the processing of an Input command &#x60;GetConfirmation&#x60;, &#x60;SiteManager&#x60;, or &#x60;GetMenuEntry&#x60;.
   */
  @JsonProperty(JSON_PROPERTY_DISABLE_VALID_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisableValidFlag(Boolean disableValidFlag) {
    this.disableValidFlag = disableValidFlag;
  }

  /**
   * If it has the value True, it indicates that the Back function key (respectively Home function key) may be used to go back to the immediate upper level of the menu. If it has the value False, it indicates that the current menu level has no parent menu.
   *
   * @param menuBackFlag If it has the value True, it indicates that the Back function key (respectively Home function key) may be used to go back to the immediate upper level of the menu. If it has the value False, it indicates that the current menu level has no parent menu.
   * @return the current {@code InputData} instance, allowing for method chaining
   */
  public InputData menuBackFlag(Boolean menuBackFlag) {
    this.menuBackFlag = menuBackFlag;
    return this;
  }

  /**
   * If it has the value True, it indicates that the Back function key (respectively Home function key) may be used to go back to the immediate upper level of the menu. If it has the value False, it indicates that the current menu level has no parent menu.
   * @return menuBackFlag If it has the value True, it indicates that the Back function key (respectively Home function key) may be used to go back to the immediate upper level of the menu. If it has the value False, it indicates that the current menu level has no parent menu.
   */
  @JsonProperty(JSON_PROPERTY_MENU_BACK_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getMenuBackFlag() {
    return menuBackFlag;
  }

  /**
   * If it has the value True, it indicates that the Back function key (respectively Home function key) may be used to go back to the immediate upper level of the menu. If it has the value False, it indicates that the current menu level has no parent menu.
   *
   * @param menuBackFlag If it has the value True, it indicates that the Back function key (respectively Home function key) may be used to go back to the immediate upper level of the menu. If it has the value False, it indicates that the current menu level has no parent menu.
   */
  @JsonProperty(JSON_PROPERTY_MENU_BACK_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMenuBackFlag(Boolean menuBackFlag) {
    this.menuBackFlag = menuBackFlag;
  }

  /**
   * Return true if this InputData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputData inputData = (InputData) o;
    return Objects.equals(this.device, inputData.device) &&
        Objects.equals(this.infoQualify, inputData.infoQualify) &&
        Objects.equals(this.inputCommand, inputData.inputCommand) &&
        Objects.equals(this.notifyCardInputFlag, inputData.notifyCardInputFlag) &&
        Objects.equals(this.maxInputTime, inputData.maxInputTime) &&
        Objects.equals(this.immediateResponseFlag, inputData.immediateResponseFlag) &&
        Objects.equals(this.minLength, inputData.minLength) &&
        Objects.equals(this.maxLength, inputData.maxLength) &&
        Objects.equals(this.maxDecimalLength, inputData.maxDecimalLength) &&
        Objects.equals(this.waitUserValidationFlag, inputData.waitUserValidationFlag) &&
        Objects.equals(this.defaultInputString, inputData.defaultInputString) &&
        Objects.equals(this.defaultLayoutString, inputData.defaultLayoutString) &&
        Objects.equals(this.stringMask, inputData.stringMask) &&
        Objects.equals(this.fromRightToLeftFlag, inputData.fromRightToLeftFlag) &&
        Objects.equals(this.maskCharactersFlag, inputData.maskCharactersFlag) &&
        Objects.equals(this.beepKeyFlag, inputData.beepKeyFlag) &&
        Objects.equals(this.globalCorrectionFlag, inputData.globalCorrectionFlag) &&
        Objects.equals(this.disableCancelFlag, inputData.disableCancelFlag) &&
        Objects.equals(this.disableCorrectFlag, inputData.disableCorrectFlag) &&
        Objects.equals(this.disableValidFlag, inputData.disableValidFlag) &&
        Objects.equals(this.menuBackFlag, inputData.menuBackFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(device, infoQualify, inputCommand, notifyCardInputFlag, maxInputTime, immediateResponseFlag, minLength, maxLength, maxDecimalLength, waitUserValidationFlag, defaultInputString, defaultLayoutString, stringMask, fromRightToLeftFlag, maskCharactersFlag, beepKeyFlag, globalCorrectionFlag, disableCancelFlag, disableCorrectFlag, disableValidFlag, menuBackFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputData {\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    infoQualify: ").append(toIndentedString(infoQualify)).append("\n");
    sb.append("    inputCommand: ").append(toIndentedString(inputCommand)).append("\n");
    sb.append("    notifyCardInputFlag: ").append(toIndentedString(notifyCardInputFlag)).append("\n");
    sb.append("    maxInputTime: ").append(toIndentedString(maxInputTime)).append("\n");
    sb.append("    immediateResponseFlag: ").append(toIndentedString(immediateResponseFlag)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    maxDecimalLength: ").append(toIndentedString(maxDecimalLength)).append("\n");
    sb.append("    waitUserValidationFlag: ").append(toIndentedString(waitUserValidationFlag)).append("\n");
    sb.append("    defaultInputString: ").append(toIndentedString(defaultInputString)).append("\n");
    sb.append("    defaultLayoutString: ").append(toIndentedString(defaultLayoutString)).append("\n");
    sb.append("    stringMask: ").append(toIndentedString(stringMask)).append("\n");
    sb.append("    fromRightToLeftFlag: ").append(toIndentedString(fromRightToLeftFlag)).append("\n");
    sb.append("    maskCharactersFlag: ").append(toIndentedString(maskCharactersFlag)).append("\n");
    sb.append("    beepKeyFlag: ").append(toIndentedString(beepKeyFlag)).append("\n");
    sb.append("    globalCorrectionFlag: ").append(toIndentedString(globalCorrectionFlag)).append("\n");
    sb.append("    disableCancelFlag: ").append(toIndentedString(disableCancelFlag)).append("\n");
    sb.append("    disableCorrectFlag: ").append(toIndentedString(disableCorrectFlag)).append("\n");
    sb.append("    disableValidFlag: ").append(toIndentedString(disableValidFlag)).append("\n");
    sb.append("    menuBackFlag: ").append(toIndentedString(menuBackFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of InputData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputData
   * @throws JsonProcessingException if the JSON string is invalid with respect to InputData
   */
  public static InputData fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, InputData.class);
  }
/**
  * Convert an instance of InputData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
