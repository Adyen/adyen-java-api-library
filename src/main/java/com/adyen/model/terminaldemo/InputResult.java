/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.Device;
import com.adyen.model.terminaldemo.InfoQualify;
import com.adyen.model.terminaldemo.Input;
import com.adyen.model.terminaldemo.Response;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * InputResult
 */
@JsonPropertyOrder({
  InputResult.JSON_PROPERTY_DEVICE,
  InputResult.JSON_PROPERTY_INFO_QUALIFY,
  InputResult.JSON_PROPERTY_RESPONSE,
  InputResult.JSON_PROPERTY_INPUT
})

public class InputResult {
  public static final String JSON_PROPERTY_DEVICE = "Device";
  private Device device;

  public static final String JSON_PROPERTY_INFO_QUALIFY = "InfoQualify";
  private InfoQualify infoQualify;

  public static final String JSON_PROPERTY_RESPONSE = "Response";
  private Response response;

  public static final String JSON_PROPERTY_INPUT = "Input";
  private Input input;

  public InputResult() { 
  }

  /**
   * device
   *
   * @param device 
   * @return the current {@code InputResult} instance, allowing for method chaining
   */
  public InputResult device(Device device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device 
   */
  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Device getDevice() {
    return device;
  }

  /**
   * device
   *
   * @param device 
   */
  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDevice(Device device) {
    this.device = device;
  }

  /**
   * infoQualify
   *
   * @param infoQualify 
   * @return the current {@code InputResult} instance, allowing for method chaining
   */
  public InputResult infoQualify(InfoQualify infoQualify) {
    this.infoQualify = infoQualify;
    return this;
  }

  /**
   * Get infoQualify
   * @return infoQualify 
   */
  @JsonProperty(JSON_PROPERTY_INFO_QUALIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InfoQualify getInfoQualify() {
    return infoQualify;
  }

  /**
   * infoQualify
   *
   * @param infoQualify 
   */
  @JsonProperty(JSON_PROPERTY_INFO_QUALIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInfoQualify(InfoQualify infoQualify) {
    this.infoQualify = infoQualify;
  }

  /**
   * response
   *
   * @param response 
   * @return the current {@code InputResult} instance, allowing for method chaining
   */
  public InputResult response(Response response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response 
   */
  @JsonProperty(JSON_PROPERTY_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Response getResponse() {
    return response;
  }

  /**
   * response
   *
   * @param response 
   */
  @JsonProperty(JSON_PROPERTY_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponse(Response response) {
    this.response = response;
  }

  /**
   * input
   *
   * @param input 
   * @return the current {@code InputResult} instance, allowing for method chaining
   */
  public InputResult input(Input input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input 
   */
  @JsonProperty(JSON_PROPERTY_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Input getInput() {
    return input;
  }

  /**
   * input
   *
   * @param input 
   */
  @JsonProperty(JSON_PROPERTY_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInput(Input input) {
    this.input = input;
  }

  /**
   * Return true if this InputResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputResult inputResult = (InputResult) o;
    return Objects.equals(this.device, inputResult.device) &&
        Objects.equals(this.infoQualify, inputResult.infoQualify) &&
        Objects.equals(this.response, inputResult.response) &&
        Objects.equals(this.input, inputResult.input);
  }

  @Override
  public int hashCode() {
    return Objects.hash(device, infoQualify, response, input);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputResult {\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    infoQualify: ").append(toIndentedString(infoQualify)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of InputResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputResult
   * @throws JsonProcessingException if the JSON string is invalid with respect to InputResult
   */
  public static InputResult fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, InputResult.class);
  }
/**
  * Convert an instance of InputResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
