/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.GeographicCoordinates;
import com.adyen.model.terminaldemo.UTMCoordinates;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Geolocation
 */
@JsonPropertyOrder({
  Geolocation.JSON_PROPERTY_GEOGRAPHIC_COORDINATES,
  Geolocation.JSON_PROPERTY_UT_M_COORDINATES
})

public class Geolocation {
  public static final String JSON_PROPERTY_GEOGRAPHIC_COORDINATES = "GeographicCoordinates";
  private GeographicCoordinates geographicCoordinates;

  public static final String JSON_PROPERTY_UT_M_COORDINATES = "UTMCoordinates";
  private UTMCoordinates utMCoordinates;

  public Geolocation() { 
  }

  /**
   * geographicCoordinates
   *
   * @param geographicCoordinates 
   * @return the current {@code Geolocation} instance, allowing for method chaining
   */
  public Geolocation geographicCoordinates(GeographicCoordinates geographicCoordinates) {
    this.geographicCoordinates = geographicCoordinates;
    return this;
  }

  /**
   * Get geographicCoordinates
   * @return geographicCoordinates 
   */
  @JsonProperty(JSON_PROPERTY_GEOGRAPHIC_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public GeographicCoordinates getGeographicCoordinates() {
    return geographicCoordinates;
  }

  /**
   * geographicCoordinates
   *
   * @param geographicCoordinates 
   */
  @JsonProperty(JSON_PROPERTY_GEOGRAPHIC_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGeographicCoordinates(GeographicCoordinates geographicCoordinates) {
    this.geographicCoordinates = geographicCoordinates;
  }

  /**
   * utMCoordinates
   *
   * @param utMCoordinates 
   * @return the current {@code Geolocation} instance, allowing for method chaining
   */
  public Geolocation utMCoordinates(UTMCoordinates utMCoordinates) {
    this.utMCoordinates = utMCoordinates;
    return this;
  }

  /**
   * Get utMCoordinates
   * @return utMCoordinates 
   */
  @JsonProperty(JSON_PROPERTY_UT_M_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UTMCoordinates getUtMCoordinates() {
    return utMCoordinates;
  }

  /**
   * utMCoordinates
   *
   * @param utMCoordinates 
   */
  @JsonProperty(JSON_PROPERTY_UT_M_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUtMCoordinates(UTMCoordinates utMCoordinates) {
    this.utMCoordinates = utMCoordinates;
  }

  /**
   * Return true if this Geolocation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Geolocation geolocation = (Geolocation) o;
    return Objects.equals(this.geographicCoordinates, geolocation.geographicCoordinates) &&
        Objects.equals(this.utMCoordinates, geolocation.utMCoordinates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(geographicCoordinates, utMCoordinates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Geolocation {\n");
    sb.append("    geographicCoordinates: ").append(toIndentedString(geographicCoordinates)).append("\n");
    sb.append("    utMCoordinates: ").append(toIndentedString(utMCoordinates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of Geolocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Geolocation
   * @throws JsonProcessingException if the JSON string is invalid with respect to Geolocation
   */
  public static Geolocation fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Geolocation.class);
  }
/**
  * Convert an instance of Geolocation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
