/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Various amounts related to the payment request from the Sale System.
 */
@JsonPropertyOrder({
  AmountsReq.JSON_PROPERTY_CURRENCY,
  AmountsReq.JSON_PROPERTY_REQUESTED_AMOUNT,
  AmountsReq.JSON_PROPERTY_CASH_BACK_AMOUNT,
  AmountsReq.JSON_PROPERTY_TIP_AMOUNT,
  AmountsReq.JSON_PROPERTY_PAID_AMOUNT,
  AmountsReq.JSON_PROPERTY_MINIMUM_AMOUNT_TO_DELIVER,
  AmountsReq.JSON_PROPERTY_MAXIMUM_CASH_BACK_AMOUNT,
  AmountsReq.JSON_PROPERTY_MINIMUM_SPLIT_AMOUNT
})

public class AmountsReq {
  public static final String JSON_PROPERTY_CURRENCY = "Currency";
  private String currency;

  public static final String JSON_PROPERTY_REQUESTED_AMOUNT = "RequestedAmount";
  private BigDecimal requestedAmount;

  public static final String JSON_PROPERTY_CASH_BACK_AMOUNT = "CashBackAmount";
  private BigDecimal cashBackAmount;

  public static final String JSON_PROPERTY_TIP_AMOUNT = "TipAmount";
  private BigDecimal tipAmount;

  public static final String JSON_PROPERTY_PAID_AMOUNT = "PaidAmount";
  private BigDecimal paidAmount;

  public static final String JSON_PROPERTY_MINIMUM_AMOUNT_TO_DELIVER = "MinimumAmountToDeliver";
  private BigDecimal minimumAmountToDeliver;

  public static final String JSON_PROPERTY_MAXIMUM_CASH_BACK_AMOUNT = "MaximumCashBackAmount";
  private BigDecimal maximumCashBackAmount;

  public static final String JSON_PROPERTY_MINIMUM_SPLIT_AMOUNT = "MinimumSplitAmount";
  private BigDecimal minimumSplitAmount;

  public AmountsReq() { 
  }

  /**
   * Currency of a monetary amount.
   *
   * @param currency Currency of a monetary amount.
   * @return the current {@code AmountsReq} instance, allowing for method chaining
   */
  public AmountsReq currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of a monetary amount.
   * @return currency Currency of a monetary amount.
   */
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCurrency() {
    return currency;
  }

  /**
   * Currency of a monetary amount.
   *
   * @param currency Currency of a monetary amount.
   */
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }

  /**
   * Amount requested by the Sale for the payment.
   *
   * @param requestedAmount Amount requested by the Sale for the payment.
   * @return the current {@code AmountsReq} instance, allowing for method chaining
   */
  public AmountsReq requestedAmount(BigDecimal requestedAmount) {
    this.requestedAmount = requestedAmount;
    return this;
  }

  /**
   * Amount requested by the Sale for the payment.
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return requestedAmount Amount requested by the Sale for the payment.
   */
  @JsonProperty(JSON_PROPERTY_REQUESTED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BigDecimal getRequestedAmount() {
    return requestedAmount;
  }

  /**
   * Amount requested by the Sale for the payment.
   *
   * @param requestedAmount Amount requested by the Sale for the payment.
   */
  @JsonProperty(JSON_PROPERTY_REQUESTED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestedAmount(BigDecimal requestedAmount) {
    this.requestedAmount = requestedAmount;
  }

  /**
   * The cash-back part of the amount requested by the Sale for the payment.
   *
   * @param cashBackAmount The cash-back part of the amount requested by the Sale for the payment.
   * @return the current {@code AmountsReq} instance, allowing for method chaining
   */
  public AmountsReq cashBackAmount(BigDecimal cashBackAmount) {
    this.cashBackAmount = cashBackAmount;
    return this;
  }

  /**
   * The cash-back part of the amount requested by the Sale for the payment.
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return cashBackAmount The cash-back part of the amount requested by the Sale for the payment.
   */
  @JsonProperty(JSON_PROPERTY_CASH_BACK_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BigDecimal getCashBackAmount() {
    return cashBackAmount;
  }

  /**
   * The cash-back part of the amount requested by the Sale for the payment.
   *
   * @param cashBackAmount The cash-back part of the amount requested by the Sale for the payment.
   */
  @JsonProperty(JSON_PROPERTY_CASH_BACK_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCashBackAmount(BigDecimal cashBackAmount) {
    this.cashBackAmount = cashBackAmount;
  }

  /**
   * Amount paid for a tip. Allow the printing of the tip on the receipt, and to qualify the tip part of the amount.
   *
   * @param tipAmount Amount paid for a tip. Allow the printing of the tip on the receipt, and to qualify the tip part of the amount.
   * @return the current {@code AmountsReq} instance, allowing for method chaining
   */
  public AmountsReq tipAmount(BigDecimal tipAmount) {
    this.tipAmount = tipAmount;
    return this;
  }

  /**
   * Amount paid for a tip. Allow the printing of the tip on the receipt, and to qualify the tip part of the amount.
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return tipAmount Amount paid for a tip. Allow the printing of the tip on the receipt, and to qualify the tip part of the amount.
   */
  @JsonProperty(JSON_PROPERTY_TIP_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BigDecimal getTipAmount() {
    return tipAmount;
  }

  /**
   * Amount paid for a tip. Allow the printing of the tip on the receipt, and to qualify the tip part of the amount.
   *
   * @param tipAmount Amount paid for a tip. Allow the printing of the tip on the receipt, and to qualify the tip part of the amount.
   */
  @JsonProperty(JSON_PROPERTY_TIP_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTipAmount(BigDecimal tipAmount) {
    this.tipAmount = tipAmount;
  }

  /**
   * Amount already paid in case of split payment. Depending on the context, a split payment is either a split amount, or a split basket (required by some payment means as fleet cards). The PaidAmount is present when the split payment is a split      of the amount. Split of the basket involves two Sale Transactions, and does not have to be recognised by      the POI.
   *
   * @param paidAmount Amount already paid in case of split payment. Depending on the context, a split payment is either a split amount, or a split basket (required by some payment means as fleet cards). The PaidAmount is present when the split payment is a split      of the amount. Split of the basket involves two Sale Transactions, and does not have to be recognised by      the POI.
   * @return the current {@code AmountsReq} instance, allowing for method chaining
   */
  public AmountsReq paidAmount(BigDecimal paidAmount) {
    this.paidAmount = paidAmount;
    return this;
  }

  /**
   * Amount already paid in case of split payment. Depending on the context, a split payment is either a split amount, or a split basket (required by some payment means as fleet cards). The PaidAmount is present when the split payment is a split      of the amount. Split of the basket involves two Sale Transactions, and does not have to be recognised by      the POI.
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return paidAmount Amount already paid in case of split payment. Depending on the context, a split payment is either a split amount, or a split basket (required by some payment means as fleet cards). The PaidAmount is present when the split payment is a split      of the amount. Split of the basket involves two Sale Transactions, and does not have to be recognised by      the POI.
   */
  @JsonProperty(JSON_PROPERTY_PAID_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BigDecimal getPaidAmount() {
    return paidAmount;
  }

  /**
   * Amount already paid in case of split payment. Depending on the context, a split payment is either a split amount, or a split basket (required by some payment means as fleet cards). The PaidAmount is present when the split payment is a split      of the amount. Split of the basket involves two Sale Transactions, and does not have to be recognised by      the POI.
   *
   * @param paidAmount Amount already paid in case of split payment. Depending on the context, a split payment is either a split amount, or a split basket (required by some payment means as fleet cards). The PaidAmount is present when the split payment is a split      of the amount. Split of the basket involves two Sale Transactions, and does not have to be recognised by      the POI.
   */
  @JsonProperty(JSON_PROPERTY_PAID_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaidAmount(BigDecimal paidAmount) {
    this.paidAmount = paidAmount;
  }

  /**
   * Minimum amount the Sale System is allowed to deliver for this payment. For the OneTimeReservation, when the maximum amount is unknown, the Sale System indicates the minimum amount it allows.
   *
   * @param minimumAmountToDeliver Minimum amount the Sale System is allowed to deliver for this payment. For the OneTimeReservation, when the maximum amount is unknown, the Sale System indicates the minimum amount it allows.
   * @return the current {@code AmountsReq} instance, allowing for method chaining
   */
  public AmountsReq minimumAmountToDeliver(BigDecimal minimumAmountToDeliver) {
    this.minimumAmountToDeliver = minimumAmountToDeliver;
    return this;
  }

  /**
   * Minimum amount the Sale System is allowed to deliver for this payment. For the OneTimeReservation, when the maximum amount is unknown, the Sale System indicates the minimum amount it allows.
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return minimumAmountToDeliver Minimum amount the Sale System is allowed to deliver for this payment. For the OneTimeReservation, when the maximum amount is unknown, the Sale System indicates the minimum amount it allows.
   */
  @JsonProperty(JSON_PROPERTY_MINIMUM_AMOUNT_TO_DELIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BigDecimal getMinimumAmountToDeliver() {
    return minimumAmountToDeliver;
  }

  /**
   * Minimum amount the Sale System is allowed to deliver for this payment. For the OneTimeReservation, when the maximum amount is unknown, the Sale System indicates the minimum amount it allows.
   *
   * @param minimumAmountToDeliver Minimum amount the Sale System is allowed to deliver for this payment. For the OneTimeReservation, when the maximum amount is unknown, the Sale System indicates the minimum amount it allows.
   */
  @JsonProperty(JSON_PROPERTY_MINIMUM_AMOUNT_TO_DELIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumAmountToDeliver(BigDecimal minimumAmountToDeliver) {
    this.minimumAmountToDeliver = minimumAmountToDeliver;
  }

  /**
   * Maximum amount which could be requested for cash-back to the Sale System. Allows the Cashier    to limit the amount value of cash-back to deliver to the Customer.
   *
   * @param maximumCashBackAmount Maximum amount which could be requested for cash-back to the Sale System. Allows the Cashier    to limit the amount value of cash-back to deliver to the Customer.
   * @return the current {@code AmountsReq} instance, allowing for method chaining
   */
  public AmountsReq maximumCashBackAmount(BigDecimal maximumCashBackAmount) {
    this.maximumCashBackAmount = maximumCashBackAmount;
    return this;
  }

  /**
   * Maximum amount which could be requested for cash-back to the Sale System. Allows the Cashier    to limit the amount value of cash-back to deliver to the Customer.
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return maximumCashBackAmount Maximum amount which could be requested for cash-back to the Sale System. Allows the Cashier    to limit the amount value of cash-back to deliver to the Customer.
   */
  @JsonProperty(JSON_PROPERTY_MAXIMUM_CASH_BACK_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BigDecimal getMaximumCashBackAmount() {
    return maximumCashBackAmount;
  }

  /**
   * Maximum amount which could be requested for cash-back to the Sale System. Allows the Cashier    to limit the amount value of cash-back to deliver to the Customer.
   *
   * @param maximumCashBackAmount Maximum amount which could be requested for cash-back to the Sale System. Allows the Cashier    to limit the amount value of cash-back to deliver to the Customer.
   */
  @JsonProperty(JSON_PROPERTY_MAXIMUM_CASH_BACK_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumCashBackAmount(BigDecimal maximumCashBackAmount) {
    this.maximumCashBackAmount = maximumCashBackAmount;
  }

  /**
   * Minimum amount of a split, which could be requested by a Customer.Allows the Merchant to limit the number of split requested by the Customer.
   *
   * @param minimumSplitAmount Minimum amount of a split, which could be requested by a Customer.Allows the Merchant to limit the number of split requested by the Customer.
   * @return the current {@code AmountsReq} instance, allowing for method chaining
   */
  public AmountsReq minimumSplitAmount(BigDecimal minimumSplitAmount) {
    this.minimumSplitAmount = minimumSplitAmount;
    return this;
  }

  /**
   * Minimum amount of a split, which could be requested by a Customer.Allows the Merchant to limit the number of split requested by the Customer.
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return minimumSplitAmount Minimum amount of a split, which could be requested by a Customer.Allows the Merchant to limit the number of split requested by the Customer.
   */
  @JsonProperty(JSON_PROPERTY_MINIMUM_SPLIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BigDecimal getMinimumSplitAmount() {
    return minimumSplitAmount;
  }

  /**
   * Minimum amount of a split, which could be requested by a Customer.Allows the Merchant to limit the number of split requested by the Customer.
   *
   * @param minimumSplitAmount Minimum amount of a split, which could be requested by a Customer.Allows the Merchant to limit the number of split requested by the Customer.
   */
  @JsonProperty(JSON_PROPERTY_MINIMUM_SPLIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumSplitAmount(BigDecimal minimumSplitAmount) {
    this.minimumSplitAmount = minimumSplitAmount;
  }

  /**
   * Return true if this AmountsReq object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmountsReq amountsReq = (AmountsReq) o;
    return Objects.equals(this.currency, amountsReq.currency) &&
        Objects.equals(this.requestedAmount, amountsReq.requestedAmount) &&
        Objects.equals(this.cashBackAmount, amountsReq.cashBackAmount) &&
        Objects.equals(this.tipAmount, amountsReq.tipAmount) &&
        Objects.equals(this.paidAmount, amountsReq.paidAmount) &&
        Objects.equals(this.minimumAmountToDeliver, amountsReq.minimumAmountToDeliver) &&
        Objects.equals(this.maximumCashBackAmount, amountsReq.maximumCashBackAmount) &&
        Objects.equals(this.minimumSplitAmount, amountsReq.minimumSplitAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, requestedAmount, cashBackAmount, tipAmount, paidAmount, minimumAmountToDeliver, maximumCashBackAmount, minimumSplitAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmountsReq {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    requestedAmount: ").append(toIndentedString(requestedAmount)).append("\n");
    sb.append("    cashBackAmount: ").append(toIndentedString(cashBackAmount)).append("\n");
    sb.append("    tipAmount: ").append(toIndentedString(tipAmount)).append("\n");
    sb.append("    paidAmount: ").append(toIndentedString(paidAmount)).append("\n");
    sb.append("    minimumAmountToDeliver: ").append(toIndentedString(minimumAmountToDeliver)).append("\n");
    sb.append("    maximumCashBackAmount: ").append(toIndentedString(maximumCashBackAmount)).append("\n");
    sb.append("    minimumSplitAmount: ").append(toIndentedString(minimumSplitAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of AmountsReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmountsReq
   * @throws JsonProcessingException if the JSON string is invalid with respect to AmountsReq
   */
  public static AmountsReq fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, AmountsReq.class);
  }
/**
  * Convert an instance of AmountsReq to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
