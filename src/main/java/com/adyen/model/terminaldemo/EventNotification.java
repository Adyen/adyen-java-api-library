/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.DisplayOutput;
import com.adyen.model.terminaldemo.EventToNotify;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Content of the EventNotification message. It conveys Information related to the event, and possible action (maintenance, message to display).
 */
@JsonPropertyOrder({
  EventNotification.JSON_PROPERTY_TIME_STAMP,
  EventNotification.JSON_PROPERTY_EVENT_TO_NOTIFY,
  EventNotification.JSON_PROPERTY_EVENT_DETAILS,
  EventNotification.JSON_PROPERTY_REJECTED_MESSAGE,
  EventNotification.JSON_PROPERTY_MAINTENANCE_REQUIRED_FLAG,
  EventNotification.JSON_PROPERTY_DISPLAY_OUTPUT
})

public class EventNotification {
  public static final String JSON_PROPERTY_TIME_STAMP = "TimeStamp";
  private OffsetDateTime timeStamp;

  public static final String JSON_PROPERTY_EVENT_TO_NOTIFY = "EventToNotify";
  private EventToNotify eventToNotify;

  public static final String JSON_PROPERTY_EVENT_DETAILS = "EventDetails";
  private String eventDetails;

  public static final String JSON_PROPERTY_REJECTED_MESSAGE = "RejectedMessage";
  private byte[] rejectedMessage;

  public static final String JSON_PROPERTY_MAINTENANCE_REQUIRED_FLAG = "MaintenanceRequiredFlag";
  private Boolean maintenanceRequiredFlag;

  public static final String JSON_PROPERTY_DISPLAY_OUTPUT = "DisplayOutput";
  private List<DisplayOutput> displayOutput;

  public EventNotification() { 
  }

  /**
   * Date and time of a transaction for the Sale System, the POI System or the Acquirer.
   *
   * @param timeStamp Date and time of a transaction for the Sale System, the POI System or the Acquirer.
   * @return the current {@code EventNotification} instance, allowing for method chaining
   */
  public EventNotification timeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Date and time of a transaction for the Sale System, the POI System or the Acquirer.
   * @return timeStamp Date and time of a transaction for the Sale System, the POI System or the Acquirer.
   */
  @JsonProperty(JSON_PROPERTY_TIME_STAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getTimeStamp() {
    return timeStamp;
  }

  /**
   * Date and time of a transaction for the Sale System, the POI System or the Acquirer.
   *
   * @param timeStamp Date and time of a transaction for the Sale System, the POI System or the Acquirer.
   */
  @JsonProperty(JSON_PROPERTY_TIME_STAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
  }

  /**
   * eventToNotify
   *
   * @param eventToNotify 
   * @return the current {@code EventNotification} instance, allowing for method chaining
   */
  public EventNotification eventToNotify(EventToNotify eventToNotify) {
    this.eventToNotify = eventToNotify;
    return this;
  }

  /**
   * Get eventToNotify
   * @return eventToNotify 
   */
  @JsonProperty(JSON_PROPERTY_EVENT_TO_NOTIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public EventToNotify getEventToNotify() {
    return eventToNotify;
  }

  /**
   * eventToNotify
   *
   * @param eventToNotify 
   */
  @JsonProperty(JSON_PROPERTY_EVENT_TO_NOTIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventToNotify(EventToNotify eventToNotify) {
    this.eventToNotify = eventToNotify;
  }

  /**
   * Information about the event the POI notifies to the Sale System. If present, the Sale logs it for further examination.
   *
   * @param eventDetails Information about the event the POI notifies to the Sale System. If present, the Sale logs it for further examination.
   * @return the current {@code EventNotification} instance, allowing for method chaining
   */
  public EventNotification eventDetails(String eventDetails) {
    this.eventDetails = eventDetails;
    return this;
  }

  /**
   * Information about the event the POI notifies to the Sale System. If present, the Sale logs it for further examination.
   * @return eventDetails Information about the event the POI notifies to the Sale System. If present, the Sale logs it for further examination.
   */
  @JsonProperty(JSON_PROPERTY_EVENT_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEventDetails() {
    return eventDetails;
  }

  /**
   * Information about the event the POI notifies to the Sale System. If present, the Sale logs it for further examination.
   *
   * @param eventDetails Information about the event the POI notifies to the Sale System. If present, the Sale logs it for further examination.
   */
  @JsonProperty(JSON_PROPERTY_EVENT_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventDetails(String eventDetails) {
    this.eventDetails = eventDetails;
  }

  /**
   * Message request rejected by the receiver. Mandatory if EventToNotify is Reject, absent in other cases.
   *
   * @param rejectedMessage Message request rejected by the receiver. Mandatory if EventToNotify is Reject, absent in other cases.
   * @return the current {@code EventNotification} instance, allowing for method chaining
   */
  public EventNotification rejectedMessage(byte[] rejectedMessage) {
    this.rejectedMessage = rejectedMessage;
    return this;
  }

  /**
   * Message request rejected by the receiver. Mandatory if EventToNotify is Reject, absent in other cases.
   * @return rejectedMessage Message request rejected by the receiver. Mandatory if EventToNotify is Reject, absent in other cases.
   */
  @JsonProperty(JSON_PROPERTY_REJECTED_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public byte[] getRejectedMessage() {
    return rejectedMessage;
  }

  /**
   * Message request rejected by the receiver. Mandatory if EventToNotify is Reject, absent in other cases.
   *
   * @param rejectedMessage Message request rejected by the receiver. Mandatory if EventToNotify is Reject, absent in other cases.
   */
  @JsonProperty(JSON_PROPERTY_REJECTED_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRejectedMessage(byte[] rejectedMessage) {
    this.rejectedMessage = rejectedMessage;
  }

  /**
   * Indicates if the occurred event requires maintenance call or action.
   *
   * @param maintenanceRequiredFlag Indicates if the occurred event requires maintenance call or action.
   * @return the current {@code EventNotification} instance, allowing for method chaining
   */
  public EventNotification maintenanceRequiredFlag(Boolean maintenanceRequiredFlag) {
    this.maintenanceRequiredFlag = maintenanceRequiredFlag;
    return this;
  }

  /**
   * Indicates if the occurred event requires maintenance call or action.
   * @return maintenanceRequiredFlag Indicates if the occurred event requires maintenance call or action.
   */
  @JsonProperty(JSON_PROPERTY_MAINTENANCE_REQUIRED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getMaintenanceRequiredFlag() {
    return maintenanceRequiredFlag;
  }

  /**
   * Indicates if the occurred event requires maintenance call or action.
   *
   * @param maintenanceRequiredFlag Indicates if the occurred event requires maintenance call or action.
   */
  @JsonProperty(JSON_PROPERTY_MAINTENANCE_REQUIRED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaintenanceRequiredFlag(Boolean maintenanceRequiredFlag) {
    this.maintenanceRequiredFlag = maintenanceRequiredFlag;
  }

  /**
   * Information to display and the way to process the display. To display an event message.
   *
   * @param displayOutput Information to display and the way to process the display. To display an event message.
   * @return the current {@code EventNotification} instance, allowing for method chaining
   */
  public EventNotification displayOutput(List<DisplayOutput> displayOutput) {
    this.displayOutput = displayOutput;
    return this;
  }

  public EventNotification addDisplayOutputItem(DisplayOutput displayOutputItem) {
    if (this.displayOutput == null) {
      this.displayOutput = new ArrayList<>();
    }
    this.displayOutput.add(displayOutputItem);
    return this;
  }

  /**
   * Information to display and the way to process the display. To display an event message.
   * @return displayOutput Information to display and the way to process the display. To display an event message.
   */
  @JsonProperty(JSON_PROPERTY_DISPLAY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<DisplayOutput> getDisplayOutput() {
    return displayOutput;
  }

  /**
   * Information to display and the way to process the display. To display an event message.
   *
   * @param displayOutput Information to display and the way to process the display. To display an event message.
   */
  @JsonProperty(JSON_PROPERTY_DISPLAY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayOutput(List<DisplayOutput> displayOutput) {
    this.displayOutput = displayOutput;
  }

  /**
   * Return true if this EventNotification object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventNotification eventNotification = (EventNotification) o;
    return Objects.equals(this.timeStamp, eventNotification.timeStamp) &&
        Objects.equals(this.eventToNotify, eventNotification.eventToNotify) &&
        Objects.equals(this.eventDetails, eventNotification.eventDetails) &&
        Arrays.equals(this.rejectedMessage, eventNotification.rejectedMessage) &&
        Objects.equals(this.maintenanceRequiredFlag, eventNotification.maintenanceRequiredFlag) &&
        Objects.equals(this.displayOutput, eventNotification.displayOutput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeStamp, eventToNotify, eventDetails, Arrays.hashCode(rejectedMessage), maintenanceRequiredFlag, displayOutput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventNotification {\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    eventToNotify: ").append(toIndentedString(eventToNotify)).append("\n");
    sb.append("    eventDetails: ").append(toIndentedString(eventDetails)).append("\n");
    sb.append("    rejectedMessage: ").append(toIndentedString(rejectedMessage)).append("\n");
    sb.append("    maintenanceRequiredFlag: ").append(toIndentedString(maintenanceRequiredFlag)).append("\n");
    sb.append("    displayOutput: ").append(toIndentedString(displayOutput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of EventNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventNotification
   * @throws JsonProcessingException if the JSON string is invalid with respect to EventNotification
   */
  public static EventNotification fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, EventNotification.class);
  }
/**
  * Convert an instance of EventNotification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
