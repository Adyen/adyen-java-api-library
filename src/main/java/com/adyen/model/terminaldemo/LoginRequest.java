/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.SaleSoftware;
import com.adyen.model.terminaldemo.SaleTerminalData;
import com.adyen.model.terminaldemo.TokenRequestedType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * It conveys information related to the session (period between a Login and the following Logout) to process. Content of the &#x60;LoginRequest&#x60; message.
 */
@JsonPropertyOrder({
  LoginRequest.JSON_PROPERTY_DATE_TIME,
  LoginRequest.JSON_PROPERTY_SALE_SOFTWARE,
  LoginRequest.JSON_PROPERTY_SALE_TERMINAL_DATA,
  LoginRequest.JSON_PROPERTY_TRAINING_MODE_FLAG,
  LoginRequest.JSON_PROPERTY_OPERATOR_LANGUAGE,
  LoginRequest.JSON_PROPERTY_OPERATOR_I_D,
  LoginRequest.JSON_PROPERTY_SHIFT_NUMBER,
  LoginRequest.JSON_PROPERTY_TOKEN_REQUESTED_TYPE,
  LoginRequest.JSON_PROPERTY_CUSTOMER_ORDER_REQ,
  LoginRequest.JSON_PROPERTY_PO_I_SERIAL_NUMBER
})

public class LoginRequest {
  public static final String JSON_PROPERTY_DATE_TIME = "DateTime";
  private OffsetDateTime dateTime;

  public static final String JSON_PROPERTY_SALE_SOFTWARE = "SaleSoftware";
  private SaleSoftware saleSoftware;

  public static final String JSON_PROPERTY_SALE_TERMINAL_DATA = "SaleTerminalData";
  private SaleTerminalData saleTerminalData;

  public static final String JSON_PROPERTY_TRAINING_MODE_FLAG = "TrainingModeFlag";
  private Boolean trainingModeFlag;

  public static final String JSON_PROPERTY_OPERATOR_LANGUAGE = "OperatorLanguage";
  private String operatorLanguage;

  public static final String JSON_PROPERTY_OPERATOR_I_D = "OperatorID";
  private String operatorID;

  public static final String JSON_PROPERTY_SHIFT_NUMBER = "ShiftNumber";
  private String shiftNumber;

  public static final String JSON_PROPERTY_TOKEN_REQUESTED_TYPE = "TokenRequestedType";
  private TokenRequestedType tokenRequestedType;

  /**
   * Gets or Sets customerOrderReq
   */
  public enum CustomerOrderReqEnum {

    BOTH(String.valueOf("Both")),

    CLOSED(String.valueOf("Closed")),

    OPEN(String.valueOf("Open"));

    private static final Logger LOG = Logger.getLogger(CustomerOrderReqEnum.class.getName());

    private String value;

    CustomerOrderReqEnum(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CustomerOrderReqEnum fromValue(String value) {
      for (CustomerOrderReqEnum b : CustomerOrderReqEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      // handling unexpected value
      LOG.warning("CustomerOrderReqEnum: unexpected enum value '" + value + "' - Supported values are "+ Arrays.toString(CustomerOrderReqEnum.values()));
      return null;
    }
  }

  public static final String JSON_PROPERTY_CUSTOMER_ORDER_REQ = "CustomerOrderReq";
  private List<CustomerOrderReqEnum> customerOrderReq;

  public static final String JSON_PROPERTY_PO_I_SERIAL_NUMBER = "POISerialNumber";
  private String poISerialNumber;

  public LoginRequest() { 
  }

  /**
   * Date and Time. In the Login request message, the Sale System gives its date and time to the POI System. In the Login response, the POI System gives its date and time to the Sale System.
   *
   * @param dateTime Date and Time. In the Login request message, the Sale System gives its date and time to the POI System. In the Login response, the POI System gives its date and time to the Sale System.
   * @return the current {@code LoginRequest} instance, allowing for method chaining
   */
  public LoginRequest dateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Date and Time. In the Login request message, the Sale System gives its date and time to the POI System. In the Login response, the POI System gives its date and time to the Sale System.
   * @return dateTime Date and Time. In the Login request message, the Sale System gives its date and time to the POI System. In the Login response, the POI System gives its date and time to the Sale System.
   */
  @JsonProperty(JSON_PROPERTY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getDateTime() {
    return dateTime;
  }

  /**
   * Date and Time. In the Login request message, the Sale System gives its date and time to the POI System. In the Login response, the POI System gives its date and time to the Sale System.
   *
   * @param dateTime Date and Time. In the Login request message, the Sale System gives its date and time to the POI System. In the Login response, the POI System gives its date and time to the Sale System.
   */
  @JsonProperty(JSON_PROPERTY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
  }

  /**
   * saleSoftware
   *
   * @param saleSoftware 
   * @return the current {@code LoginRequest} instance, allowing for method chaining
   */
  public LoginRequest saleSoftware(SaleSoftware saleSoftware) {
    this.saleSoftware = saleSoftware;
    return this;
  }

  /**
   * Get saleSoftware
   * @return saleSoftware 
   */
  @JsonProperty(JSON_PROPERTY_SALE_SOFTWARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SaleSoftware getSaleSoftware() {
    return saleSoftware;
  }

  /**
   * saleSoftware
   *
   * @param saleSoftware 
   */
  @JsonProperty(JSON_PROPERTY_SALE_SOFTWARE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaleSoftware(SaleSoftware saleSoftware) {
    this.saleSoftware = saleSoftware;
  }

  /**
   * saleTerminalData
   *
   * @param saleTerminalData 
   * @return the current {@code LoginRequest} instance, allowing for method chaining
   */
  public LoginRequest saleTerminalData(SaleTerminalData saleTerminalData) {
    this.saleTerminalData = saleTerminalData;
    return this;
  }

  /**
   * Get saleTerminalData
   * @return saleTerminalData 
   */
  @JsonProperty(JSON_PROPERTY_SALE_TERMINAL_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SaleTerminalData getSaleTerminalData() {
    return saleTerminalData;
  }

  /**
   * saleTerminalData
   *
   * @param saleTerminalData 
   */
  @JsonProperty(JSON_PROPERTY_SALE_TERMINAL_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaleTerminalData(SaleTerminalData saleTerminalData) {
    this.saleTerminalData = saleTerminalData;
  }

  /**
   * Training mode. This flag indicates to the POI that the entire session will be not used to make real transaction, but is used for test of system or operator training.
   *
   * @param trainingModeFlag Training mode. This flag indicates to the POI that the entire session will be not used to make real transaction, but is used for test of system or operator training.
   * @return the current {@code LoginRequest} instance, allowing for method chaining
   */
  public LoginRequest trainingModeFlag(Boolean trainingModeFlag) {
    this.trainingModeFlag = trainingModeFlag;
    return this;
  }

  /**
   * Training mode. This flag indicates to the POI that the entire session will be not used to make real transaction, but is used for test of system or operator training.
   * @return trainingModeFlag Training mode. This flag indicates to the POI that the entire session will be not used to make real transaction, but is used for test of system or operator training.
   */
  @JsonProperty(JSON_PROPERTY_TRAINING_MODE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTrainingModeFlag() {
    return trainingModeFlag;
  }

  /**
   * Training mode. This flag indicates to the POI that the entire session will be not used to make real transaction, but is used for test of system or operator training.
   *
   * @param trainingModeFlag Training mode. This flag indicates to the POI that the entire session will be not used to make real transaction, but is used for test of system or operator training.
   */
  @JsonProperty(JSON_PROPERTY_TRAINING_MODE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrainingModeFlag(Boolean trainingModeFlag) {
    this.trainingModeFlag = trainingModeFlag;
  }

  /**
   * Language of the Cashier or Operator. Default value for Device type displays.
   *
   * @param operatorLanguage Language of the Cashier or Operator. Default value for Device type displays.
   * @return the current {@code LoginRequest} instance, allowing for method chaining
   */
  public LoginRequest operatorLanguage(String operatorLanguage) {
    this.operatorLanguage = operatorLanguage;
    return this;
  }

  /**
   * Language of the Cashier or Operator. Default value for Device type displays.
   * @return operatorLanguage Language of the Cashier or Operator. Default value for Device type displays.
   */
  @JsonProperty(JSON_PROPERTY_OPERATOR_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOperatorLanguage() {
    return operatorLanguage;
  }

  /**
   * Language of the Cashier or Operator. Default value for Device type displays.
   *
   * @param operatorLanguage Language of the Cashier or Operator. Default value for Device type displays.
   */
  @JsonProperty(JSON_PROPERTY_OPERATOR_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperatorLanguage(String operatorLanguage) {
    this.operatorLanguage = operatorLanguage;
  }

  /**
   * Identification of the Cashier or Operator. Four conditions to send it: * The Sale System wants the POI to log it in the transaction log. * Because of reconciliation with total on OperatorID. * Because the POI needs it. * Acquirer or issuer need it.
   *
   * @param operatorID Identification of the Cashier or Operator. Four conditions to send it: * The Sale System wants the POI to log it in the transaction log. * Because of reconciliation with total on OperatorID. * Because the POI needs it. * Acquirer or issuer need it.
   * @return the current {@code LoginRequest} instance, allowing for method chaining
   */
  public LoginRequest operatorID(String operatorID) {
    this.operatorID = operatorID;
    return this;
  }

  /**
   * Identification of the Cashier or Operator. Four conditions to send it: * The Sale System wants the POI to log it in the transaction log. * Because of reconciliation with total on OperatorID. * Because the POI needs it. * Acquirer or issuer need it.
   * @return operatorID Identification of the Cashier or Operator. Four conditions to send it: * The Sale System wants the POI to log it in the transaction log. * Because of reconciliation with total on OperatorID. * Because the POI needs it. * Acquirer or issuer need it.
   */
  @JsonProperty(JSON_PROPERTY_OPERATOR_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOperatorID() {
    return operatorID;
  }

  /**
   * Identification of the Cashier or Operator. Four conditions to send it: * The Sale System wants the POI to log it in the transaction log. * Because of reconciliation with total on OperatorID. * Because the POI needs it. * Acquirer or issuer need it.
   *
   * @param operatorID Identification of the Cashier or Operator. Four conditions to send it: * The Sale System wants the POI to log it in the transaction log. * Because of reconciliation with total on OperatorID. * Because the POI needs it. * Acquirer or issuer need it.
   */
  @JsonProperty(JSON_PROPERTY_OPERATOR_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperatorID(String operatorID) {
    this.operatorID = operatorID;
  }

  /**
   * Shift number. Same as OperatorID.
   *
   * @param shiftNumber Shift number. Same as OperatorID.
   * @return the current {@code LoginRequest} instance, allowing for method chaining
   */
  public LoginRequest shiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
    return this;
  }

  /**
   * Shift number. Same as OperatorID.
   * @return shiftNumber Shift number. Same as OperatorID.
   */
  @JsonProperty(JSON_PROPERTY_SHIFT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getShiftNumber() {
    return shiftNumber;
  }

  /**
   * Shift number. Same as OperatorID.
   *
   * @param shiftNumber Shift number. Same as OperatorID.
   */
  @JsonProperty(JSON_PROPERTY_SHIFT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
  }

  /**
   * tokenRequestedType
   *
   * @param tokenRequestedType 
   * @return the current {@code LoginRequest} instance, allowing for method chaining
   */
  public LoginRequest tokenRequestedType(TokenRequestedType tokenRequestedType) {
    this.tokenRequestedType = tokenRequestedType;
    return this;
  }

  /**
   * Get tokenRequestedType
   * @return tokenRequestedType 
   */
  @JsonProperty(JSON_PROPERTY_TOKEN_REQUESTED_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TokenRequestedType getTokenRequestedType() {
    return tokenRequestedType;
  }

  /**
   * tokenRequestedType
   *
   * @param tokenRequestedType 
   */
  @JsonProperty(JSON_PROPERTY_TOKEN_REQUESTED_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTokenRequestedType(TokenRequestedType tokenRequestedType) {
    this.tokenRequestedType = tokenRequestedType;
  }

  /**
   * List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   *
   * @param customerOrderReq List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   * @return the current {@code LoginRequest} instance, allowing for method chaining
   */
  public LoginRequest customerOrderReq(List<CustomerOrderReqEnum> customerOrderReq) {
    this.customerOrderReq = customerOrderReq;
    return this;
  }

  public LoginRequest addCustomerOrderReqItem(CustomerOrderReqEnum customerOrderReqItem) {
    if (this.customerOrderReq == null) {
      this.customerOrderReq = new ArrayList<>();
    }
    this.customerOrderReq.add(customerOrderReqItem);
    return this;
  }

  /**
   * List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   * @return customerOrderReq List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   */
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ORDER_REQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<CustomerOrderReqEnum> getCustomerOrderReq() {
    return customerOrderReq;
  }

  /**
   * List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   *
   * @param customerOrderReq List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   */
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ORDER_REQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomerOrderReq(List<CustomerOrderReqEnum> customerOrderReq) {
    this.customerOrderReq = customerOrderReq;
  }

  /**
   * Serial number of a POI Terminal. If the login involve a POI Terminal and not the first Login to the POI System.
   *
   * @param poISerialNumber Serial number of a POI Terminal. If the login involve a POI Terminal and not the first Login to the POI System.
   * @return the current {@code LoginRequest} instance, allowing for method chaining
   */
  public LoginRequest poISerialNumber(String poISerialNumber) {
    this.poISerialNumber = poISerialNumber;
    return this;
  }

  /**
   * Serial number of a POI Terminal. If the login involve a POI Terminal and not the first Login to the POI System.
   * @return poISerialNumber Serial number of a POI Terminal. If the login involve a POI Terminal and not the first Login to the POI System.
   */
  @JsonProperty(JSON_PROPERTY_PO_I_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPoISerialNumber() {
    return poISerialNumber;
  }

  /**
   * Serial number of a POI Terminal. If the login involve a POI Terminal and not the first Login to the POI System.
   *
   * @param poISerialNumber Serial number of a POI Terminal. If the login involve a POI Terminal and not the first Login to the POI System.
   */
  @JsonProperty(JSON_PROPERTY_PO_I_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPoISerialNumber(String poISerialNumber) {
    this.poISerialNumber = poISerialNumber;
  }

  /**
   * Return true if this LoginRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginRequest loginRequest = (LoginRequest) o;
    return Objects.equals(this.dateTime, loginRequest.dateTime) &&
        Objects.equals(this.saleSoftware, loginRequest.saleSoftware) &&
        Objects.equals(this.saleTerminalData, loginRequest.saleTerminalData) &&
        Objects.equals(this.trainingModeFlag, loginRequest.trainingModeFlag) &&
        Objects.equals(this.operatorLanguage, loginRequest.operatorLanguage) &&
        Objects.equals(this.operatorID, loginRequest.operatorID) &&
        Objects.equals(this.shiftNumber, loginRequest.shiftNumber) &&
        Objects.equals(this.tokenRequestedType, loginRequest.tokenRequestedType) &&
        Objects.equals(this.customerOrderReq, loginRequest.customerOrderReq) &&
        Objects.equals(this.poISerialNumber, loginRequest.poISerialNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTime, saleSoftware, saleTerminalData, trainingModeFlag, operatorLanguage, operatorID, shiftNumber, tokenRequestedType, customerOrderReq, poISerialNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginRequest {\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    saleSoftware: ").append(toIndentedString(saleSoftware)).append("\n");
    sb.append("    saleTerminalData: ").append(toIndentedString(saleTerminalData)).append("\n");
    sb.append("    trainingModeFlag: ").append(toIndentedString(trainingModeFlag)).append("\n");
    sb.append("    operatorLanguage: ").append(toIndentedString(operatorLanguage)).append("\n");
    sb.append("    operatorID: ").append(toIndentedString(operatorID)).append("\n");
    sb.append("    shiftNumber: ").append(toIndentedString(shiftNumber)).append("\n");
    sb.append("    tokenRequestedType: ").append(toIndentedString(tokenRequestedType)).append("\n");
    sb.append("    customerOrderReq: ").append(toIndentedString(customerOrderReq)).append("\n");
    sb.append("    poISerialNumber: ").append(toIndentedString(poISerialNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of LoginRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoginRequest
   * @throws JsonProcessingException if the JSON string is invalid with respect to LoginRequest
   */
  public static LoginRequest fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, LoginRequest.class);
  }
/**
  * Convert an instance of LoginRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
