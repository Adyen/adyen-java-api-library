/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.LoyaltyHandling;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Conditions on which the transaction must be processed.
 */
@JsonPropertyOrder({
  TransactionConditions.JSON_PROPERTY_ALLOWED_PAYMENT_BRAND,
  TransactionConditions.JSON_PROPERTY_ACQUIRER_I_D,
  TransactionConditions.JSON_PROPERTY_DEBIT_PREFERRED_FLAG,
  TransactionConditions.JSON_PROPERTY_ALLOWED_LOYALTY_BRAND,
  TransactionConditions.JSON_PROPERTY_LOYALTY_HANDLING,
  TransactionConditions.JSON_PROPERTY_FORCE_ONLINE_FLAG,
  TransactionConditions.JSON_PROPERTY_FORCE_ENTRY_MODE,
  TransactionConditions.JSON_PROPERTY_MERCHANT_CATEGORY_CODE
})

public class TransactionConditions {
  public static final String JSON_PROPERTY_ALLOWED_PAYMENT_BRAND = "AllowedPaymentBrand";
  private List<String> allowedPaymentBrand;

  public static final String JSON_PROPERTY_ACQUIRER_I_D = "AcquirerID";
  private List<Integer> acquirerID;

  public static final String JSON_PROPERTY_DEBIT_PREFERRED_FLAG = "DebitPreferredFlag";
  private Boolean debitPreferredFlag;

  public static final String JSON_PROPERTY_ALLOWED_LOYALTY_BRAND = "AllowedLoyaltyBrand";
  private List<String> allowedLoyaltyBrand;

  public static final String JSON_PROPERTY_LOYALTY_HANDLING = "LoyaltyHandling";
  private LoyaltyHandling loyaltyHandling;

  public static final String JSON_PROPERTY_FORCE_ONLINE_FLAG = "ForceOnlineFlag";
  private Boolean forceOnlineFlag;

  /**
   * Gets or Sets forceEntryMode
   */
  public enum ForceEntryModeEnum {

    CHECKREADER(String.valueOf("CheckReader")),

    CONTACTLESS(String.valueOf("Contactless")),

    FILE(String.valueOf("File")),

    ICC(String.valueOf("ICC")),

    KEYED(String.valueOf("Keyed")),

    MAGSTRIPE(String.valueOf("MagStripe")),

    MANUAL(String.valueOf("Manual")),

    RFID(String.valueOf("RFID")),

    SCANNED(String.valueOf("Scanned")),

    SYNCHRONOUSICC(String.valueOf("SynchronousICC")),

    TAPPED(String.valueOf("Tapped"));

    private static final Logger LOG = Logger.getLogger(ForceEntryModeEnum.class.getName());

    private String value;

    ForceEntryModeEnum(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ForceEntryModeEnum fromValue(String value) {
      for (ForceEntryModeEnum b : ForceEntryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      // handling unexpected value
      LOG.warning("ForceEntryModeEnum: unexpected enum value '" + value + "' - Supported values are "+ Arrays.toString(ForceEntryModeEnum.values()));
      return null;
    }
  }

  public static final String JSON_PROPERTY_FORCE_ENTRY_MODE = "ForceEntryMode";
  private List<ForceEntryModeEnum> forceEntryMode;

  public static final String JSON_PROPERTY_MERCHANT_CATEGORY_CODE = "MerchantCategoryCode";
  private String merchantCategoryCode;

  public TransactionConditions() { 
  }

  /**
   * Payment brands accepted for this transaction. Card payment brands allowed by the Sale System for the payment transaction. Restrict brand if data sent.
   *
   * @param allowedPaymentBrand Payment brands accepted for this transaction. Card payment brands allowed by the Sale System for the payment transaction. Restrict brand if data sent.
   * @return the current {@code TransactionConditions} instance, allowing for method chaining
   */
  public TransactionConditions allowedPaymentBrand(List<String> allowedPaymentBrand) {
    this.allowedPaymentBrand = allowedPaymentBrand;
    return this;
  }

  public TransactionConditions addAllowedPaymentBrandItem(String allowedPaymentBrandItem) {
    if (this.allowedPaymentBrand == null) {
      this.allowedPaymentBrand = new ArrayList<>();
    }
    this.allowedPaymentBrand.add(allowedPaymentBrandItem);
    return this;
  }

  /**
   * Payment brands accepted for this transaction. Card payment brands allowed by the Sale System for the payment transaction. Restrict brand if data sent.
   * @return allowedPaymentBrand Payment brands accepted for this transaction. Card payment brands allowed by the Sale System for the payment transaction. Restrict brand if data sent.
   */
  @JsonProperty(JSON_PROPERTY_ALLOWED_PAYMENT_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getAllowedPaymentBrand() {
    return allowedPaymentBrand;
  }

  /**
   * Payment brands accepted for this transaction. Card payment brands allowed by the Sale System for the payment transaction. Restrict brand if data sent.
   *
   * @param allowedPaymentBrand Payment brands accepted for this transaction. Card payment brands allowed by the Sale System for the payment transaction. Restrict brand if data sent.
   */
  @JsonProperty(JSON_PROPERTY_ALLOWED_PAYMENT_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedPaymentBrand(List<String> allowedPaymentBrand) {
    this.allowedPaymentBrand = allowedPaymentBrand;
  }

  /**
   * Identification of the Acquirer. Restrict to these Acquirer if present.
   *
   * @param acquirerID Identification of the Acquirer. Restrict to these Acquirer if present.
   * @return the current {@code TransactionConditions} instance, allowing for method chaining
   */
  public TransactionConditions acquirerID(List<Integer> acquirerID) {
    this.acquirerID = acquirerID;
    return this;
  }

  public TransactionConditions addAcquirerIDItem(Integer acquirerIDItem) {
    if (this.acquirerID == null) {
      this.acquirerID = new ArrayList<>();
    }
    this.acquirerID.add(acquirerIDItem);
    return this;
  }

  /**
   * Identification of the Acquirer. Restrict to these Acquirer if present.
   * @return acquirerID Identification of the Acquirer. Restrict to these Acquirer if present.
   */
  @JsonProperty(JSON_PROPERTY_ACQUIRER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Integer> getAcquirerID() {
    return acquirerID;
  }

  /**
   * Identification of the Acquirer. Restrict to these Acquirer if present.
   *
   * @param acquirerID Identification of the Acquirer. Restrict to these Acquirer if present.
   */
  @JsonProperty(JSON_PROPERTY_ACQUIRER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcquirerID(List<Integer> acquirerID) {
    this.acquirerID = acquirerID;
  }

  /**
   * The preferred type of payment is a debit transaction rather than a credit transaction.
   *
   * @param debitPreferredFlag The preferred type of payment is a debit transaction rather than a credit transaction.
   * @return the current {@code TransactionConditions} instance, allowing for method chaining
   */
  public TransactionConditions debitPreferredFlag(Boolean debitPreferredFlag) {
    this.debitPreferredFlag = debitPreferredFlag;
    return this;
  }

  /**
   * The preferred type of payment is a debit transaction rather than a credit transaction.
   * @return debitPreferredFlag The preferred type of payment is a debit transaction rather than a credit transaction.
   */
  @JsonProperty(JSON_PROPERTY_DEBIT_PREFERRED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDebitPreferredFlag() {
    return debitPreferredFlag;
  }

  /**
   * The preferred type of payment is a debit transaction rather than a credit transaction.
   *
   * @param debitPreferredFlag The preferred type of payment is a debit transaction rather than a credit transaction.
   */
  @JsonProperty(JSON_PROPERTY_DEBIT_PREFERRED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDebitPreferredFlag(Boolean debitPreferredFlag) {
    this.debitPreferredFlag = debitPreferredFlag;
  }

  /**
   * Loyalty brands or programs allowed by the Sale System for the loyalty transaction. Restrict brand if data sent.
   *
   * @param allowedLoyaltyBrand Loyalty brands or programs allowed by the Sale System for the loyalty transaction. Restrict brand if data sent.
   * @return the current {@code TransactionConditions} instance, allowing for method chaining
   */
  public TransactionConditions allowedLoyaltyBrand(List<String> allowedLoyaltyBrand) {
    this.allowedLoyaltyBrand = allowedLoyaltyBrand;
    return this;
  }

  public TransactionConditions addAllowedLoyaltyBrandItem(String allowedLoyaltyBrandItem) {
    if (this.allowedLoyaltyBrand == null) {
      this.allowedLoyaltyBrand = new ArrayList<>();
    }
    this.allowedLoyaltyBrand.add(allowedLoyaltyBrandItem);
    return this;
  }

  /**
   * Loyalty brands or programs allowed by the Sale System for the loyalty transaction. Restrict brand if data sent.
   * @return allowedLoyaltyBrand Loyalty brands or programs allowed by the Sale System for the loyalty transaction. Restrict brand if data sent.
   */
  @JsonProperty(JSON_PROPERTY_ALLOWED_LOYALTY_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getAllowedLoyaltyBrand() {
    return allowedLoyaltyBrand;
  }

  /**
   * Loyalty brands or programs allowed by the Sale System for the loyalty transaction. Restrict brand if data sent.
   *
   * @param allowedLoyaltyBrand Loyalty brands or programs allowed by the Sale System for the loyalty transaction. Restrict brand if data sent.
   */
  @JsonProperty(JSON_PROPERTY_ALLOWED_LOYALTY_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedLoyaltyBrand(List<String> allowedLoyaltyBrand) {
    this.allowedLoyaltyBrand = allowedLoyaltyBrand;
  }

  /**
   * loyaltyHandling
   *
   * @param loyaltyHandling 
   * @return the current {@code TransactionConditions} instance, allowing for method chaining
   */
  public TransactionConditions loyaltyHandling(LoyaltyHandling loyaltyHandling) {
    this.loyaltyHandling = loyaltyHandling;
    return this;
  }

  /**
   * Get loyaltyHandling
   * @return loyaltyHandling 
   */
  @JsonProperty(JSON_PROPERTY_LOYALTY_HANDLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LoyaltyHandling getLoyaltyHandling() {
    return loyaltyHandling;
  }

  /**
   * loyaltyHandling
   *
   * @param loyaltyHandling 
   */
  @JsonProperty(JSON_PROPERTY_LOYALTY_HANDLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoyaltyHandling(LoyaltyHandling loyaltyHandling) {
    this.loyaltyHandling = loyaltyHandling;
  }

  /**
   * Indicates if the Cashier requires POI forces online access to the Acquirer. Go online if data sent.
   *
   * @param forceOnlineFlag Indicates if the Cashier requires POI forces online access to the Acquirer. Go online if data sent.
   * @return the current {@code TransactionConditions} instance, allowing for method chaining
   */
  public TransactionConditions forceOnlineFlag(Boolean forceOnlineFlag) {
    this.forceOnlineFlag = forceOnlineFlag;
    return this;
  }

  /**
   * Indicates if the Cashier requires POI forces online access to the Acquirer. Go online if data sent.
   * @return forceOnlineFlag Indicates if the Cashier requires POI forces online access to the Acquirer. Go online if data sent.
   */
  @JsonProperty(JSON_PROPERTY_FORCE_ONLINE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getForceOnlineFlag() {
    return forceOnlineFlag;
  }

  /**
   * Indicates if the Cashier requires POI forces online access to the Acquirer. Go online if data sent.
   *
   * @param forceOnlineFlag Indicates if the Cashier requires POI forces online access to the Acquirer. Go online if data sent.
   */
  @JsonProperty(JSON_PROPERTY_FORCE_ONLINE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForceOnlineFlag(Boolean forceOnlineFlag) {
    this.forceOnlineFlag = forceOnlineFlag;
  }

  /**
   * forceEntryMode
   *
   * @param forceEntryMode 
   * @return the current {@code TransactionConditions} instance, allowing for method chaining
   */
  public TransactionConditions forceEntryMode(List<ForceEntryModeEnum> forceEntryMode) {
    this.forceEntryMode = forceEntryMode;
    return this;
  }

  public TransactionConditions addForceEntryModeItem(ForceEntryModeEnum forceEntryModeItem) {
    if (this.forceEntryMode == null) {
      this.forceEntryMode = new ArrayList<>();
    }
    this.forceEntryMode.add(forceEntryModeItem);
    return this;
  }

  /**
   * Get forceEntryMode
   * @return forceEntryMode 
   */
  @JsonProperty(JSON_PROPERTY_FORCE_ENTRY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ForceEntryModeEnum> getForceEntryMode() {
    return forceEntryMode;
  }

  /**
   * forceEntryMode
   *
   * @param forceEntryMode 
   */
  @JsonProperty(JSON_PROPERTY_FORCE_ENTRY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForceEntryMode(List<ForceEntryModeEnum> forceEntryMode) {
    this.forceEntryMode = forceEntryMode;
  }

  /**
   * The code which identifies the category of the transaction (MCC). The payment implies a specific MCC.
   *
   * @param merchantCategoryCode The code which identifies the category of the transaction (MCC). The payment implies a specific MCC.
   * @return the current {@code TransactionConditions} instance, allowing for method chaining
   */
  public TransactionConditions merchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

  /**
   * The code which identifies the category of the transaction (MCC). The payment implies a specific MCC.
   * @return merchantCategoryCode The code which identifies the category of the transaction (MCC). The payment implies a specific MCC.
   */
  @JsonProperty(JSON_PROPERTY_MERCHANT_CATEGORY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  /**
   * The code which identifies the category of the transaction (MCC). The payment implies a specific MCC.
   *
   * @param merchantCategoryCode The code which identifies the category of the transaction (MCC). The payment implies a specific MCC.
   */
  @JsonProperty(JSON_PROPERTY_MERCHANT_CATEGORY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }

  /**
   * Return true if this TransactionConditions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionConditions transactionConditions = (TransactionConditions) o;
    return Objects.equals(this.allowedPaymentBrand, transactionConditions.allowedPaymentBrand) &&
        Objects.equals(this.acquirerID, transactionConditions.acquirerID) &&
        Objects.equals(this.debitPreferredFlag, transactionConditions.debitPreferredFlag) &&
        Objects.equals(this.allowedLoyaltyBrand, transactionConditions.allowedLoyaltyBrand) &&
        Objects.equals(this.loyaltyHandling, transactionConditions.loyaltyHandling) &&
        Objects.equals(this.forceOnlineFlag, transactionConditions.forceOnlineFlag) &&
        Objects.equals(this.forceEntryMode, transactionConditions.forceEntryMode) &&
        Objects.equals(this.merchantCategoryCode, transactionConditions.merchantCategoryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedPaymentBrand, acquirerID, debitPreferredFlag, allowedLoyaltyBrand, loyaltyHandling, forceOnlineFlag, forceEntryMode, merchantCategoryCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionConditions {\n");
    sb.append("    allowedPaymentBrand: ").append(toIndentedString(allowedPaymentBrand)).append("\n");
    sb.append("    acquirerID: ").append(toIndentedString(acquirerID)).append("\n");
    sb.append("    debitPreferredFlag: ").append(toIndentedString(debitPreferredFlag)).append("\n");
    sb.append("    allowedLoyaltyBrand: ").append(toIndentedString(allowedLoyaltyBrand)).append("\n");
    sb.append("    loyaltyHandling: ").append(toIndentedString(loyaltyHandling)).append("\n");
    sb.append("    forceOnlineFlag: ").append(toIndentedString(forceOnlineFlag)).append("\n");
    sb.append("    forceEntryMode: ").append(toIndentedString(forceEntryMode)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of TransactionConditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionConditions
   * @throws JsonProcessingException if the JSON string is invalid with respect to TransactionConditions
   */
  public static TransactionConditions fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, TransactionConditions.class);
  }
/**
  * Convert an instance of TransactionConditions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
