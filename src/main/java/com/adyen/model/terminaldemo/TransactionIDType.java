/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Identification of a transaction for the Sale System or the POI System.
 */
@JsonPropertyOrder({
  TransactionIDType.JSON_PROPERTY_TRANSACTION_I_D,
  TransactionIDType.JSON_PROPERTY_TIME_STAMP
})

public class TransactionIDType {
  public static final String JSON_PROPERTY_TRANSACTION_I_D = "TransactionID";
  private String transactionID;

  public static final String JSON_PROPERTY_TIME_STAMP = "TimeStamp";
  private OffsetDateTime timeStamp;

  public TransactionIDType() { 
  }

  /**
   * Unique identification of a transaction to identify the transaction on the Sale System (e.g. ticket number), or the POI System.
   *
   * @param transactionID Unique identification of a transaction to identify the transaction on the Sale System (e.g. ticket number), or the POI System.
   * @return the current {@code TransactionIDType} instance, allowing for method chaining
   */
  public TransactionIDType transactionID(String transactionID) {
    this.transactionID = transactionID;
    return this;
  }

  /**
   * Unique identification of a transaction to identify the transaction on the Sale System (e.g. ticket number), or the POI System.
   * @return transactionID Unique identification of a transaction to identify the transaction on the Sale System (e.g. ticket number), or the POI System.
   */
  @JsonProperty(JSON_PROPERTY_TRANSACTION_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTransactionID() {
    return transactionID;
  }

  /**
   * Unique identification of a transaction to identify the transaction on the Sale System (e.g. ticket number), or the POI System.
   *
   * @param transactionID Unique identification of a transaction to identify the transaction on the Sale System (e.g. ticket number), or the POI System.
   */
  @JsonProperty(JSON_PROPERTY_TRANSACTION_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionID(String transactionID) {
    this.transactionID = transactionID;
  }

  /**
   * Date and time of a transaction for the Sale System, the POI System or the Acquirer.  Ensures the uniqueness of a transaction and indicates the time when the event  occurs in the EventNotification message.
   *
   * @param timeStamp Date and time of a transaction for the Sale System, the POI System or the Acquirer.  Ensures the uniqueness of a transaction and indicates the time when the event  occurs in the EventNotification message.
   * @return the current {@code TransactionIDType} instance, allowing for method chaining
   */
  public TransactionIDType timeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Date and time of a transaction for the Sale System, the POI System or the Acquirer.  Ensures the uniqueness of a transaction and indicates the time when the event  occurs in the EventNotification message.
   * @return timeStamp Date and time of a transaction for the Sale System, the POI System or the Acquirer.  Ensures the uniqueness of a transaction and indicates the time when the event  occurs in the EventNotification message.
   */
  @JsonProperty(JSON_PROPERTY_TIME_STAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getTimeStamp() {
    return timeStamp;
  }

  /**
   * Date and time of a transaction for the Sale System, the POI System or the Acquirer.  Ensures the uniqueness of a transaction and indicates the time when the event  occurs in the EventNotification message.
   *
   * @param timeStamp Date and time of a transaction for the Sale System, the POI System or the Acquirer.  Ensures the uniqueness of a transaction and indicates the time when the event  occurs in the EventNotification message.
   */
  @JsonProperty(JSON_PROPERTY_TIME_STAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
  }

  /**
   * Return true if this TransactionIDType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionIDType transactionIDType = (TransactionIDType) o;
    return Objects.equals(this.transactionID, transactionIDType.transactionID) &&
        Objects.equals(this.timeStamp, transactionIDType.timeStamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionID, timeStamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionIDType {\n");
    sb.append("    transactionID: ").append(toIndentedString(transactionID)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of TransactionIDType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionIDType
   * @throws JsonProcessingException if the JSON string is invalid with respect to TransactionIDType
   */
  public static TransactionIDType fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, TransactionIDType.class);
  }
/**
  * Convert an instance of TransactionIDType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
