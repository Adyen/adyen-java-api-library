/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.OutputBarcode;
import com.adyen.model.terminaldemo.OutputFormat;
import com.adyen.model.terminaldemo.OutputText;
import com.adyen.model.terminaldemo.PredefinedContent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Content to display or print. This is a sequence of elements if they have different formats.
 */
@JsonPropertyOrder({
  OutputContent.JSON_PROPERTY_OUTPUT_FORMAT,
  OutputContent.JSON_PROPERTY_PREDEFINED_CONTENT,
  OutputContent.JSON_PROPERTY_OUTPUT_TEXT,
  OutputContent.JSON_PROPERTY_OUTPUT_X_H_T_M_L,
  OutputContent.JSON_PROPERTY_OUTPUT_BARCODE
})

public class OutputContent {
  public static final String JSON_PROPERTY_OUTPUT_FORMAT = "OutputFormat";
  private OutputFormat outputFormat;

  public static final String JSON_PROPERTY_PREDEFINED_CONTENT = "PredefinedContent";
  private PredefinedContent predefinedContent;

  public static final String JSON_PROPERTY_OUTPUT_TEXT = "OutputText";
  private List<OutputText> outputText;

  public static final String JSON_PROPERTY_OUTPUT_X_H_T_M_L = "OutputXHTML";
  private byte[] outputXHTML;

  public static final String JSON_PROPERTY_OUTPUT_BARCODE = "OutputBarcode";
  private OutputBarcode outputBarcode;

  public OutputContent() { 
  }

  /**
   * outputFormat
   *
   * @param outputFormat 
   * @return the current {@code OutputContent} instance, allowing for method chaining
   */
  public OutputContent outputFormat(OutputFormat outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Get outputFormat
   * @return outputFormat 
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OutputFormat getOutputFormat() {
    return outputFormat;
  }

  /**
   * outputFormat
   *
   * @param outputFormat 
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputFormat(OutputFormat outputFormat) {
    this.outputFormat = outputFormat;
  }

  /**
   * predefinedContent
   *
   * @param predefinedContent 
   * @return the current {@code OutputContent} instance, allowing for method chaining
   */
  public OutputContent predefinedContent(PredefinedContent predefinedContent) {
    this.predefinedContent = predefinedContent;
    return this;
  }

  /**
   * Get predefinedContent
   * @return predefinedContent 
   */
  @JsonProperty(JSON_PROPERTY_PREDEFINED_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PredefinedContent getPredefinedContent() {
    return predefinedContent;
  }

  /**
   * predefinedContent
   *
   * @param predefinedContent 
   */
  @JsonProperty(JSON_PROPERTY_PREDEFINED_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPredefinedContent(PredefinedContent predefinedContent) {
    this.predefinedContent = predefinedContent;
  }

  /**
   * Content of text message to display or print. Mandatory, if &#x60;OutputFormat&#x60; is Text, not allowed otherwise. One instance of &#x60;OutputText&#x60; per shared format.
   *
   * @param outputText Content of text message to display or print. Mandatory, if &#x60;OutputFormat&#x60; is Text, not allowed otherwise. One instance of &#x60;OutputText&#x60; per shared format.
   * @return the current {@code OutputContent} instance, allowing for method chaining
   */
  public OutputContent outputText(List<OutputText> outputText) {
    this.outputText = outputText;
    return this;
  }

  public OutputContent addOutputTextItem(OutputText outputTextItem) {
    if (this.outputText == null) {
      this.outputText = new ArrayList<>();
    }
    this.outputText.add(outputTextItem);
    return this;
  }

  /**
   * Content of text message to display or print. Mandatory, if &#x60;OutputFormat&#x60; is Text, not allowed otherwise. One instance of &#x60;OutputText&#x60; per shared format.
   * @return outputText Content of text message to display or print. Mandatory, if &#x60;OutputFormat&#x60; is Text, not allowed otherwise. One instance of &#x60;OutputText&#x60; per shared format.
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<OutputText> getOutputText() {
    return outputText;
  }

  /**
   * Content of text message to display or print. Mandatory, if &#x60;OutputFormat&#x60; is Text, not allowed otherwise. One instance of &#x60;OutputText&#x60; per shared format.
   *
   * @param outputText Content of text message to display or print. Mandatory, if &#x60;OutputFormat&#x60; is Text, not allowed otherwise. One instance of &#x60;OutputText&#x60; per shared format.
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputText(List<OutputText> outputText) {
    this.outputText = outputText;
  }

  /**
   * XHTML document body containing the message to display or print. Mandatory if &#x60;OutputFormat&#x60; is XHTML, not allowed otherwise.
   *
   * @param outputXHTML XHTML document body containing the message to display or print. Mandatory if &#x60;OutputFormat&#x60; is XHTML, not allowed otherwise.
   * @return the current {@code OutputContent} instance, allowing for method chaining
   */
  public OutputContent outputXHTML(byte[] outputXHTML) {
    this.outputXHTML = outputXHTML;
    return this;
  }

  /**
   * XHTML document body containing the message to display or print. Mandatory if &#x60;OutputFormat&#x60; is XHTML, not allowed otherwise.
   * @return outputXHTML XHTML document body containing the message to display or print. Mandatory if &#x60;OutputFormat&#x60; is XHTML, not allowed otherwise.
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_X_H_T_M_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public byte[] getOutputXHTML() {
    return outputXHTML;
  }

  /**
   * XHTML document body containing the message to display or print. Mandatory if &#x60;OutputFormat&#x60; is XHTML, not allowed otherwise.
   *
   * @param outputXHTML XHTML document body containing the message to display or print. Mandatory if &#x60;OutputFormat&#x60; is XHTML, not allowed otherwise.
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_X_H_T_M_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputXHTML(byte[] outputXHTML) {
    this.outputXHTML = outputXHTML;
  }

  /**
   * outputBarcode
   *
   * @param outputBarcode 
   * @return the current {@code OutputContent} instance, allowing for method chaining
   */
  public OutputContent outputBarcode(OutputBarcode outputBarcode) {
    this.outputBarcode = outputBarcode;
    return this;
  }

  /**
   * Get outputBarcode
   * @return outputBarcode 
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_BARCODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OutputBarcode getOutputBarcode() {
    return outputBarcode;
  }

  /**
   * outputBarcode
   *
   * @param outputBarcode 
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_BARCODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputBarcode(OutputBarcode outputBarcode) {
    this.outputBarcode = outputBarcode;
  }

  /**
   * Return true if this OutputContent object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputContent outputContent = (OutputContent) o;
    return Objects.equals(this.outputFormat, outputContent.outputFormat) &&
        Objects.equals(this.predefinedContent, outputContent.predefinedContent) &&
        Objects.equals(this.outputText, outputContent.outputText) &&
        Arrays.equals(this.outputXHTML, outputContent.outputXHTML) &&
        Objects.equals(this.outputBarcode, outputContent.outputBarcode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outputFormat, predefinedContent, outputText, Arrays.hashCode(outputXHTML), outputBarcode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputContent {\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    predefinedContent: ").append(toIndentedString(predefinedContent)).append("\n");
    sb.append("    outputText: ").append(toIndentedString(outputText)).append("\n");
    sb.append("    outputXHTML: ").append(toIndentedString(outputXHTML)).append("\n");
    sb.append("    outputBarcode: ").append(toIndentedString(outputBarcode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of OutputContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutputContent
   * @throws JsonProcessingException if the JSON string is invalid with respect to OutputContent
   */
  public static OutputContent fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, OutputContent.class);
  }
/**
  * Convert an instance of OutputContent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
