/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.LoyaltyAccount;
import com.adyen.model.terminaldemo.LoyaltyAcquirerData;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Data related to the result of a processed loyalty transaction. In the Message Response, the result of each loyalty brand transaction.
 */
@JsonPropertyOrder({
  LoyaltyResult.JSON_PROPERTY_LOYALTY_ACCOUNT,
  LoyaltyResult.JSON_PROPERTY_CURRENT_BALANCE,
  LoyaltyResult.JSON_PROPERTY_LOYALTY_ACQUIRER_DATA
})

public class LoyaltyResult {
  public static final String JSON_PROPERTY_LOYALTY_ACCOUNT = "LoyaltyAccount";
  private LoyaltyAccount loyaltyAccount;

  public static final String JSON_PROPERTY_CURRENT_BALANCE = "CurrentBalance";
  private BigDecimal currentBalance;

  public static final String JSON_PROPERTY_LOYALTY_ACQUIRER_DATA = "LoyaltyAcquirerData";
  private LoyaltyAcquirerData loyaltyAcquirerData;

  public LoyaltyResult() { 
  }

  /**
   * loyaltyAccount
   *
   * @param loyaltyAccount 
   * @return the current {@code LoyaltyResult} instance, allowing for method chaining
   */
  public LoyaltyResult loyaltyAccount(LoyaltyAccount loyaltyAccount) {
    this.loyaltyAccount = loyaltyAccount;
    return this;
  }

  /**
   * Get loyaltyAccount
   * @return loyaltyAccount 
   */
  @JsonProperty(JSON_PROPERTY_LOYALTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LoyaltyAccount getLoyaltyAccount() {
    return loyaltyAccount;
  }

  /**
   * loyaltyAccount
   *
   * @param loyaltyAccount 
   */
  @JsonProperty(JSON_PROPERTY_LOYALTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoyaltyAccount(LoyaltyAccount loyaltyAccount) {
    this.loyaltyAccount = loyaltyAccount;
  }

  /**
   * Balance of an account. If known (provided by the card or an external host).
   *
   * @param currentBalance Balance of an account. If known (provided by the card or an external host).
   * @return the current {@code LoyaltyResult} instance, allowing for method chaining
   */
  public LoyaltyResult currentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
    return this;
  }

  /**
   * Balance of an account. If known (provided by the card or an external host).
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return currentBalance Balance of an account. If known (provided by the card or an external host).
   */
  @JsonProperty(JSON_PROPERTY_CURRENT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BigDecimal getCurrentBalance() {
    return currentBalance;
  }

  /**
   * Balance of an account. If known (provided by the card or an external host).
   *
   * @param currentBalance Balance of an account. If known (provided by the card or an external host).
   */
  @JsonProperty(JSON_PROPERTY_CURRENT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
  }

  /**
   * loyaltyAcquirerData
   *
   * @param loyaltyAcquirerData 
   * @return the current {@code LoyaltyResult} instance, allowing for method chaining
   */
  public LoyaltyResult loyaltyAcquirerData(LoyaltyAcquirerData loyaltyAcquirerData) {
    this.loyaltyAcquirerData = loyaltyAcquirerData;
    return this;
  }

  /**
   * Get loyaltyAcquirerData
   * @return loyaltyAcquirerData 
   */
  @JsonProperty(JSON_PROPERTY_LOYALTY_ACQUIRER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LoyaltyAcquirerData getLoyaltyAcquirerData() {
    return loyaltyAcquirerData;
  }

  /**
   * loyaltyAcquirerData
   *
   * @param loyaltyAcquirerData 
   */
  @JsonProperty(JSON_PROPERTY_LOYALTY_ACQUIRER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoyaltyAcquirerData(LoyaltyAcquirerData loyaltyAcquirerData) {
    this.loyaltyAcquirerData = loyaltyAcquirerData;
  }

  /**
   * Return true if this LoyaltyResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyResult loyaltyResult = (LoyaltyResult) o;
    return Objects.equals(this.loyaltyAccount, loyaltyResult.loyaltyAccount) &&
        Objects.equals(this.currentBalance, loyaltyResult.currentBalance) &&
        Objects.equals(this.loyaltyAcquirerData, loyaltyResult.loyaltyAcquirerData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loyaltyAccount, currentBalance, loyaltyAcquirerData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyResult {\n");
    sb.append("    loyaltyAccount: ").append(toIndentedString(loyaltyAccount)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    loyaltyAcquirerData: ").append(toIndentedString(loyaltyAcquirerData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of LoyaltyResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyResult
   * @throws JsonProcessingException if the JSON string is invalid with respect to LoyaltyResult
   */
  public static LoyaltyResult fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, LoyaltyResult.class);
  }
/**
  * Convert an instance of LoyaltyResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
