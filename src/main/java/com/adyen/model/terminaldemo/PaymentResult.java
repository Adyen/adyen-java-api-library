/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.AmountsResp;
import com.adyen.model.terminaldemo.CapturedSignature;
import com.adyen.model.terminaldemo.CurrencyConversion;
import com.adyen.model.terminaldemo.Instalment;
import com.adyen.model.terminaldemo.PaymentAcquirerData;
import com.adyen.model.terminaldemo.PaymentInstrumentData;
import com.adyen.model.terminaldemo.PaymentType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * PaymentResult
 */
@JsonPropertyOrder({
  PaymentResult.JSON_PROPERTY_PAYMENT_TYPE,
  PaymentResult.JSON_PROPERTY_PAYMENT_INSTRUMENT_DATA,
  PaymentResult.JSON_PROPERTY_AMOUNTS_RESP,
  PaymentResult.JSON_PROPERTY_INSTALMENT,
  PaymentResult.JSON_PROPERTY_CURRENCY_CONVERSION,
  PaymentResult.JSON_PROPERTY_MERCHANT_OVERRIDE_FLAG,
  PaymentResult.JSON_PROPERTY_CAPTURED_SIGNATURE,
  PaymentResult.JSON_PROPERTY_PROTECTED_SIGNATURE,
  PaymentResult.JSON_PROPERTY_CUSTOMER_LANGUAGE,
  PaymentResult.JSON_PROPERTY_ONLINE_FLAG,
  PaymentResult.JSON_PROPERTY_AUTHENTICATION_METHOD,
  PaymentResult.JSON_PROPERTY_VALIDITY_DATE,
  PaymentResult.JSON_PROPERTY_PAYMENT_ACQUIRER_DATA
})

public class PaymentResult {
  public static final String JSON_PROPERTY_PAYMENT_TYPE = "PaymentType";
  private PaymentType paymentType;

  public static final String JSON_PROPERTY_PAYMENT_INSTRUMENT_DATA = "PaymentInstrumentData";
  private PaymentInstrumentData paymentInstrumentData;

  public static final String JSON_PROPERTY_AMOUNTS_RESP = "AmountsResp";
  private AmountsResp amountsResp;

  public static final String JSON_PROPERTY_INSTALMENT = "Instalment";
  private Instalment instalment;

  public static final String JSON_PROPERTY_CURRENCY_CONVERSION = "CurrencyConversion";
  private List<CurrencyConversion> currencyConversion;

  public static final String JSON_PROPERTY_MERCHANT_OVERRIDE_FLAG = "MerchantOverrideFlag";
  private Boolean merchantOverrideFlag;

  public static final String JSON_PROPERTY_CAPTURED_SIGNATURE = "CapturedSignature";
  private CapturedSignature capturedSignature;

  public static final String JSON_PROPERTY_PROTECTED_SIGNATURE = "ProtectedSignature";
  private String protectedSignature;

  public static final String JSON_PROPERTY_CUSTOMER_LANGUAGE = "CustomerLanguage";
  private String customerLanguage;

  public static final String JSON_PROPERTY_ONLINE_FLAG = "OnlineFlag";
  private Boolean onlineFlag;

  /**
   * Gets or Sets authenticationMethod
   */
  public enum AuthenticationMethodEnum {

    BYPASS(String.valueOf("Bypass")),

    MANUALVERIFICATION(String.valueOf("ManualVerification")),

    MERCHANTAUTHENTICATION(String.valueOf("MerchantAuthentication")),

    OFFLINEPIN(String.valueOf("OfflinePIN")),

    ONLINEPIN(String.valueOf("OnlinePIN")),

    PAPERSIGNATURE(String.valueOf("PaperSignature")),

    SECURECERTIFICATE(String.valueOf("SecureCertificate")),

    SECURENOCERTIFICATE(String.valueOf("SecureNoCertificate")),

    SECUREDCHANNEL(String.valueOf("SecuredChannel")),

    SIGNATURECAPTURE(String.valueOf("SignatureCapture")),

    UNKNOWNMETHOD(String.valueOf("UnknownMethod"));

    private static final Logger LOG = Logger.getLogger(AuthenticationMethodEnum.class.getName());

    private String value;

    AuthenticationMethodEnum(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AuthenticationMethodEnum fromValue(String value) {
      for (AuthenticationMethodEnum b : AuthenticationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      // handling unexpected value
      LOG.warning("AuthenticationMethodEnum: unexpected enum value '" + value + "' - Supported values are "+ Arrays.toString(AuthenticationMethodEnum.values()));
      return null;
    }
  }

  public static final String JSON_PROPERTY_AUTHENTICATION_METHOD = "AuthenticationMethod";
  private List<AuthenticationMethodEnum> authenticationMethod;

  public static final String JSON_PROPERTY_VALIDITY_DATE = "ValidityDate";
  private LocalDate validityDate;

  public static final String JSON_PROPERTY_PAYMENT_ACQUIRER_DATA = "PaymentAcquirerData";
  private PaymentAcquirerData paymentAcquirerData;

  public PaymentResult() { 
  }

  /**
   * paymentType
   *
   * @param paymentType 
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult paymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Get paymentType
   * @return paymentType 
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PaymentType getPaymentType() {
    return paymentType;
  }

  /**
   * paymentType
   *
   * @param paymentType 
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
  }

  /**
   * paymentInstrumentData
   *
   * @param paymentInstrumentData 
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult paymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
    return this;
  }

  /**
   * Get paymentInstrumentData
   * @return paymentInstrumentData 
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_INSTRUMENT_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PaymentInstrumentData getPaymentInstrumentData() {
    return paymentInstrumentData;
  }

  /**
   * paymentInstrumentData
   *
   * @param paymentInstrumentData 
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_INSTRUMENT_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
  }

  /**
   * amountsResp
   *
   * @param amountsResp 
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult amountsResp(AmountsResp amountsResp) {
    this.amountsResp = amountsResp;
    return this;
  }

  /**
   * Get amountsResp
   * @return amountsResp 
   */
  @JsonProperty(JSON_PROPERTY_AMOUNTS_RESP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public AmountsResp getAmountsResp() {
    return amountsResp;
  }

  /**
   * amountsResp
   *
   * @param amountsResp 
   */
  @JsonProperty(JSON_PROPERTY_AMOUNTS_RESP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountsResp(AmountsResp amountsResp) {
    this.amountsResp = amountsResp;
  }

  /**
   * instalment
   *
   * @param instalment 
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult instalment(Instalment instalment) {
    this.instalment = instalment;
    return this;
  }

  /**
   * Get instalment
   * @return instalment 
   */
  @JsonProperty(JSON_PROPERTY_INSTALMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Instalment getInstalment() {
    return instalment;
  }

  /**
   * instalment
   *
   * @param instalment 
   */
  @JsonProperty(JSON_PROPERTY_INSTALMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstalment(Instalment instalment) {
    this.instalment = instalment;
  }

  /**
   * Information related to a currency conversion. A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt).
   *
   * @param currencyConversion Information related to a currency conversion. A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt).
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult currencyConversion(List<CurrencyConversion> currencyConversion) {
    this.currencyConversion = currencyConversion;
    return this;
  }

  public PaymentResult addCurrencyConversionItem(CurrencyConversion currencyConversionItem) {
    if (this.currencyConversion == null) {
      this.currencyConversion = new ArrayList<>();
    }
    this.currencyConversion.add(currencyConversionItem);
    return this;
  }

  /**
   * Information related to a currency conversion. A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt).
   * @return currencyConversion Information related to a currency conversion. A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt).
   */
  @JsonProperty(JSON_PROPERTY_CURRENCY_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<CurrencyConversion> getCurrencyConversion() {
    return currencyConversion;
  }

  /**
   * Information related to a currency conversion. A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt).
   *
   * @param currencyConversion Information related to a currency conversion. A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt).
   */
  @JsonProperty(JSON_PROPERTY_CURRENCY_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrencyConversion(List<CurrencyConversion> currencyConversion) {
    this.currencyConversion = currencyConversion;
  }

  /**
   * Indicates that the Merchant forced the result of the payment to successful. Allows the Sale System to be sure that the payment has been forced.
   *
   * @param merchantOverrideFlag Indicates that the Merchant forced the result of the payment to successful. Allows the Sale System to be sure that the payment has been forced.
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult merchantOverrideFlag(Boolean merchantOverrideFlag) {
    this.merchantOverrideFlag = merchantOverrideFlag;
    return this;
  }

  /**
   * Indicates that the Merchant forced the result of the payment to successful. Allows the Sale System to be sure that the payment has been forced.
   * @return merchantOverrideFlag Indicates that the Merchant forced the result of the payment to successful. Allows the Sale System to be sure that the payment has been forced.
   */
  @JsonProperty(JSON_PROPERTY_MERCHANT_OVERRIDE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getMerchantOverrideFlag() {
    return merchantOverrideFlag;
  }

  /**
   * Indicates that the Merchant forced the result of the payment to successful. Allows the Sale System to be sure that the payment has been forced.
   *
   * @param merchantOverrideFlag Indicates that the Merchant forced the result of the payment to successful. Allows the Sale System to be sure that the payment has been forced.
   */
  @JsonProperty(JSON_PROPERTY_MERCHANT_OVERRIDE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantOverrideFlag(Boolean merchantOverrideFlag) {
    this.merchantOverrideFlag = merchantOverrideFlag;
  }

  /**
   * capturedSignature
   *
   * @param capturedSignature 
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult capturedSignature(CapturedSignature capturedSignature) {
    this.capturedSignature = capturedSignature;
    return this;
  }

  /**
   * Get capturedSignature
   * @return capturedSignature 
   */
  @JsonProperty(JSON_PROPERTY_CAPTURED_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public CapturedSignature getCapturedSignature() {
    return capturedSignature;
  }

  /**
   * capturedSignature
   *
   * @param capturedSignature 
   */
  @JsonProperty(JSON_PROPERTY_CAPTURED_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapturedSignature(CapturedSignature capturedSignature) {
    this.capturedSignature = capturedSignature;
  }

  /**
   * Numeric value of a handwritten signature. Contains the value of a handwritten signature, e.g. the signature of a cardholder on the merchant payment receipt. The format before encryption is the encoded data structure CapturedSignature. The data structure before encryption includes the start and end tags for an XML encoding, the identifier and length bytes for an ASN.1 encoding, and the complete member ProtectedSignature for a JSON encoding.
   *
   * @param protectedSignature Numeric value of a handwritten signature. Contains the value of a handwritten signature, e.g. the signature of a cardholder on the merchant payment receipt. The format before encryption is the encoded data structure CapturedSignature. The data structure before encryption includes the start and end tags for an XML encoding, the identifier and length bytes for an ASN.1 encoding, and the complete member ProtectedSignature for a JSON encoding.
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult protectedSignature(String protectedSignature) {
    this.protectedSignature = protectedSignature;
    return this;
  }

  /**
   * Numeric value of a handwritten signature. Contains the value of a handwritten signature, e.g. the signature of a cardholder on the merchant payment receipt. The format before encryption is the encoded data structure CapturedSignature. The data structure before encryption includes the start and end tags for an XML encoding, the identifier and length bytes for an ASN.1 encoding, and the complete member ProtectedSignature for a JSON encoding.
   * @return protectedSignature Numeric value of a handwritten signature. Contains the value of a handwritten signature, e.g. the signature of a cardholder on the merchant payment receipt. The format before encryption is the encoded data structure CapturedSignature. The data structure before encryption includes the start and end tags for an XML encoding, the identifier and length bytes for an ASN.1 encoding, and the complete member ProtectedSignature for a JSON encoding.
   */
  @JsonProperty(JSON_PROPERTY_PROTECTED_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getProtectedSignature() {
    return protectedSignature;
  }

  /**
   * Numeric value of a handwritten signature. Contains the value of a handwritten signature, e.g. the signature of a cardholder on the merchant payment receipt. The format before encryption is the encoded data structure CapturedSignature. The data structure before encryption includes the start and end tags for an XML encoding, the identifier and length bytes for an ASN.1 encoding, and the complete member ProtectedSignature for a JSON encoding.
   *
   * @param protectedSignature Numeric value of a handwritten signature. Contains the value of a handwritten signature, e.g. the signature of a cardholder on the merchant payment receipt. The format before encryption is the encoded data structure CapturedSignature. The data structure before encryption includes the start and end tags for an XML encoding, the identifier and length bytes for an ASN.1 encoding, and the complete member ProtectedSignature for a JSON encoding.
   */
  @JsonProperty(JSON_PROPERTY_PROTECTED_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtectedSignature(String protectedSignature) {
    this.protectedSignature = protectedSignature;
  }

  /**
   * The language of the customer that was used on the terminal screen or in text printed by the terminal. Format: two-character [ISO 639:2023](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format.
   *
   * @param customerLanguage The language of the customer that was used on the terminal screen or in text printed by the terminal. Format: two-character [ISO 639:2023](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format.
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult customerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
    return this;
  }

  /**
   * The language of the customer that was used on the terminal screen or in text printed by the terminal. Format: two-character [ISO 639:2023](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format.
   * @return customerLanguage The language of the customer that was used on the terminal screen or in text printed by the terminal. Format: two-character [ISO 639:2023](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format.
   */
  @JsonProperty(JSON_PROPERTY_CUSTOMER_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCustomerLanguage() {
    return customerLanguage;
  }

  /**
   * The language of the customer that was used on the terminal screen or in text printed by the terminal. Format: two-character [ISO 639:2023](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format.
   *
   * @param customerLanguage The language of the customer that was used on the terminal screen or in text printed by the terminal. Format: two-character [ISO 639:2023](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format.
   */
  @JsonProperty(JSON_PROPERTY_CUSTOMER_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
  }

  /**
   * Indicate that the payment transaction processing has required the approval of a host. Allows the Sale System to know if the payment was online or offline.
   *
   * @param onlineFlag Indicate that the payment transaction processing has required the approval of a host. Allows the Sale System to know if the payment was online or offline.
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult onlineFlag(Boolean onlineFlag) {
    this.onlineFlag = onlineFlag;
    return this;
  }

  /**
   * Indicate that the payment transaction processing has required the approval of a host. Allows the Sale System to know if the payment was online or offline.
   * @return onlineFlag Indicate that the payment transaction processing has required the approval of a host. Allows the Sale System to know if the payment was online or offline.
   */
  @JsonProperty(JSON_PROPERTY_ONLINE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getOnlineFlag() {
    return onlineFlag;
  }

  /**
   * Indicate that the payment transaction processing has required the approval of a host. Allows the Sale System to know if the payment was online or offline.
   *
   * @param onlineFlag Indicate that the payment transaction processing has required the approval of a host. Allows the Sale System to know if the payment was online or offline.
   */
  @JsonProperty(JSON_PROPERTY_ONLINE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnlineFlag(Boolean onlineFlag) {
    this.onlineFlag = onlineFlag;
  }

  /**
   * Method for customer authentication. Allows the Sale System informed about customer authentication for the payment transaction. Possible values: * **Bypass** * **ManualVerification** * **MerchantAuthentication** * **OfflinePIN** * **OnlinePIN** * **PaperSignature** * **SecureCertificate** * **SecureNoCertificate** * **SecuredChannel** * **SignatureCapture** * **UnknownMethod**
   *
   * @param authenticationMethod Method for customer authentication. Allows the Sale System informed about customer authentication for the payment transaction. Possible values: * **Bypass** * **ManualVerification** * **MerchantAuthentication** * **OfflinePIN** * **OnlinePIN** * **PaperSignature** * **SecureCertificate** * **SecureNoCertificate** * **SecuredChannel** * **SignatureCapture** * **UnknownMethod**
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult authenticationMethod(List<AuthenticationMethodEnum> authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
    return this;
  }

  public PaymentResult addAuthenticationMethodItem(AuthenticationMethodEnum authenticationMethodItem) {
    if (this.authenticationMethod == null) {
      this.authenticationMethod = new ArrayList<>();
    }
    this.authenticationMethod.add(authenticationMethodItem);
    return this;
  }

  /**
   * Method for customer authentication. Allows the Sale System informed about customer authentication for the payment transaction. Possible values: * **Bypass** * **ManualVerification** * **MerchantAuthentication** * **OfflinePIN** * **OnlinePIN** * **PaperSignature** * **SecureCertificate** * **SecureNoCertificate** * **SecuredChannel** * **SignatureCapture** * **UnknownMethod**
   * @return authenticationMethod Method for customer authentication. Allows the Sale System informed about customer authentication for the payment transaction. Possible values: * **Bypass** * **ManualVerification** * **MerchantAuthentication** * **OfflinePIN** * **OnlinePIN** * **PaperSignature** * **SecureCertificate** * **SecureNoCertificate** * **SecuredChannel** * **SignatureCapture** * **UnknownMethod**
   */
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<AuthenticationMethodEnum> getAuthenticationMethod() {
    return authenticationMethod;
  }

  /**
   * Method for customer authentication. Allows the Sale System informed about customer authentication for the payment transaction. Possible values: * **Bypass** * **ManualVerification** * **MerchantAuthentication** * **OfflinePIN** * **OnlinePIN** * **PaperSignature** * **SecureCertificate** * **SecureNoCertificate** * **SecuredChannel** * **SignatureCapture** * **UnknownMethod**
   *
   * @param authenticationMethod Method for customer authentication. Allows the Sale System informed about customer authentication for the payment transaction. Possible values: * **Bypass** * **ManualVerification** * **MerchantAuthentication** * **OfflinePIN** * **OnlinePIN** * **PaperSignature** * **SecureCertificate** * **SecureNoCertificate** * **SecuredChannel** * **SignatureCapture** * **UnknownMethod**
   */
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationMethod(List<AuthenticationMethodEnum> authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
  }

  /**
   * End of the validity period for the reservation, for the first reservation, and the reservation updates as well.
   *
   * @param validityDate End of the validity period for the reservation, for the first reservation, and the reservation updates as well.
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult validityDate(LocalDate validityDate) {
    this.validityDate = validityDate;
    return this;
  }

  /**
   * End of the validity period for the reservation, for the first reservation, and the reservation updates as well.
   * @return validityDate End of the validity period for the reservation, for the first reservation, and the reservation updates as well.
   */
  @JsonProperty(JSON_PROPERTY_VALIDITY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LocalDate getValidityDate() {
    return validityDate;
  }

  /**
   * End of the validity period for the reservation, for the first reservation, and the reservation updates as well.
   *
   * @param validityDate End of the validity period for the reservation, for the first reservation, and the reservation updates as well.
   */
  @JsonProperty(JSON_PROPERTY_VALIDITY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValidityDate(LocalDate validityDate) {
    this.validityDate = validityDate;
  }

  /**
   * paymentAcquirerData
   *
   * @param paymentAcquirerData 
   * @return the current {@code PaymentResult} instance, allowing for method chaining
   */
  public PaymentResult paymentAcquirerData(PaymentAcquirerData paymentAcquirerData) {
    this.paymentAcquirerData = paymentAcquirerData;
    return this;
  }

  /**
   * Get paymentAcquirerData
   * @return paymentAcquirerData 
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_ACQUIRER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PaymentAcquirerData getPaymentAcquirerData() {
    return paymentAcquirerData;
  }

  /**
   * paymentAcquirerData
   *
   * @param paymentAcquirerData 
   */
  @JsonProperty(JSON_PROPERTY_PAYMENT_ACQUIRER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentAcquirerData(PaymentAcquirerData paymentAcquirerData) {
    this.paymentAcquirerData = paymentAcquirerData;
  }

  /**
   * Return true if this PaymentResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentResult paymentResult = (PaymentResult) o;
    return Objects.equals(this.paymentType, paymentResult.paymentType) &&
        Objects.equals(this.paymentInstrumentData, paymentResult.paymentInstrumentData) &&
        Objects.equals(this.amountsResp, paymentResult.amountsResp) &&
        Objects.equals(this.instalment, paymentResult.instalment) &&
        Objects.equals(this.currencyConversion, paymentResult.currencyConversion) &&
        Objects.equals(this.merchantOverrideFlag, paymentResult.merchantOverrideFlag) &&
        Objects.equals(this.capturedSignature, paymentResult.capturedSignature) &&
        Objects.equals(this.protectedSignature, paymentResult.protectedSignature) &&
        Objects.equals(this.customerLanguage, paymentResult.customerLanguage) &&
        Objects.equals(this.onlineFlag, paymentResult.onlineFlag) &&
        Objects.equals(this.authenticationMethod, paymentResult.authenticationMethod) &&
        Objects.equals(this.validityDate, paymentResult.validityDate) &&
        Objects.equals(this.paymentAcquirerData, paymentResult.paymentAcquirerData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentType, paymentInstrumentData, amountsResp, instalment, currencyConversion, merchantOverrideFlag, capturedSignature, protectedSignature, customerLanguage, onlineFlag, authenticationMethod, validityDate, paymentAcquirerData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentResult {\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    paymentInstrumentData: ").append(toIndentedString(paymentInstrumentData)).append("\n");
    sb.append("    amountsResp: ").append(toIndentedString(amountsResp)).append("\n");
    sb.append("    instalment: ").append(toIndentedString(instalment)).append("\n");
    sb.append("    currencyConversion: ").append(toIndentedString(currencyConversion)).append("\n");
    sb.append("    merchantOverrideFlag: ").append(toIndentedString(merchantOverrideFlag)).append("\n");
    sb.append("    capturedSignature: ").append(toIndentedString(capturedSignature)).append("\n");
    sb.append("    protectedSignature: ").append(toIndentedString(protectedSignature)).append("\n");
    sb.append("    customerLanguage: ").append(toIndentedString(customerLanguage)).append("\n");
    sb.append("    onlineFlag: ").append(toIndentedString(onlineFlag)).append("\n");
    sb.append("    authenticationMethod: ").append(toIndentedString(authenticationMethod)).append("\n");
    sb.append("    validityDate: ").append(toIndentedString(validityDate)).append("\n");
    sb.append("    paymentAcquirerData: ").append(toIndentedString(paymentAcquirerData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of PaymentResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentResult
   * @throws JsonProcessingException if the JSON string is invalid with respect to PaymentResult
   */
  public static PaymentResult fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, PaymentResult.class);
  }
/**
  * Convert an instance of PaymentResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
