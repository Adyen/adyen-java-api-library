/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.DocumentQualifier;
import com.adyen.model.terminaldemo.OutputContent;
import com.adyen.model.terminaldemo.ResponseMode;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * PrintOutput
 */
@JsonPropertyOrder({
  PrintOutput.JSON_PROPERTY_DOCUMENT_QUALIFIER,
  PrintOutput.JSON_PROPERTY_RESPONSE_MODE,
  PrintOutput.JSON_PROPERTY_INTEGRATED_PRINT_FLAG,
  PrintOutput.JSON_PROPERTY_REQUIRED_SIGNATURE_FLAG,
  PrintOutput.JSON_PROPERTY_OUTPUT_CONTENT
})

public class PrintOutput {
  public static final String JSON_PROPERTY_DOCUMENT_QUALIFIER = "DocumentQualifier";
  private DocumentQualifier documentQualifier;

  public static final String JSON_PROPERTY_RESPONSE_MODE = "ResponseMode";
  private ResponseMode responseMode;

  public static final String JSON_PROPERTY_INTEGRATED_PRINT_FLAG = "IntegratedPrintFlag";
  private Boolean integratedPrintFlag;

  public static final String JSON_PROPERTY_REQUIRED_SIGNATURE_FLAG = "RequiredSignatureFlag";
  private Boolean requiredSignatureFlag;

  public static final String JSON_PROPERTY_OUTPUT_CONTENT = "OutputContent";
  private OutputContent outputContent;

  public PrintOutput() { 
  }

  /**
   * documentQualifier
   *
   * @param documentQualifier 
   * @return the current {@code PrintOutput} instance, allowing for method chaining
   */
  public PrintOutput documentQualifier(DocumentQualifier documentQualifier) {
    this.documentQualifier = documentQualifier;
    return this;
  }

  /**
   * Get documentQualifier
   * @return documentQualifier 
   */
  @JsonProperty(JSON_PROPERTY_DOCUMENT_QUALIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DocumentQualifier getDocumentQualifier() {
    return documentQualifier;
  }

  /**
   * documentQualifier
   *
   * @param documentQualifier 
   */
  @JsonProperty(JSON_PROPERTY_DOCUMENT_QUALIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentQualifier(DocumentQualifier documentQualifier) {
    this.documentQualifier = documentQualifier;
  }

  /**
   * responseMode
   *
   * @param responseMode 
   * @return the current {@code PrintOutput} instance, allowing for method chaining
   */
  public PrintOutput responseMode(ResponseMode responseMode) {
    this.responseMode = responseMode;
    return this;
  }

  /**
   * Get responseMode
   * @return responseMode 
   */
  @JsonProperty(JSON_PROPERTY_RESPONSE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ResponseMode getResponseMode() {
    return responseMode;
  }

  /**
   * responseMode
   *
   * @param responseMode 
   */
  @JsonProperty(JSON_PROPERTY_RESPONSE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseMode(ResponseMode responseMode) {
    this.responseMode = responseMode;
  }

  /**
   * Type of the print integrated in other prints. Allows a separated printing (paper cut if available), or integration with the sale receipt or other print. If the printing is integrated, the response is always immediate, even if the &#x60;ResponseMode&#x60; is set to &#x60;PrintEnd&#x60;.
   *
   * @param integratedPrintFlag Type of the print integrated in other prints. Allows a separated printing (paper cut if available), or integration with the sale receipt or other print. If the printing is integrated, the response is always immediate, even if the &#x60;ResponseMode&#x60; is set to &#x60;PrintEnd&#x60;.
   * @return the current {@code PrintOutput} instance, allowing for method chaining
   */
  public PrintOutput integratedPrintFlag(Boolean integratedPrintFlag) {
    this.integratedPrintFlag = integratedPrintFlag;
    return this;
  }

  /**
   * Type of the print integrated in other prints. Allows a separated printing (paper cut if available), or integration with the sale receipt or other print. If the printing is integrated, the response is always immediate, even if the &#x60;ResponseMode&#x60; is set to &#x60;PrintEnd&#x60;.
   * @return integratedPrintFlag Type of the print integrated in other prints. Allows a separated printing (paper cut if available), or integration with the sale receipt or other print. If the printing is integrated, the response is always immediate, even if the &#x60;ResponseMode&#x60; is set to &#x60;PrintEnd&#x60;.
   */
  @JsonProperty(JSON_PROPERTY_INTEGRATED_PRINT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIntegratedPrintFlag() {
    return integratedPrintFlag;
  }

  /**
   * Type of the print integrated in other prints. Allows a separated printing (paper cut if available), or integration with the sale receipt or other print. If the printing is integrated, the response is always immediate, even if the &#x60;ResponseMode&#x60; is set to &#x60;PrintEnd&#x60;.
   *
   * @param integratedPrintFlag Type of the print integrated in other prints. Allows a separated printing (paper cut if available), or integration with the sale receipt or other print. If the printing is integrated, the response is always immediate, even if the &#x60;ResponseMode&#x60; is set to &#x60;PrintEnd&#x60;.
   */
  @JsonProperty(JSON_PROPERTY_INTEGRATED_PRINT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntegratedPrintFlag(Boolean integratedPrintFlag) {
    this.integratedPrintFlag = integratedPrintFlag;
  }

  /**
   * Indicates that the cardholder payment receipt requires a physical signature by the Customer.
   *
   * @param requiredSignatureFlag Indicates that the cardholder payment receipt requires a physical signature by the Customer.
   * @return the current {@code PrintOutput} instance, allowing for method chaining
   */
  public PrintOutput requiredSignatureFlag(Boolean requiredSignatureFlag) {
    this.requiredSignatureFlag = requiredSignatureFlag;
    return this;
  }

  /**
   * Indicates that the cardholder payment receipt requires a physical signature by the Customer.
   * @return requiredSignatureFlag Indicates that the cardholder payment receipt requires a physical signature by the Customer.
   */
  @JsonProperty(JSON_PROPERTY_REQUIRED_SIGNATURE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRequiredSignatureFlag() {
    return requiredSignatureFlag;
  }

  /**
   * Indicates that the cardholder payment receipt requires a physical signature by the Customer.
   *
   * @param requiredSignatureFlag Indicates that the cardholder payment receipt requires a physical signature by the Customer.
   */
  @JsonProperty(JSON_PROPERTY_REQUIRED_SIGNATURE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiredSignatureFlag(Boolean requiredSignatureFlag) {
    this.requiredSignatureFlag = requiredSignatureFlag;
  }

  /**
   * outputContent
   *
   * @param outputContent 
   * @return the current {@code PrintOutput} instance, allowing for method chaining
   */
  public PrintOutput outputContent(OutputContent outputContent) {
    this.outputContent = outputContent;
    return this;
  }

  /**
   * Get outputContent
   * @return outputContent 
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OutputContent getOutputContent() {
    return outputContent;
  }

  /**
   * outputContent
   *
   * @param outputContent 
   */
  @JsonProperty(JSON_PROPERTY_OUTPUT_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputContent(OutputContent outputContent) {
    this.outputContent = outputContent;
  }

  /**
   * Return true if this PrintOutput object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrintOutput printOutput = (PrintOutput) o;
    return Objects.equals(this.documentQualifier, printOutput.documentQualifier) &&
        Objects.equals(this.responseMode, printOutput.responseMode) &&
        Objects.equals(this.integratedPrintFlag, printOutput.integratedPrintFlag) &&
        Objects.equals(this.requiredSignatureFlag, printOutput.requiredSignatureFlag) &&
        Objects.equals(this.outputContent, printOutput.outputContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentQualifier, responseMode, integratedPrintFlag, requiredSignatureFlag, outputContent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrintOutput {\n");
    sb.append("    documentQualifier: ").append(toIndentedString(documentQualifier)).append("\n");
    sb.append("    responseMode: ").append(toIndentedString(responseMode)).append("\n");
    sb.append("    integratedPrintFlag: ").append(toIndentedString(integratedPrintFlag)).append("\n");
    sb.append("    requiredSignatureFlag: ").append(toIndentedString(requiredSignatureFlag)).append("\n");
    sb.append("    outputContent: ").append(toIndentedString(outputContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of PrintOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrintOutput
   * @throws JsonProcessingException if the JSON string is invalid with respect to PrintOutput
   */
  public static PrintOutput fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, PrintOutput.class);
  }
/**
  * Convert an instance of PrintOutput to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
