/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.SaleTerminalData;
import com.adyen.model.terminaldemo.SaleToIssuerData;
import com.adyen.model.terminaldemo.TokenRequestedType;
import com.adyen.model.terminaldemo.TransactionIDType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Data associated with the Sale System, with a particular value during the processing of the payment by the POI, including the cards acquisition.
 */
@JsonPropertyOrder({
  SaleData.JSON_PROPERTY_OPERATOR_I_D,
  SaleData.JSON_PROPERTY_OPERATOR_LANGUAGE,
  SaleData.JSON_PROPERTY_SHIFT_NUMBER,
  SaleData.JSON_PROPERTY_SALE_TRANSACTION_I_D,
  SaleData.JSON_PROPERTY_SALE_REFERENCE_I_D,
  SaleData.JSON_PROPERTY_SALE_TERMINAL_DATA,
  SaleData.JSON_PROPERTY_TOKEN_REQUESTED_TYPE,
  SaleData.JSON_PROPERTY_CUSTOMER_ORDER_I_D,
  SaleData.JSON_PROPERTY_CUSTOMER_ORDER_REQ,
  SaleData.JSON_PROPERTY_SALE_TO_P_O_I_DATA,
  SaleData.JSON_PROPERTY_SALE_TO_ACQUIRER_DATA,
  SaleData.JSON_PROPERTY_SALE_TO_ISSUER_DATA
})

public class SaleData {
  public static final String JSON_PROPERTY_OPERATOR_I_D = "OperatorID";
  private String operatorID;

  public static final String JSON_PROPERTY_OPERATOR_LANGUAGE = "OperatorLanguage";
  private String operatorLanguage;

  public static final String JSON_PROPERTY_SHIFT_NUMBER = "ShiftNumber";
  private String shiftNumber;

  public static final String JSON_PROPERTY_SALE_TRANSACTION_I_D = "SaleTransactionID";
  private TransactionIDType saleTransactionID;

  public static final String JSON_PROPERTY_SALE_REFERENCE_I_D = "SaleReferenceID";
  private String saleReferenceID;

  public static final String JSON_PROPERTY_SALE_TERMINAL_DATA = "SaleTerminalData";
  private SaleTerminalData saleTerminalData;

  public static final String JSON_PROPERTY_TOKEN_REQUESTED_TYPE = "TokenRequestedType";
  private TokenRequestedType tokenRequestedType;

  public static final String JSON_PROPERTY_CUSTOMER_ORDER_I_D = "CustomerOrderID";
  private String customerOrderID;

  /**
   * Gets or Sets customerOrderReq
   */
  public enum CustomerOrderReqEnum {

    BOTH(String.valueOf("Both")),

    CLOSED(String.valueOf("Closed")),

    OPEN(String.valueOf("Open"));

    private static final Logger LOG = Logger.getLogger(CustomerOrderReqEnum.class.getName());

    private String value;

    CustomerOrderReqEnum(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CustomerOrderReqEnum fromValue(String value) {
      for (CustomerOrderReqEnum b : CustomerOrderReqEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      // handling unexpected value
      LOG.warning("CustomerOrderReqEnum: unexpected enum value '" + value + "' - Supported values are "+ Arrays.toString(CustomerOrderReqEnum.values()));
      return null;
    }
  }

  public static final String JSON_PROPERTY_CUSTOMER_ORDER_REQ = "CustomerOrderReq";
  private List<CustomerOrderReqEnum> customerOrderReq;

  public static final String JSON_PROPERTY_SALE_TO_P_O_I_DATA = "SaleToPOIData";
  private String saleToPOIData;

  public static final String JSON_PROPERTY_SALE_TO_ACQUIRER_DATA = "SaleToAcquirerData";
  private String saleToAcquirerData;

  public static final String JSON_PROPERTY_SALE_TO_ISSUER_DATA = "SaleToIssuerData";
  private SaleToIssuerData saleToIssuerData;

  public SaleData() { 
  }

  /**
   * Identification of the Cashier or Operator.
   *
   * @param operatorID Identification of the Cashier or Operator.
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData operatorID(String operatorID) {
    this.operatorID = operatorID;
    return this;
  }

  /**
   * Identification of the Cashier or Operator.
   * @return operatorID Identification of the Cashier or Operator.
   */
  @JsonProperty(JSON_PROPERTY_OPERATOR_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOperatorID() {
    return operatorID;
  }

  /**
   * Identification of the Cashier or Operator.
   *
   * @param operatorID Identification of the Cashier or Operator.
   */
  @JsonProperty(JSON_PROPERTY_OPERATOR_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperatorID(String operatorID) {
    this.operatorID = operatorID;
  }

  /**
   * Language of the Cashier or Operator. If different from the Login.
   *
   * @param operatorLanguage Language of the Cashier or Operator. If different from the Login.
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData operatorLanguage(String operatorLanguage) {
    this.operatorLanguage = operatorLanguage;
    return this;
  }

  /**
   * Language of the Cashier or Operator. If different from the Login.
   * @return operatorLanguage Language of the Cashier or Operator. If different from the Login.
   */
  @JsonProperty(JSON_PROPERTY_OPERATOR_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOperatorLanguage() {
    return operatorLanguage;
  }

  /**
   * Language of the Cashier or Operator. If different from the Login.
   *
   * @param operatorLanguage Language of the Cashier or Operator. If different from the Login.
   */
  @JsonProperty(JSON_PROPERTY_OPERATOR_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperatorLanguage(String operatorLanguage) {
    this.operatorLanguage = operatorLanguage;
  }

  /**
   * Shift number. If different from the Login, see Login SaleData.
   *
   * @param shiftNumber Shift number. If different from the Login, see Login SaleData.
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData shiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
    return this;
  }

  /**
   * Shift number. If different from the Login, see Login SaleData.
   * @return shiftNumber Shift number. If different from the Login, see Login SaleData.
   */
  @JsonProperty(JSON_PROPERTY_SHIFT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getShiftNumber() {
    return shiftNumber;
  }

  /**
   * Shift number. If different from the Login, see Login SaleData.
   *
   * @param shiftNumber Shift number. If different from the Login, see Login SaleData.
   */
  @JsonProperty(JSON_PROPERTY_SHIFT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
  }

  /**
   * saleTransactionID
   *
   * @param saleTransactionID 
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData saleTransactionID(TransactionIDType saleTransactionID) {
    this.saleTransactionID = saleTransactionID;
    return this;
  }

  /**
   * Get saleTransactionID
   * @return saleTransactionID 
   */
  @JsonProperty(JSON_PROPERTY_SALE_TRANSACTION_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TransactionIDType getSaleTransactionID() {
    return saleTransactionID;
  }

  /**
   * saleTransactionID
   *
   * @param saleTransactionID 
   */
  @JsonProperty(JSON_PROPERTY_SALE_TRANSACTION_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaleTransactionID(TransactionIDType saleTransactionID) {
    this.saleTransactionID = saleTransactionID;
  }

  /**
   * Identification of a Sale global transaction for a sequence of related POI transactions. If payment reservation.
   *
   * @param saleReferenceID Identification of a Sale global transaction for a sequence of related POI transactions. If payment reservation.
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData saleReferenceID(String saleReferenceID) {
    this.saleReferenceID = saleReferenceID;
    return this;
  }

  /**
   * Identification of a Sale global transaction for a sequence of related POI transactions. If payment reservation.
   * @return saleReferenceID Identification of a Sale global transaction for a sequence of related POI transactions. If payment reservation.
   */
  @JsonProperty(JSON_PROPERTY_SALE_REFERENCE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSaleReferenceID() {
    return saleReferenceID;
  }

  /**
   * Identification of a Sale global transaction for a sequence of related POI transactions. If payment reservation.
   *
   * @param saleReferenceID Identification of a Sale global transaction for a sequence of related POI transactions. If payment reservation.
   */
  @JsonProperty(JSON_PROPERTY_SALE_REFERENCE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaleReferenceID(String saleReferenceID) {
    this.saleReferenceID = saleReferenceID;
  }

  /**
   * saleTerminalData
   *
   * @param saleTerminalData 
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData saleTerminalData(SaleTerminalData saleTerminalData) {
    this.saleTerminalData = saleTerminalData;
    return this;
  }

  /**
   * Get saleTerminalData
   * @return saleTerminalData 
   */
  @JsonProperty(JSON_PROPERTY_SALE_TERMINAL_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SaleTerminalData getSaleTerminalData() {
    return saleTerminalData;
  }

  /**
   * saleTerminalData
   *
   * @param saleTerminalData 
   */
  @JsonProperty(JSON_PROPERTY_SALE_TERMINAL_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaleTerminalData(SaleTerminalData saleTerminalData) {
    this.saleTerminalData = saleTerminalData;
  }

  /**
   * tokenRequestedType
   *
   * @param tokenRequestedType 
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData tokenRequestedType(TokenRequestedType tokenRequestedType) {
    this.tokenRequestedType = tokenRequestedType;
    return this;
  }

  /**
   * Get tokenRequestedType
   * @return tokenRequestedType 
   */
  @JsonProperty(JSON_PROPERTY_TOKEN_REQUESTED_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TokenRequestedType getTokenRequestedType() {
    return tokenRequestedType;
  }

  /**
   * tokenRequestedType
   *
   * @param tokenRequestedType 
   */
  @JsonProperty(JSON_PROPERTY_TOKEN_REQUESTED_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTokenRequestedType(TokenRequestedType tokenRequestedType) {
    this.tokenRequestedType = tokenRequestedType;
  }

  /**
   * Additional and optional identification of a customer order.
   *
   * @param customerOrderID Additional and optional identification of a customer order.
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData customerOrderID(String customerOrderID) {
    this.customerOrderID = customerOrderID;
    return this;
  }

  /**
   * Additional and optional identification of a customer order.
   * @return customerOrderID Additional and optional identification of a customer order.
   */
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ORDER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCustomerOrderID() {
    return customerOrderID;
  }

  /**
   * Additional and optional identification of a customer order.
   *
   * @param customerOrderID Additional and optional identification of a customer order.
   */
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ORDER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomerOrderID(String customerOrderID) {
    this.customerOrderID = customerOrderID;
  }

  /**
   * List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   *
   * @param customerOrderReq List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData customerOrderReq(List<CustomerOrderReqEnum> customerOrderReq) {
    this.customerOrderReq = customerOrderReq;
    return this;
  }

  public SaleData addCustomerOrderReqItem(CustomerOrderReqEnum customerOrderReqItem) {
    if (this.customerOrderReq == null) {
      this.customerOrderReq = new ArrayList<>();
    }
    this.customerOrderReq.add(customerOrderReqItem);
    return this;
  }

  /**
   * List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   * @return customerOrderReq List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   */
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ORDER_REQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<CustomerOrderReqEnum> getCustomerOrderReq() {
    return customerOrderReq;
  }

  /**
   * List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   *
   * @param customerOrderReq List of customer order open, closed or both to be sent in the response messages. Possible values: * **Both** * **Closed** * **Open**
   */
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ORDER_REQ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomerOrderReq(List<CustomerOrderReqEnum> customerOrderReq) {
    this.customerOrderReq = customerOrderReq;
  }

  /**
   * Sale information intended for the POI. Stored with the transaction.
   *
   * @param saleToPOIData Sale information intended for the POI. Stored with the transaction.
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData saleToPOIData(String saleToPOIData) {
    this.saleToPOIData = saleToPOIData;
    return this;
  }

  /**
   * Sale information intended for the POI. Stored with the transaction.
   * @return saleToPOIData Sale information intended for the POI. Stored with the transaction.
   */
  @JsonProperty(JSON_PROPERTY_SALE_TO_P_O_I_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSaleToPOIData() {
    return saleToPOIData;
  }

  /**
   * Sale information intended for the POI. Stored with the transaction.
   *
   * @param saleToPOIData Sale information intended for the POI. Stored with the transaction.
   */
  @JsonProperty(JSON_PROPERTY_SALE_TO_P_O_I_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaleToPOIData(String saleToPOIData) {
    this.saleToPOIData = saleToPOIData;
  }

  /**
   * Sale information intended for the Acquirer. Send to the Acquirer if present.
   *
   * @param saleToAcquirerData Sale information intended for the Acquirer. Send to the Acquirer if present.
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData saleToAcquirerData(String saleToAcquirerData) {
    this.saleToAcquirerData = saleToAcquirerData;
    return this;
  }

  /**
   * Sale information intended for the Acquirer. Send to the Acquirer if present.
   * @return saleToAcquirerData Sale information intended for the Acquirer. Send to the Acquirer if present.
   */
  @JsonProperty(JSON_PROPERTY_SALE_TO_ACQUIRER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSaleToAcquirerData() {
    return saleToAcquirerData;
  }

  /**
   * Sale information intended for the Acquirer. Send to the Acquirer if present.
   *
   * @param saleToAcquirerData Sale information intended for the Acquirer. Send to the Acquirer if present.
   */
  @JsonProperty(JSON_PROPERTY_SALE_TO_ACQUIRER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaleToAcquirerData(String saleToAcquirerData) {
    this.saleToAcquirerData = saleToAcquirerData;
  }

  /**
   * saleToIssuerData
   *
   * @param saleToIssuerData 
   * @return the current {@code SaleData} instance, allowing for method chaining
   */
  public SaleData saleToIssuerData(SaleToIssuerData saleToIssuerData) {
    this.saleToIssuerData = saleToIssuerData;
    return this;
  }

  /**
   * Get saleToIssuerData
   * @return saleToIssuerData 
   */
  @JsonProperty(JSON_PROPERTY_SALE_TO_ISSUER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SaleToIssuerData getSaleToIssuerData() {
    return saleToIssuerData;
  }

  /**
   * saleToIssuerData
   *
   * @param saleToIssuerData 
   */
  @JsonProperty(JSON_PROPERTY_SALE_TO_ISSUER_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaleToIssuerData(SaleToIssuerData saleToIssuerData) {
    this.saleToIssuerData = saleToIssuerData;
  }

  /**
   * Return true if this SaleData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleData saleData = (SaleData) o;
    return Objects.equals(this.operatorID, saleData.operatorID) &&
        Objects.equals(this.operatorLanguage, saleData.operatorLanguage) &&
        Objects.equals(this.shiftNumber, saleData.shiftNumber) &&
        Objects.equals(this.saleTransactionID, saleData.saleTransactionID) &&
        Objects.equals(this.saleReferenceID, saleData.saleReferenceID) &&
        Objects.equals(this.saleTerminalData, saleData.saleTerminalData) &&
        Objects.equals(this.tokenRequestedType, saleData.tokenRequestedType) &&
        Objects.equals(this.customerOrderID, saleData.customerOrderID) &&
        Objects.equals(this.customerOrderReq, saleData.customerOrderReq) &&
        Objects.equals(this.saleToPOIData, saleData.saleToPOIData) &&
        Objects.equals(this.saleToAcquirerData, saleData.saleToAcquirerData) &&
        Objects.equals(this.saleToIssuerData, saleData.saleToIssuerData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operatorID, operatorLanguage, shiftNumber, saleTransactionID, saleReferenceID, saleTerminalData, tokenRequestedType, customerOrderID, customerOrderReq, saleToPOIData, saleToAcquirerData, saleToIssuerData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleData {\n");
    sb.append("    operatorID: ").append(toIndentedString(operatorID)).append("\n");
    sb.append("    operatorLanguage: ").append(toIndentedString(operatorLanguage)).append("\n");
    sb.append("    shiftNumber: ").append(toIndentedString(shiftNumber)).append("\n");
    sb.append("    saleTransactionID: ").append(toIndentedString(saleTransactionID)).append("\n");
    sb.append("    saleReferenceID: ").append(toIndentedString(saleReferenceID)).append("\n");
    sb.append("    saleTerminalData: ").append(toIndentedString(saleTerminalData)).append("\n");
    sb.append("    tokenRequestedType: ").append(toIndentedString(tokenRequestedType)).append("\n");
    sb.append("    customerOrderID: ").append(toIndentedString(customerOrderID)).append("\n");
    sb.append("    customerOrderReq: ").append(toIndentedString(customerOrderReq)).append("\n");
    sb.append("    saleToPOIData: ").append(toIndentedString(saleToPOIData)).append("\n");
    sb.append("    saleToAcquirerData: ").append(toIndentedString(saleToAcquirerData)).append("\n");
    sb.append("    saleToIssuerData: ").append(toIndentedString(saleToIssuerData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of SaleData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SaleData
   * @throws JsonProcessingException if the JSON string is invalid with respect to SaleData
   */
  public static SaleData fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, SaleData.class);
  }
/**
  * Convert an instance of SaleData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
