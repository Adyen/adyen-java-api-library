/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.ErrorCondition;
import com.adyen.model.terminaldemo.Result;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Result of a message request processing. If Result is Success, &#x60;ErrorCondition&#x60; is absent or not used in the processing of the message. In the other cases, the &#x60;ErrorCondition&#x60; has to be present and can refine the processing of the message response. &#x60;AdditionalResponse&#x60; gives more information about the success or the failure of the message request processing, for logging without real time involvements.
 */
@JsonPropertyOrder({
  Response.JSON_PROPERTY_RESULT,
  Response.JSON_PROPERTY_ERROR_CONDITION,
  Response.JSON_PROPERTY_ADDITIONAL_RESPONSE
})

public class Response {
  public static final String JSON_PROPERTY_RESULT = "Result";
  private Result result;

  public static final String JSON_PROPERTY_ERROR_CONDITION = "ErrorCondition";
  private ErrorCondition errorCondition;

  public static final String JSON_PROPERTY_ADDITIONAL_RESPONSE = "AdditionalResponse";
  private String additionalResponse;

  public Response() { 
  }

  /**
   * result
   *
   * @param result 
   * @return the current {@code Response} instance, allowing for method chaining
   */
  public Response result(Result result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result 
   */
  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Result getResult() {
    return result;
  }

  /**
   * result
   *
   * @param result 
   */
  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResult(Result result) {
    this.result = result;
  }

  /**
   * errorCondition
   *
   * @param errorCondition 
   * @return the current {@code Response} instance, allowing for method chaining
   */
  public Response errorCondition(ErrorCondition errorCondition) {
    this.errorCondition = errorCondition;
    return this;
  }

  /**
   * Get errorCondition
   * @return errorCondition 
   */
  @JsonProperty(JSON_PROPERTY_ERROR_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ErrorCondition getErrorCondition() {
    return errorCondition;
  }

  /**
   * errorCondition
   *
   * @param errorCondition 
   */
  @JsonProperty(JSON_PROPERTY_ERROR_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorCondition(ErrorCondition errorCondition) {
    this.errorCondition = errorCondition;
  }

  /**
   * Additional information related to processing status of a message request. If present, the POI logs it for further examination.
   *
   * @param additionalResponse Additional information related to processing status of a message request. If present, the POI logs it for further examination.
   * @return the current {@code Response} instance, allowing for method chaining
   */
  public Response additionalResponse(String additionalResponse) {
    this.additionalResponse = additionalResponse;
    return this;
  }

  /**
   * Additional information related to processing status of a message request. If present, the POI logs it for further examination.
   * @return additionalResponse Additional information related to processing status of a message request. If present, the POI logs it for further examination.
   */
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAdditionalResponse() {
    return additionalResponse;
  }

  /**
   * Additional information related to processing status of a message request. If present, the POI logs it for further examination.
   *
   * @param additionalResponse Additional information related to processing status of a message request. If present, the POI logs it for further examination.
   */
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalResponse(String additionalResponse) {
    this.additionalResponse = additionalResponse;
  }

  /**
   * Return true if this Response object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Response response = (Response) o;
    return Objects.equals(this.result, response.result) &&
        Objects.equals(this.errorCondition, response.errorCondition) &&
        Objects.equals(this.additionalResponse, response.additionalResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(result, errorCondition, additionalResponse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Response {\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    errorCondition: ").append(toIndentedString(errorCondition)).append("\n");
    sb.append("    additionalResponse: ").append(toIndentedString(additionalResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Response
   * @throws JsonProcessingException if the JSON string is invalid with respect to Response
   */
  public static Response fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Response.class);
  }
/**
  * Convert an instance of Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
