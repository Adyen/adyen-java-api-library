/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminaldemo;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.terminaldemo.DisplayOutput;
import com.adyen.model.terminaldemo.InputData;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Content of the &#x60;InputRequest&#x60; message. It conveys the data to display and how to process it. In addition to the display on the Input Device, it might contain an operation (the &#x60;DisplayOutput&#x60; element) per Display Device type.
 */
@JsonPropertyOrder({
  InputRequest.JSON_PROPERTY_DISPLAY_OUTPUT,
  InputRequest.JSON_PROPERTY_INPUT_DATA
})

public class InputRequest {
  public static final String JSON_PROPERTY_DISPLAY_OUTPUT = "DisplayOutput";
  private DisplayOutput displayOutput;

  public static final String JSON_PROPERTY_INPUT_DATA = "InputData";
  private InputData inputData;

  public InputRequest() { 
  }

  /**
   * displayOutput
   *
   * @param displayOutput 
   * @return the current {@code InputRequest} instance, allowing for method chaining
   */
  public InputRequest displayOutput(DisplayOutput displayOutput) {
    this.displayOutput = displayOutput;
    return this;
  }

  /**
   * Get displayOutput
   * @return displayOutput 
   */
  @JsonProperty(JSON_PROPERTY_DISPLAY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DisplayOutput getDisplayOutput() {
    return displayOutput;
  }

  /**
   * displayOutput
   *
   * @param displayOutput 
   */
  @JsonProperty(JSON_PROPERTY_DISPLAY_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayOutput(DisplayOutput displayOutput) {
    this.displayOutput = displayOutput;
  }

  /**
   * inputData
   *
   * @param inputData 
   * @return the current {@code InputRequest} instance, allowing for method chaining
   */
  public InputRequest inputData(InputData inputData) {
    this.inputData = inputData;
    return this;
  }

  /**
   * Get inputData
   * @return inputData 
   */
  @JsonProperty(JSON_PROPERTY_INPUT_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InputData getInputData() {
    return inputData;
  }

  /**
   * inputData
   *
   * @param inputData 
   */
  @JsonProperty(JSON_PROPERTY_INPUT_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInputData(InputData inputData) {
    this.inputData = inputData;
  }

  /**
   * Return true if this InputRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputRequest inputRequest = (InputRequest) o;
    return Objects.equals(this.displayOutput, inputRequest.displayOutput) &&
        Objects.equals(this.inputData, inputRequest.inputData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayOutput, inputData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputRequest {\n");
    sb.append("    displayOutput: ").append(toIndentedString(displayOutput)).append("\n");
    sb.append("    inputData: ").append(toIndentedString(inputData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of InputRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputRequest
   * @throws JsonProcessingException if the JSON string is invalid with respect to InputRequest
   */
  public static InputRequest fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, InputRequest.class);
  }
/**
  * Convert an instance of InputRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
