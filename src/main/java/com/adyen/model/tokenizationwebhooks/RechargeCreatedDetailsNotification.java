/*
 * Tokenization webhooks
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.adyen.model.tokenizationwebhooks;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.time.OffsetDateTime;
import java.util.Objects;

/** RechargeCreatedDetailsNotification */
@JsonPropertyOrder({
  RechargeCreatedDetailsNotification.JSON_PROPERTY_CREATED_AT,
  RechargeCreatedDetailsNotification.JSON_PROPERTY_DATA,
  RechargeCreatedDetailsNotification.JSON_PROPERTY_ENVIRONMENT,
  RechargeCreatedDetailsNotification.JSON_PROPERTY_EVENT_ID,
  RechargeCreatedDetailsNotification.JSON_PROPERTY_TYPE,
  RechargeCreatedDetailsNotification.JSON_PROPERTY_VERSION
})
public class RechargeCreatedDetailsNotification {
  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_DATA = "data";
  private RecurringTokenStoreOperation data;

  public static final String JSON_PROPERTY_ENVIRONMENT = "environment";
  private String environment;

  public static final String JSON_PROPERTY_EVENT_ID = "eventId";
  private String eventId;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public RechargeCreatedDetailsNotification() {}

  /**
   * createdAt
   *
   * @param createdAt
   * @return the current {@code RechargeCreatedDetailsNotification} instance, allowing for method
   *     chaining
   */
  public RechargeCreatedDetailsNotification createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   *
   * @return createdAt
   */
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  /**
   * createdAt
   *
   * @param createdAt
   */
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  /**
   * data
   *
   * @param data
   * @return the current {@code RechargeCreatedDetailsNotification} instance, allowing for method
   *     chaining
   */
  public RechargeCreatedDetailsNotification data(RecurringTokenStoreOperation data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   *
   * @return data
   */
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public RecurringTokenStoreOperation getData() {
    return data;
  }

  /**
   * data
   *
   * @param data
   */
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setData(RecurringTokenStoreOperation data) {
    this.data = data;
  }

  /**
   * environment
   *
   * @param environment
   * @return the current {@code RechargeCreatedDetailsNotification} instance, allowing for method
   *     chaining
   */
  public RechargeCreatedDetailsNotification environment(String environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   *
   * @return environment
   */
  @JsonProperty(JSON_PROPERTY_ENVIRONMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEnvironment() {
    return environment;
  }

  /**
   * environment
   *
   * @param environment
   */
  @JsonProperty(JSON_PROPERTY_ENVIRONMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnvironment(String environment) {
    this.environment = environment;
  }

  /**
   * eventId
   *
   * @param eventId
   * @return the current {@code RechargeCreatedDetailsNotification} instance, allowing for method
   *     chaining
   */
  public RechargeCreatedDetailsNotification eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Get eventId
   *
   * @return eventId
   */
  @JsonProperty(JSON_PROPERTY_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEventId() {
    return eventId;
  }

  /**
   * eventId
   *
   * @param eventId
   */
  @JsonProperty(JSON_PROPERTY_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventId(String eventId) {
    this.eventId = eventId;
  }

  /**
   * type
   *
   * @param type
   * @return the current {@code RechargeCreatedDetailsNotification} instance, allowing for method
   *     chaining
   */
  public RechargeCreatedDetailsNotification type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getType() {
    return type;
  }

  /**
   * type
   *
   * @param type
   */
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  /**
   * version
   *
   * @param version
   * @return the current {@code RechargeCreatedDetailsNotification} instance, allowing for method
   *     chaining
   */
  public RechargeCreatedDetailsNotification version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   *
   * @return version
   */
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getVersion() {
    return version;
  }

  /**
   * version
   *
   * @param version
   */
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }

  /** Return true if this RechargeCreatedDetailsNotification object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RechargeCreatedDetailsNotification rechargeCreatedDetailsNotification =
        (RechargeCreatedDetailsNotification) o;
    return Objects.equals(this.createdAt, rechargeCreatedDetailsNotification.createdAt)
        && Objects.equals(this.data, rechargeCreatedDetailsNotification.data)
        && Objects.equals(this.environment, rechargeCreatedDetailsNotification.environment)
        && Objects.equals(this.eventId, rechargeCreatedDetailsNotification.eventId)
        && Objects.equals(this.type, rechargeCreatedDetailsNotification.type)
        && Objects.equals(this.version, rechargeCreatedDetailsNotification.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, data, environment, eventId, type, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RechargeCreatedDetailsNotification {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Create an instance of RechargeCreatedDetailsNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RechargeCreatedDetailsNotification
   * @throws JsonProcessingException if the JSON string is invalid with respect to
   *     RechargeCreatedDetailsNotification
   */
  public static RechargeCreatedDetailsNotification fromJson(String jsonString)
      throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, RechargeCreatedDetailsNotification.class);
  }

  /**
   * Convert an instance of RechargeCreatedDetailsNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
