/*
 * Adyen Checkout API
 *
 * The version of the OpenAPI document: 71
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.adyen.model.checkout;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.util.*;

/** PayToPaymentMethod */
@JsonPropertyOrder({PayToPaymentMethod.JSON_PROPERTY_SHOPPER_REFERENCE})
@JsonIgnoreProperties(
    value =
        "type", // ignore manually set type, it will be automatically generated by Jackson during
    // serialization
    allowSetters = true // allows the type to be set during deserialization
    )
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "type",
    visible = true)
public class PayToPaymentMethod extends ShopperIdPaymentMethod {
  public static final String JSON_PROPERTY_SHOPPER_REFERENCE = "shopperReference";
  private String shopperReference;

  public PayToPaymentMethod() {}

  /**
   * shopperReference
   *
   * @param shopperReference
   * @return the current {@code PayToPaymentMethod} instance, allowing for method chaining
   */
  public PayToPaymentMethod shopperReference(String shopperReference) {
    this.shopperReference = shopperReference;
    return this;
  }

  /**
   * Get shopperReference
   *
   * @return shopperReference
   */
  @JsonProperty(JSON_PROPERTY_SHOPPER_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getShopperReference() {
    return shopperReference;
  }

  /**
   * shopperReference
   *
   * @param shopperReference
   */
  @JsonProperty(JSON_PROPERTY_SHOPPER_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShopperReference(String shopperReference) {
    this.shopperReference = shopperReference;
  }

  /** Return true if this PayToPaymentMethod object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayToPaymentMethod payToPaymentMethod = (PayToPaymentMethod) o;
    return Objects.equals(this.shopperReference, payToPaymentMethod.shopperReference)
        && super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shopperReference, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayToPaymentMethod {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    shopperReference: ").append(toIndentedString(shopperReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  static {
    // Initialize and register the discriminator mappings.
    Map<String, Class<?>> mappings = new HashMap<>();
    mappings.put("PayToPaymentMethod", PayToPaymentMethod.class);
    JSON.registerDiscriminator(PayToPaymentMethod.class, "type", mappings);
  }

  /**
   * Create an instance of PayToPaymentMethod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayToPaymentMethod
   * @throws JsonProcessingException if the JSON string is invalid with respect to
   *     PayToPaymentMethod
   */
  public static PayToPaymentMethod fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, PayToPaymentMethod.class);
  }

  /**
   * Convert an instance of PayToPaymentMethod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
