/*
 * Adyen Checkout API
 *
 * The version of the OpenAPI document: 69
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.checkout;

import java.util.Objects;
import java.util.Arrays;
import com.adyen.model.checkout.PaymentMethod;
import com.adyen.model.checkout.StoredPaymentMethod;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.adyen.model.checkout.JSON;

/**
 * PaymentMethodsResponse
 */

public class PaymentMethodsResponse {
  public static final String SERIALIZED_NAME_PAYMENT_METHODS = "paymentMethods";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHODS)
  private List<PaymentMethod> paymentMethods = null;

  public static final String SERIALIZED_NAME_STORED_PAYMENT_METHODS = "storedPaymentMethods";
  @SerializedName(SERIALIZED_NAME_STORED_PAYMENT_METHODS)
  private List<StoredPaymentMethod> storedPaymentMethods = null;

  public PaymentMethodsResponse() { 
  }

  public PaymentMethodsResponse paymentMethods(List<PaymentMethod> paymentMethods) {
    
    this.paymentMethods = paymentMethods;
    return this;
  }

  public PaymentMethodsResponse addPaymentMethodsItem(PaymentMethod paymentMethodsItem) {
    if (this.paymentMethods == null) {
      this.paymentMethods = new ArrayList<>();
    }
    this.paymentMethods.add(paymentMethodsItem);
    return this;
  }

   /**
   * Detailed list of payment methods required to generate payment forms.
   * @return paymentMethods
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Detailed list of payment methods required to generate payment forms.")

  public List<PaymentMethod> getPaymentMethods() {
    return paymentMethods;
  }


  public void setPaymentMethods(List<PaymentMethod> paymentMethods) {
    this.paymentMethods = paymentMethods;
  }


  public PaymentMethodsResponse storedPaymentMethods(List<StoredPaymentMethod> storedPaymentMethods) {
    
    this.storedPaymentMethods = storedPaymentMethods;
    return this;
  }

  public PaymentMethodsResponse addStoredPaymentMethodsItem(StoredPaymentMethod storedPaymentMethodsItem) {
    if (this.storedPaymentMethods == null) {
      this.storedPaymentMethods = new ArrayList<>();
    }
    this.storedPaymentMethods.add(storedPaymentMethodsItem);
    return this;
  }

   /**
   * List of all stored payment methods.
   * @return storedPaymentMethods
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all stored payment methods.")

  public List<StoredPaymentMethod> getStoredPaymentMethods() {
    return storedPaymentMethods;
  }


  public void setStoredPaymentMethods(List<StoredPaymentMethod> storedPaymentMethods) {
    this.storedPaymentMethods = storedPaymentMethods;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentMethodsResponse paymentMethodsResponse = (PaymentMethodsResponse) o;
    return Objects.equals(this.paymentMethods, paymentMethodsResponse.paymentMethods) &&
        Objects.equals(this.storedPaymentMethods, paymentMethodsResponse.storedPaymentMethods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentMethods, storedPaymentMethods);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentMethodsResponse {\n");
    sb.append("    paymentMethods: ").append(toIndentedString(paymentMethods)).append("\n");
    sb.append("    storedPaymentMethods: ").append(toIndentedString(storedPaymentMethods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentMethods");
    openapiFields.add("storedPaymentMethods");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentMethodsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PaymentMethodsResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentMethodsResponse is not found in the empty JSON string", PaymentMethodsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PaymentMethodsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentMethodsResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraypaymentMethods = jsonObj.getAsJsonArray("paymentMethods");
      if (jsonArraypaymentMethods != null) {
        // ensure the json data is an array
        if (!jsonObj.get("paymentMethods").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `paymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("paymentMethods").toString()));
        }

        // validate the optional field `paymentMethods` (array)
        for (int i = 0; i < jsonArraypaymentMethods.size(); i++) {
          PaymentMethod.validateJsonObject(jsonArraypaymentMethods.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraystoredPaymentMethods = jsonObj.getAsJsonArray("storedPaymentMethods");
      if (jsonArraystoredPaymentMethods != null) {
        // ensure the json data is an array
        if (!jsonObj.get("storedPaymentMethods").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `storedPaymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("storedPaymentMethods").toString()));
        }

        // validate the optional field `storedPaymentMethods` (array)
        for (int i = 0; i < jsonArraystoredPaymentMethods.size(); i++) {
          StoredPaymentMethod.validateJsonObject(jsonArraystoredPaymentMethods.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentMethodsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentMethodsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentMethodsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentMethodsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentMethodsResponse>() {
           @Override
           public void write(JsonWriter out, PaymentMethodsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentMethodsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentMethodsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentMethodsResponse
  * @throws IOException if the JSON string is invalid with respect to PaymentMethodsResponse
  */
  public static PaymentMethodsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentMethodsResponse.class);
  }

 /**
  * Convert an instance of PaymentMethodsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

