/*
 * Adyen Checkout API
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.checkout;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.checkout.ShopperIdPaymentMethod;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * UPIPaymentMethod
 */
@JsonPropertyOrder({
  UPIPaymentMethod.JSON_PROPERTY_VIRTUAL_PAYMENT_ADDRESS
})

@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class UPIPaymentMethod extends ShopperIdPaymentMethod {
  public static final String JSON_PROPERTY_VIRTUAL_PAYMENT_ADDRESS = "virtualPaymentAddress";
  private String virtualPaymentAddress;

  public UPIPaymentMethod() { 
  }

  /**
   * virtualPaymentAddress
   *
   * @param virtualPaymentAddress 
   * @return the current {@code UPIPaymentMethod} instance, allowing for method chaining
   */
  public UPIPaymentMethod virtualPaymentAddress(String virtualPaymentAddress) {
    this.virtualPaymentAddress = virtualPaymentAddress;
    return this;
  }

  /**
   * Get virtualPaymentAddress
   * @return virtualPaymentAddress 
   */
  @JsonProperty(JSON_PROPERTY_VIRTUAL_PAYMENT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getVirtualPaymentAddress() {
    return virtualPaymentAddress;
  }

  /**
   * virtualPaymentAddress
   *
   * @param virtualPaymentAddress 
   */
  @JsonProperty(JSON_PROPERTY_VIRTUAL_PAYMENT_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVirtualPaymentAddress(String virtualPaymentAddress) {
    this.virtualPaymentAddress = virtualPaymentAddress;
  }

  /**
   * Return true if this UPIPaymentMethod object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UPIPaymentMethod upIPaymentMethod = (UPIPaymentMethod) o;
    return Objects.equals(this.virtualPaymentAddress, upIPaymentMethod.virtualPaymentAddress) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(virtualPaymentAddress, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UPIPaymentMethod {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    virtualPaymentAddress: ").append(toIndentedString(virtualPaymentAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  static {
    // Initialize and register the discriminator mappings.
    Map<String, Class<?>> mappings = new HashMap<>();
    mappings.put("UPIPaymentMethod", UPIPaymentMethod.class);
    JSON.registerDiscriminator(UPIPaymentMethod.class, "type", mappings);
  }
/**
   * Create an instance of UPIPaymentMethod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UPIPaymentMethod
   * @throws JsonProcessingException if the JSON string is invalid with respect to UPIPaymentMethod
   */
  public static UPIPaymentMethod fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, UPIPaymentMethod.class);
  }
/**
  * Convert an instance of UPIPaymentMethod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
