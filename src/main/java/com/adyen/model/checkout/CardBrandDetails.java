/*
 * Adyen Checkout API
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.checkout;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * CardBrandDetails
 */
@JsonPropertyOrder({
  CardBrandDetails.JSON_PROPERTY_SUPPORTED,
  CardBrandDetails.JSON_PROPERTY_TYPE
})

public class CardBrandDetails {
  public static final String JSON_PROPERTY_SUPPORTED = "supported";
  private Boolean supported;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public CardBrandDetails() { 
  }

  /**
   * Indicates if you support the card brand.
   *
   * @param supported
   * @return the current {@code CardBrandDetails} instance, allowing for method chaining
   */
  public CardBrandDetails supported(Boolean supported) {
    this.supported = supported;
    return this;
  }

  /**
   * Indicates if you support the card brand.
   * @return supported
   */
  @ApiModelProperty(value = "Indicates if you support the card brand.")
  @JsonProperty(JSON_PROPERTY_SUPPORTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSupported() {
    return supported;
  }

  /**
   * Indicates if you support the card brand.
   *
   * @param supported
   */ 
  @JsonProperty(JSON_PROPERTY_SUPPORTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupported(Boolean supported) {
    this.supported = supported;
  }

  /**
   * The name of the card brand.
   *
   * @param type
   * @return the current {@code CardBrandDetails} instance, allowing for method chaining
   */
  public CardBrandDetails type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The name of the card brand.
   * @return type
   */
  @ApiModelProperty(value = "The name of the card brand.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getType() {
    return type;
  }

  /**
   * The name of the card brand.
   *
   * @param type
   */ 
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  /**
   * Return true if this CardBrandDetails object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardBrandDetails cardBrandDetails = (CardBrandDetails) o;
    return Objects.equals(this.supported, cardBrandDetails.supported) &&
        Objects.equals(this.type, cardBrandDetails.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(supported, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardBrandDetails {\n");
    sb.append("    supported: ").append(toIndentedString(supported)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of CardBrandDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardBrandDetails
   * @throws JsonProcessingException if the JSON string is invalid with respect to CardBrandDetails
   */
  public static CardBrandDetails fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, CardBrandDetails.class);
  }
/**
  * Convert an instance of CardBrandDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
