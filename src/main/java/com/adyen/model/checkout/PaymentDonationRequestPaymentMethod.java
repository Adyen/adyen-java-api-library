/*
 * Adyen Checkout API
 *
 * The version of the OpenAPI document: 69
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.checkout;

import java.util.Objects;
import java.util.Arrays;
import com.adyen.model.checkout.AchDetails;
import com.adyen.model.checkout.AfterpayDetails;
import com.adyen.model.checkout.AmazonPayDetails;
import com.adyen.model.checkout.AndroidPayDetails;
import com.adyen.model.checkout.ApplePayDetails;
import com.adyen.model.checkout.BacsDirectDebitDetails;
import com.adyen.model.checkout.BillDeskDetails;
import com.adyen.model.checkout.BlikDetails;
import com.adyen.model.checkout.CardDetails;
import com.adyen.model.checkout.CellulantDetails;
import com.adyen.model.checkout.DokuDetails;
import com.adyen.model.checkout.DotpayDetails;
import com.adyen.model.checkout.DragonpayDetails;
import com.adyen.model.checkout.EcontextVoucherDetails;
import com.adyen.model.checkout.GenericIssuerPaymentMethodDetails;
import com.adyen.model.checkout.GiropayDetails;
import com.adyen.model.checkout.GooglePayDetails;
import com.adyen.model.checkout.IdealDetails;
import com.adyen.model.checkout.KlarnaDetails;
import com.adyen.model.checkout.MasterpassDetails;
import com.adyen.model.checkout.MbwayDetails;
import com.adyen.model.checkout.MobilePayDetails;
import com.adyen.model.checkout.MolPayDetails;
import com.adyen.model.checkout.OpenInvoiceDetails;
import com.adyen.model.checkout.PayPalDetails;
import com.adyen.model.checkout.PayUUpiDetails;
import com.adyen.model.checkout.PayWithGoogleDetails;
import com.adyen.model.checkout.PaymentDetails;
import com.adyen.model.checkout.RatepayDetails;
import com.adyen.model.checkout.SamsungPayDetails;
import com.adyen.model.checkout.SepaDirectDebitDetails;
import com.adyen.model.checkout.StoredPaymentMethodDetails;
import com.adyen.model.checkout.UpiCollectDetails;
import com.adyen.model.checkout.UpiIntentDetails;
import com.adyen.model.checkout.VippsDetails;
import com.adyen.model.checkout.VisaCheckoutDetails;
import com.adyen.model.checkout.WeChatPayDetails;
import com.adyen.model.checkout.WeChatPayMiniProgramDetails;
import com.adyen.model.checkout.ZipDetails;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.adyen.model.checkout.JSON;


public class PaymentDonationRequestPaymentMethod extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(PaymentDonationRequestPaymentMethod.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PaymentDonationRequestPaymentMethod.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PaymentDonationRequestPaymentMethod' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AchDetails> adapterAchDetails = gson.getDelegateAdapter(this, TypeToken.get(AchDetails.class));
            final TypeAdapter<AfterpayDetails> adapterAfterpayDetails = gson.getDelegateAdapter(this, TypeToken.get(AfterpayDetails.class));
            final TypeAdapter<AmazonPayDetails> adapterAmazonPayDetails = gson.getDelegateAdapter(this, TypeToken.get(AmazonPayDetails.class));
            final TypeAdapter<AndroidPayDetails> adapterAndroidPayDetails = gson.getDelegateAdapter(this, TypeToken.get(AndroidPayDetails.class));
            final TypeAdapter<ApplePayDetails> adapterApplePayDetails = gson.getDelegateAdapter(this, TypeToken.get(ApplePayDetails.class));
            final TypeAdapter<BacsDirectDebitDetails> adapterBacsDirectDebitDetails = gson.getDelegateAdapter(this, TypeToken.get(BacsDirectDebitDetails.class));
            final TypeAdapter<BillDeskDetails> adapterBillDeskDetails = gson.getDelegateAdapter(this, TypeToken.get(BillDeskDetails.class));
            final TypeAdapter<BlikDetails> adapterBlikDetails = gson.getDelegateAdapter(this, TypeToken.get(BlikDetails.class));
            final TypeAdapter<CardDetails> adapterCardDetails = gson.getDelegateAdapter(this, TypeToken.get(CardDetails.class));
            final TypeAdapter<CellulantDetails> adapterCellulantDetails = gson.getDelegateAdapter(this, TypeToken.get(CellulantDetails.class));
            final TypeAdapter<DokuDetails> adapterDokuDetails = gson.getDelegateAdapter(this, TypeToken.get(DokuDetails.class));
            final TypeAdapter<DotpayDetails> adapterDotpayDetails = gson.getDelegateAdapter(this, TypeToken.get(DotpayDetails.class));
            final TypeAdapter<DragonpayDetails> adapterDragonpayDetails = gson.getDelegateAdapter(this, TypeToken.get(DragonpayDetails.class));
            final TypeAdapter<EcontextVoucherDetails> adapterEcontextVoucherDetails = gson.getDelegateAdapter(this, TypeToken.get(EcontextVoucherDetails.class));
            final TypeAdapter<GenericIssuerPaymentMethodDetails> adapterGenericIssuerPaymentMethodDetails = gson.getDelegateAdapter(this, TypeToken.get(GenericIssuerPaymentMethodDetails.class));
            final TypeAdapter<GiropayDetails> adapterGiropayDetails = gson.getDelegateAdapter(this, TypeToken.get(GiropayDetails.class));
            final TypeAdapter<GooglePayDetails> adapterGooglePayDetails = gson.getDelegateAdapter(this, TypeToken.get(GooglePayDetails.class));
            final TypeAdapter<IdealDetails> adapterIdealDetails = gson.getDelegateAdapter(this, TypeToken.get(IdealDetails.class));
            final TypeAdapter<KlarnaDetails> adapterKlarnaDetails = gson.getDelegateAdapter(this, TypeToken.get(KlarnaDetails.class));
            final TypeAdapter<MasterpassDetails> adapterMasterpassDetails = gson.getDelegateAdapter(this, TypeToken.get(MasterpassDetails.class));
            final TypeAdapter<MbwayDetails> adapterMbwayDetails = gson.getDelegateAdapter(this, TypeToken.get(MbwayDetails.class));
            final TypeAdapter<MobilePayDetails> adapterMobilePayDetails = gson.getDelegateAdapter(this, TypeToken.get(MobilePayDetails.class));
            final TypeAdapter<MolPayDetails> adapterMolPayDetails = gson.getDelegateAdapter(this, TypeToken.get(MolPayDetails.class));
            final TypeAdapter<OpenInvoiceDetails> adapterOpenInvoiceDetails = gson.getDelegateAdapter(this, TypeToken.get(OpenInvoiceDetails.class));
            final TypeAdapter<PayPalDetails> adapterPayPalDetails = gson.getDelegateAdapter(this, TypeToken.get(PayPalDetails.class));
            final TypeAdapter<PayUUpiDetails> adapterPayUUpiDetails = gson.getDelegateAdapter(this, TypeToken.get(PayUUpiDetails.class));
            final TypeAdapter<PayWithGoogleDetails> adapterPayWithGoogleDetails = gson.getDelegateAdapter(this, TypeToken.get(PayWithGoogleDetails.class));
            final TypeAdapter<PaymentDetails> adapterPaymentDetails = gson.getDelegateAdapter(this, TypeToken.get(PaymentDetails.class));
            final TypeAdapter<RatepayDetails> adapterRatepayDetails = gson.getDelegateAdapter(this, TypeToken.get(RatepayDetails.class));
            final TypeAdapter<SamsungPayDetails> adapterSamsungPayDetails = gson.getDelegateAdapter(this, TypeToken.get(SamsungPayDetails.class));
            final TypeAdapter<SepaDirectDebitDetails> adapterSepaDirectDebitDetails = gson.getDelegateAdapter(this, TypeToken.get(SepaDirectDebitDetails.class));
            final TypeAdapter<StoredPaymentMethodDetails> adapterStoredPaymentMethodDetails = gson.getDelegateAdapter(this, TypeToken.get(StoredPaymentMethodDetails.class));
            final TypeAdapter<UpiCollectDetails> adapterUpiCollectDetails = gson.getDelegateAdapter(this, TypeToken.get(UpiCollectDetails.class));
            final TypeAdapter<UpiIntentDetails> adapterUpiIntentDetails = gson.getDelegateAdapter(this, TypeToken.get(UpiIntentDetails.class));
            final TypeAdapter<VippsDetails> adapterVippsDetails = gson.getDelegateAdapter(this, TypeToken.get(VippsDetails.class));
            final TypeAdapter<VisaCheckoutDetails> adapterVisaCheckoutDetails = gson.getDelegateAdapter(this, TypeToken.get(VisaCheckoutDetails.class));
            final TypeAdapter<WeChatPayDetails> adapterWeChatPayDetails = gson.getDelegateAdapter(this, TypeToken.get(WeChatPayDetails.class));
            final TypeAdapter<WeChatPayMiniProgramDetails> adapterWeChatPayMiniProgramDetails = gson.getDelegateAdapter(this, TypeToken.get(WeChatPayMiniProgramDetails.class));
            final TypeAdapter<ZipDetails> adapterZipDetails = gson.getDelegateAdapter(this, TypeToken.get(ZipDetails.class));

            return (TypeAdapter<T>) new TypeAdapter<PaymentDonationRequestPaymentMethod>() {
                @Override
                public void write(JsonWriter out, PaymentDonationRequestPaymentMethod value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AchDetails`
                    if (value.getActualInstance() instanceof AchDetails) {
                        JsonObject obj = adapterAchDetails.toJsonTree((AchDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `AfterpayDetails`
                    if (value.getActualInstance() instanceof AfterpayDetails) {
                        JsonObject obj = adapterAfterpayDetails.toJsonTree((AfterpayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `AmazonPayDetails`
                    if (value.getActualInstance() instanceof AmazonPayDetails) {
                        JsonObject obj = adapterAmazonPayDetails.toJsonTree((AmazonPayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `AndroidPayDetails`
                    if (value.getActualInstance() instanceof AndroidPayDetails) {
                        JsonObject obj = adapterAndroidPayDetails.toJsonTree((AndroidPayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ApplePayDetails`
                    if (value.getActualInstance() instanceof ApplePayDetails) {
                        JsonObject obj = adapterApplePayDetails.toJsonTree((ApplePayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `BacsDirectDebitDetails`
                    if (value.getActualInstance() instanceof BacsDirectDebitDetails) {
                        JsonObject obj = adapterBacsDirectDebitDetails.toJsonTree((BacsDirectDebitDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `BillDeskDetails`
                    if (value.getActualInstance() instanceof BillDeskDetails) {
                        JsonObject obj = adapterBillDeskDetails.toJsonTree((BillDeskDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `BlikDetails`
                    if (value.getActualInstance() instanceof BlikDetails) {
                        JsonObject obj = adapterBlikDetails.toJsonTree((BlikDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CardDetails`
                    if (value.getActualInstance() instanceof CardDetails) {
                        JsonObject obj = adapterCardDetails.toJsonTree((CardDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CellulantDetails`
                    if (value.getActualInstance() instanceof CellulantDetails) {
                        JsonObject obj = adapterCellulantDetails.toJsonTree((CellulantDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DokuDetails`
                    if (value.getActualInstance() instanceof DokuDetails) {
                        JsonObject obj = adapterDokuDetails.toJsonTree((DokuDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DotpayDetails`
                    if (value.getActualInstance() instanceof DotpayDetails) {
                        JsonObject obj = adapterDotpayDetails.toJsonTree((DotpayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DragonpayDetails`
                    if (value.getActualInstance() instanceof DragonpayDetails) {
                        JsonObject obj = adapterDragonpayDetails.toJsonTree((DragonpayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `EcontextVoucherDetails`
                    if (value.getActualInstance() instanceof EcontextVoucherDetails) {
                        JsonObject obj = adapterEcontextVoucherDetails.toJsonTree((EcontextVoucherDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GenericIssuerPaymentMethodDetails`
                    if (value.getActualInstance() instanceof GenericIssuerPaymentMethodDetails) {
                        JsonObject obj = adapterGenericIssuerPaymentMethodDetails.toJsonTree((GenericIssuerPaymentMethodDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GiropayDetails`
                    if (value.getActualInstance() instanceof GiropayDetails) {
                        JsonObject obj = adapterGiropayDetails.toJsonTree((GiropayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `GooglePayDetails`
                    if (value.getActualInstance() instanceof GooglePayDetails) {
                        JsonObject obj = adapterGooglePayDetails.toJsonTree((GooglePayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `IdealDetails`
                    if (value.getActualInstance() instanceof IdealDetails) {
                        JsonObject obj = adapterIdealDetails.toJsonTree((IdealDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `KlarnaDetails`
                    if (value.getActualInstance() instanceof KlarnaDetails) {
                        JsonObject obj = adapterKlarnaDetails.toJsonTree((KlarnaDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `MasterpassDetails`
                    if (value.getActualInstance() instanceof MasterpassDetails) {
                        JsonObject obj = adapterMasterpassDetails.toJsonTree((MasterpassDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `MbwayDetails`
                    if (value.getActualInstance() instanceof MbwayDetails) {
                        JsonObject obj = adapterMbwayDetails.toJsonTree((MbwayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `MobilePayDetails`
                    if (value.getActualInstance() instanceof MobilePayDetails) {
                        JsonObject obj = adapterMobilePayDetails.toJsonTree((MobilePayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `MolPayDetails`
                    if (value.getActualInstance() instanceof MolPayDetails) {
                        JsonObject obj = adapterMolPayDetails.toJsonTree((MolPayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `OpenInvoiceDetails`
                    if (value.getActualInstance() instanceof OpenInvoiceDetails) {
                        JsonObject obj = adapterOpenInvoiceDetails.toJsonTree((OpenInvoiceDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PayPalDetails`
                    if (value.getActualInstance() instanceof PayPalDetails) {
                        JsonObject obj = adapterPayPalDetails.toJsonTree((PayPalDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PayUUpiDetails`
                    if (value.getActualInstance() instanceof PayUUpiDetails) {
                        JsonObject obj = adapterPayUUpiDetails.toJsonTree((PayUUpiDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PayWithGoogleDetails`
                    if (value.getActualInstance() instanceof PayWithGoogleDetails) {
                        JsonObject obj = adapterPayWithGoogleDetails.toJsonTree((PayWithGoogleDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PaymentDetails`
                    if (value.getActualInstance() instanceof PaymentDetails) {
                        JsonObject obj = adapterPaymentDetails.toJsonTree((PaymentDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `RatepayDetails`
                    if (value.getActualInstance() instanceof RatepayDetails) {
                        JsonObject obj = adapterRatepayDetails.toJsonTree((RatepayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SamsungPayDetails`
                    if (value.getActualInstance() instanceof SamsungPayDetails) {
                        JsonObject obj = adapterSamsungPayDetails.toJsonTree((SamsungPayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SepaDirectDebitDetails`
                    if (value.getActualInstance() instanceof SepaDirectDebitDetails) {
                        JsonObject obj = adapterSepaDirectDebitDetails.toJsonTree((SepaDirectDebitDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `StoredPaymentMethodDetails`
                    if (value.getActualInstance() instanceof StoredPaymentMethodDetails) {
                        JsonObject obj = adapterStoredPaymentMethodDetails.toJsonTree((StoredPaymentMethodDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `UpiCollectDetails`
                    if (value.getActualInstance() instanceof UpiCollectDetails) {
                        JsonObject obj = adapterUpiCollectDetails.toJsonTree((UpiCollectDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `UpiIntentDetails`
                    if (value.getActualInstance() instanceof UpiIntentDetails) {
                        JsonObject obj = adapterUpiIntentDetails.toJsonTree((UpiIntentDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `VippsDetails`
                    if (value.getActualInstance() instanceof VippsDetails) {
                        JsonObject obj = adapterVippsDetails.toJsonTree((VippsDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `VisaCheckoutDetails`
                    if (value.getActualInstance() instanceof VisaCheckoutDetails) {
                        JsonObject obj = adapterVisaCheckoutDetails.toJsonTree((VisaCheckoutDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `WeChatPayDetails`
                    if (value.getActualInstance() instanceof WeChatPayDetails) {
                        JsonObject obj = adapterWeChatPayDetails.toJsonTree((WeChatPayDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `WeChatPayMiniProgramDetails`
                    if (value.getActualInstance() instanceof WeChatPayMiniProgramDetails) {
                        JsonObject obj = adapterWeChatPayMiniProgramDetails.toJsonTree((WeChatPayMiniProgramDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ZipDetails`
                    if (value.getActualInstance() instanceof ZipDetails) {
                        JsonObject obj = adapterZipDetails.toJsonTree((ZipDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AchDetails, AfterpayDetails, AmazonPayDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CellulantDetails, DokuDetails, DotpayDetails, DragonpayDetails, EcontextVoucherDetails, GenericIssuerPaymentMethodDetails, GiropayDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayPalDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, RatepayDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails");
                }

                @Override
                public PaymentDonationRequestPaymentMethod read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AchDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AchDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterAchDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AchDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AchDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AchDetails'", e);
                    }

                    // deserialize AfterpayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AfterpayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterAfterpayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AfterpayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AfterpayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AfterpayDetails'", e);
                    }

                    // deserialize AmazonPayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AmazonPayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterAmazonPayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AmazonPayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AmazonPayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AmazonPayDetails'", e);
                    }

                    // deserialize AndroidPayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AndroidPayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterAndroidPayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AndroidPayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AndroidPayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AndroidPayDetails'", e);
                    }

                    // deserialize ApplePayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ApplePayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterApplePayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ApplePayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ApplePayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ApplePayDetails'", e);
                    }

                    // deserialize BacsDirectDebitDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BacsDirectDebitDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterBacsDirectDebitDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BacsDirectDebitDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BacsDirectDebitDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BacsDirectDebitDetails'", e);
                    }

                    // deserialize BillDeskDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BillDeskDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterBillDeskDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BillDeskDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BillDeskDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BillDeskDetails'", e);
                    }

                    // deserialize BlikDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BlikDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterBlikDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BlikDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BlikDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BlikDetails'", e);
                    }

                    // deserialize CardDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CardDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterCardDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CardDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CardDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CardDetails'", e);
                    }

                    // deserialize CellulantDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CellulantDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterCellulantDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CellulantDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CellulantDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CellulantDetails'", e);
                    }

                    // deserialize DokuDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DokuDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterDokuDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DokuDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DokuDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DokuDetails'", e);
                    }

                    // deserialize DotpayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DotpayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterDotpayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DotpayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DotpayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DotpayDetails'", e);
                    }

                    // deserialize DragonpayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DragonpayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterDragonpayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DragonpayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DragonpayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DragonpayDetails'", e);
                    }

                    // deserialize EcontextVoucherDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EcontextVoucherDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterEcontextVoucherDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EcontextVoucherDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EcontextVoucherDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EcontextVoucherDetails'", e);
                    }

                    // deserialize GenericIssuerPaymentMethodDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GenericIssuerPaymentMethodDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterGenericIssuerPaymentMethodDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GenericIssuerPaymentMethodDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GenericIssuerPaymentMethodDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GenericIssuerPaymentMethodDetails'", e);
                    }

                    // deserialize GiropayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GiropayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterGiropayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GiropayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GiropayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GiropayDetails'", e);
                    }

                    // deserialize GooglePayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GooglePayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterGooglePayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GooglePayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GooglePayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GooglePayDetails'", e);
                    }

                    // deserialize IdealDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IdealDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterIdealDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IdealDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IdealDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IdealDetails'", e);
                    }

                    // deserialize KlarnaDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        KlarnaDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterKlarnaDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'KlarnaDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for KlarnaDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'KlarnaDetails'", e);
                    }

                    // deserialize MasterpassDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MasterpassDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterMasterpassDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MasterpassDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MasterpassDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MasterpassDetails'", e);
                    }

                    // deserialize MbwayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MbwayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterMbwayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MbwayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MbwayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MbwayDetails'", e);
                    }

                    // deserialize MobilePayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MobilePayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterMobilePayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MobilePayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MobilePayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MobilePayDetails'", e);
                    }

                    // deserialize MolPayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MolPayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterMolPayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MolPayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MolPayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MolPayDetails'", e);
                    }

                    // deserialize OpenInvoiceDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OpenInvoiceDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterOpenInvoiceDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OpenInvoiceDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OpenInvoiceDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OpenInvoiceDetails'", e);
                    }

                    // deserialize PayPalDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PayPalDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterPayPalDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PayPalDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PayPalDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PayPalDetails'", e);
                    }

                    // deserialize PayUUpiDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PayUUpiDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterPayUUpiDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PayUUpiDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PayUUpiDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PayUUpiDetails'", e);
                    }

                    // deserialize PayWithGoogleDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PayWithGoogleDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterPayWithGoogleDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PayWithGoogleDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PayWithGoogleDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PayWithGoogleDetails'", e);
                    }

                    // deserialize PaymentDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PaymentDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterPaymentDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PaymentDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PaymentDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PaymentDetails'", e);
                    }

                    // deserialize RatepayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RatepayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterRatepayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RatepayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RatepayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RatepayDetails'", e);
                    }

                    // deserialize SamsungPayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SamsungPayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterSamsungPayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SamsungPayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SamsungPayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SamsungPayDetails'", e);
                    }

                    // deserialize SepaDirectDebitDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SepaDirectDebitDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterSepaDirectDebitDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SepaDirectDebitDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SepaDirectDebitDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SepaDirectDebitDetails'", e);
                    }

                    // deserialize StoredPaymentMethodDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StoredPaymentMethodDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterStoredPaymentMethodDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'StoredPaymentMethodDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for StoredPaymentMethodDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'StoredPaymentMethodDetails'", e);
                    }

                    // deserialize UpiCollectDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpiCollectDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterUpiCollectDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpiCollectDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpiCollectDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpiCollectDetails'", e);
                    }

                    // deserialize UpiIntentDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpiIntentDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterUpiIntentDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpiIntentDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpiIntentDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpiIntentDetails'", e);
                    }

                    // deserialize VippsDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VippsDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterVippsDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VippsDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VippsDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VippsDetails'", e);
                    }

                    // deserialize VisaCheckoutDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VisaCheckoutDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterVisaCheckoutDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VisaCheckoutDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VisaCheckoutDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VisaCheckoutDetails'", e);
                    }

                    // deserialize WeChatPayDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WeChatPayDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterWeChatPayDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WeChatPayDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WeChatPayDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WeChatPayDetails'", e);
                    }

                    // deserialize WeChatPayMiniProgramDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WeChatPayMiniProgramDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterWeChatPayMiniProgramDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WeChatPayMiniProgramDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WeChatPayMiniProgramDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WeChatPayMiniProgramDetails'", e);
                    }

                    // deserialize ZipDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZipDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterZipDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZipDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZipDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZipDetails'", e);
                    }

                    if (match == 1) {
                        PaymentDonationRequestPaymentMethod ret = new PaymentDonationRequestPaymentMethod();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for PaymentDonationRequestPaymentMethod: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public PaymentDonationRequestPaymentMethod() {
        super("oneOf", Boolean.FALSE);
    }

    public PaymentDonationRequestPaymentMethod(AchDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(AfterpayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(AmazonPayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(AndroidPayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(ApplePayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(BacsDirectDebitDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(BillDeskDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(BlikDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(CardDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(CellulantDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(DokuDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(DotpayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(DragonpayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(EcontextVoucherDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(GenericIssuerPaymentMethodDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(GiropayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(GooglePayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(IdealDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(KlarnaDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(MasterpassDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(MbwayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(MobilePayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(MolPayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(OpenInvoiceDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(PayPalDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(PayUUpiDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(PayWithGoogleDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(PaymentDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(RatepayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(SamsungPayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(SepaDirectDebitDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(StoredPaymentMethodDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(UpiCollectDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(UpiIntentDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(VippsDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(VisaCheckoutDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(WeChatPayDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(WeChatPayMiniProgramDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentDonationRequestPaymentMethod(ZipDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AchDetails", new GenericType<AchDetails>() {
        });
        schemas.put("AfterpayDetails", new GenericType<AfterpayDetails>() {
        });
        schemas.put("AmazonPayDetails", new GenericType<AmazonPayDetails>() {
        });
        schemas.put("AndroidPayDetails", new GenericType<AndroidPayDetails>() {
        });
        schemas.put("ApplePayDetails", new GenericType<ApplePayDetails>() {
        });
        schemas.put("BacsDirectDebitDetails", new GenericType<BacsDirectDebitDetails>() {
        });
        schemas.put("BillDeskDetails", new GenericType<BillDeskDetails>() {
        });
        schemas.put("BlikDetails", new GenericType<BlikDetails>() {
        });
        schemas.put("CardDetails", new GenericType<CardDetails>() {
        });
        schemas.put("CellulantDetails", new GenericType<CellulantDetails>() {
        });
        schemas.put("DokuDetails", new GenericType<DokuDetails>() {
        });
        schemas.put("DotpayDetails", new GenericType<DotpayDetails>() {
        });
        schemas.put("DragonpayDetails", new GenericType<DragonpayDetails>() {
        });
        schemas.put("EcontextVoucherDetails", new GenericType<EcontextVoucherDetails>() {
        });
        schemas.put("GenericIssuerPaymentMethodDetails", new GenericType<GenericIssuerPaymentMethodDetails>() {
        });
        schemas.put("GiropayDetails", new GenericType<GiropayDetails>() {
        });
        schemas.put("GooglePayDetails", new GenericType<GooglePayDetails>() {
        });
        schemas.put("IdealDetails", new GenericType<IdealDetails>() {
        });
        schemas.put("KlarnaDetails", new GenericType<KlarnaDetails>() {
        });
        schemas.put("MasterpassDetails", new GenericType<MasterpassDetails>() {
        });
        schemas.put("MbwayDetails", new GenericType<MbwayDetails>() {
        });
        schemas.put("MobilePayDetails", new GenericType<MobilePayDetails>() {
        });
        schemas.put("MolPayDetails", new GenericType<MolPayDetails>() {
        });
        schemas.put("OpenInvoiceDetails", new GenericType<OpenInvoiceDetails>() {
        });
        schemas.put("PayPalDetails", new GenericType<PayPalDetails>() {
        });
        schemas.put("PayUUpiDetails", new GenericType<PayUUpiDetails>() {
        });
        schemas.put("PayWithGoogleDetails", new GenericType<PayWithGoogleDetails>() {
        });
        schemas.put("PaymentDetails", new GenericType<PaymentDetails>() {
        });
        schemas.put("RatepayDetails", new GenericType<RatepayDetails>() {
        });
        schemas.put("SamsungPayDetails", new GenericType<SamsungPayDetails>() {
        });
        schemas.put("SepaDirectDebitDetails", new GenericType<SepaDirectDebitDetails>() {
        });
        schemas.put("StoredPaymentMethodDetails", new GenericType<StoredPaymentMethodDetails>() {
        });
        schemas.put("UpiCollectDetails", new GenericType<UpiCollectDetails>() {
        });
        schemas.put("UpiIntentDetails", new GenericType<UpiIntentDetails>() {
        });
        schemas.put("VippsDetails", new GenericType<VippsDetails>() {
        });
        schemas.put("VisaCheckoutDetails", new GenericType<VisaCheckoutDetails>() {
        });
        schemas.put("WeChatPayDetails", new GenericType<WeChatPayDetails>() {
        });
        schemas.put("WeChatPayMiniProgramDetails", new GenericType<WeChatPayMiniProgramDetails>() {
        });
        schemas.put("ZipDetails", new GenericType<ZipDetails>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return PaymentDonationRequestPaymentMethod.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AchDetails, AfterpayDetails, AmazonPayDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CellulantDetails, DokuDetails, DotpayDetails, DragonpayDetails, EcontextVoucherDetails, GenericIssuerPaymentMethodDetails, GiropayDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayPalDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, RatepayDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AchDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AfterpayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AmazonPayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AndroidPayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApplePayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BacsDirectDebitDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BillDeskDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BlikDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CardDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CellulantDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DokuDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DotpayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DragonpayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EcontextVoucherDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GenericIssuerPaymentMethodDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GiropayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GooglePayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IdealDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof KlarnaDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MasterpassDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MbwayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MobilePayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MolPayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OpenInvoiceDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PayPalDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PayUUpiDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PayWithGoogleDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PaymentDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RatepayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SamsungPayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SepaDirectDebitDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StoredPaymentMethodDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpiCollectDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpiIntentDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VippsDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VisaCheckoutDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WeChatPayDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WeChatPayMiniProgramDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZipDetails) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AchDetails, AfterpayDetails, AmazonPayDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CellulantDetails, DokuDetails, DotpayDetails, DragonpayDetails, EcontextVoucherDetails, GenericIssuerPaymentMethodDetails, GiropayDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayPalDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, RatepayDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails");
    }

    /**
     * Get the actual instance, which can be the following:
     * AchDetails, AfterpayDetails, AmazonPayDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CellulantDetails, DokuDetails, DotpayDetails, DragonpayDetails, EcontextVoucherDetails, GenericIssuerPaymentMethodDetails, GiropayDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayPalDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, RatepayDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails
     *
     * @return The actual instance (AchDetails, AfterpayDetails, AmazonPayDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CellulantDetails, DokuDetails, DotpayDetails, DragonpayDetails, EcontextVoucherDetails, GenericIssuerPaymentMethodDetails, GiropayDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayPalDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, RatepayDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AchDetails`. If the actual instance is not `AchDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AchDetails`
     * @throws ClassCastException if the instance is not `AchDetails`
     */
    public AchDetails getAchDetails() throws ClassCastException {
        return (AchDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AfterpayDetails`. If the actual instance is not `AfterpayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AfterpayDetails`
     * @throws ClassCastException if the instance is not `AfterpayDetails`
     */
    public AfterpayDetails getAfterpayDetails() throws ClassCastException {
        return (AfterpayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AmazonPayDetails`. If the actual instance is not `AmazonPayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AmazonPayDetails`
     * @throws ClassCastException if the instance is not `AmazonPayDetails`
     */
    public AmazonPayDetails getAmazonPayDetails() throws ClassCastException {
        return (AmazonPayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AndroidPayDetails`. If the actual instance is not `AndroidPayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AndroidPayDetails`
     * @throws ClassCastException if the instance is not `AndroidPayDetails`
     */
    public AndroidPayDetails getAndroidPayDetails() throws ClassCastException {
        return (AndroidPayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ApplePayDetails`. If the actual instance is not `ApplePayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApplePayDetails`
     * @throws ClassCastException if the instance is not `ApplePayDetails`
     */
    public ApplePayDetails getApplePayDetails() throws ClassCastException {
        return (ApplePayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BacsDirectDebitDetails`. If the actual instance is not `BacsDirectDebitDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BacsDirectDebitDetails`
     * @throws ClassCastException if the instance is not `BacsDirectDebitDetails`
     */
    public BacsDirectDebitDetails getBacsDirectDebitDetails() throws ClassCastException {
        return (BacsDirectDebitDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BillDeskDetails`. If the actual instance is not `BillDeskDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BillDeskDetails`
     * @throws ClassCastException if the instance is not `BillDeskDetails`
     */
    public BillDeskDetails getBillDeskDetails() throws ClassCastException {
        return (BillDeskDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BlikDetails`. If the actual instance is not `BlikDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BlikDetails`
     * @throws ClassCastException if the instance is not `BlikDetails`
     */
    public BlikDetails getBlikDetails() throws ClassCastException {
        return (BlikDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CardDetails`. If the actual instance is not `CardDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CardDetails`
     * @throws ClassCastException if the instance is not `CardDetails`
     */
    public CardDetails getCardDetails() throws ClassCastException {
        return (CardDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CellulantDetails`. If the actual instance is not `CellulantDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CellulantDetails`
     * @throws ClassCastException if the instance is not `CellulantDetails`
     */
    public CellulantDetails getCellulantDetails() throws ClassCastException {
        return (CellulantDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DokuDetails`. If the actual instance is not `DokuDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DokuDetails`
     * @throws ClassCastException if the instance is not `DokuDetails`
     */
    public DokuDetails getDokuDetails() throws ClassCastException {
        return (DokuDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DotpayDetails`. If the actual instance is not `DotpayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DotpayDetails`
     * @throws ClassCastException if the instance is not `DotpayDetails`
     */
    public DotpayDetails getDotpayDetails() throws ClassCastException {
        return (DotpayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DragonpayDetails`. If the actual instance is not `DragonpayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DragonpayDetails`
     * @throws ClassCastException if the instance is not `DragonpayDetails`
     */
    public DragonpayDetails getDragonpayDetails() throws ClassCastException {
        return (DragonpayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EcontextVoucherDetails`. If the actual instance is not `EcontextVoucherDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EcontextVoucherDetails`
     * @throws ClassCastException if the instance is not `EcontextVoucherDetails`
     */
    public EcontextVoucherDetails getEcontextVoucherDetails() throws ClassCastException {
        return (EcontextVoucherDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GenericIssuerPaymentMethodDetails`. If the actual instance is not `GenericIssuerPaymentMethodDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GenericIssuerPaymentMethodDetails`
     * @throws ClassCastException if the instance is not `GenericIssuerPaymentMethodDetails`
     */
    public GenericIssuerPaymentMethodDetails getGenericIssuerPaymentMethodDetails() throws ClassCastException {
        return (GenericIssuerPaymentMethodDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GiropayDetails`. If the actual instance is not `GiropayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GiropayDetails`
     * @throws ClassCastException if the instance is not `GiropayDetails`
     */
    public GiropayDetails getGiropayDetails() throws ClassCastException {
        return (GiropayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GooglePayDetails`. If the actual instance is not `GooglePayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GooglePayDetails`
     * @throws ClassCastException if the instance is not `GooglePayDetails`
     */
    public GooglePayDetails getGooglePayDetails() throws ClassCastException {
        return (GooglePayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `IdealDetails`. If the actual instance is not `IdealDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IdealDetails`
     * @throws ClassCastException if the instance is not `IdealDetails`
     */
    public IdealDetails getIdealDetails() throws ClassCastException {
        return (IdealDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `KlarnaDetails`. If the actual instance is not `KlarnaDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `KlarnaDetails`
     * @throws ClassCastException if the instance is not `KlarnaDetails`
     */
    public KlarnaDetails getKlarnaDetails() throws ClassCastException {
        return (KlarnaDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MasterpassDetails`. If the actual instance is not `MasterpassDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MasterpassDetails`
     * @throws ClassCastException if the instance is not `MasterpassDetails`
     */
    public MasterpassDetails getMasterpassDetails() throws ClassCastException {
        return (MasterpassDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MbwayDetails`. If the actual instance is not `MbwayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MbwayDetails`
     * @throws ClassCastException if the instance is not `MbwayDetails`
     */
    public MbwayDetails getMbwayDetails() throws ClassCastException {
        return (MbwayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MobilePayDetails`. If the actual instance is not `MobilePayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MobilePayDetails`
     * @throws ClassCastException if the instance is not `MobilePayDetails`
     */
    public MobilePayDetails getMobilePayDetails() throws ClassCastException {
        return (MobilePayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MolPayDetails`. If the actual instance is not `MolPayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MolPayDetails`
     * @throws ClassCastException if the instance is not `MolPayDetails`
     */
    public MolPayDetails getMolPayDetails() throws ClassCastException {
        return (MolPayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OpenInvoiceDetails`. If the actual instance is not `OpenInvoiceDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OpenInvoiceDetails`
     * @throws ClassCastException if the instance is not `OpenInvoiceDetails`
     */
    public OpenInvoiceDetails getOpenInvoiceDetails() throws ClassCastException {
        return (OpenInvoiceDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PayPalDetails`. If the actual instance is not `PayPalDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PayPalDetails`
     * @throws ClassCastException if the instance is not `PayPalDetails`
     */
    public PayPalDetails getPayPalDetails() throws ClassCastException {
        return (PayPalDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PayUUpiDetails`. If the actual instance is not `PayUUpiDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PayUUpiDetails`
     * @throws ClassCastException if the instance is not `PayUUpiDetails`
     */
    public PayUUpiDetails getPayUUpiDetails() throws ClassCastException {
        return (PayUUpiDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PayWithGoogleDetails`. If the actual instance is not `PayWithGoogleDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PayWithGoogleDetails`
     * @throws ClassCastException if the instance is not `PayWithGoogleDetails`
     */
    public PayWithGoogleDetails getPayWithGoogleDetails() throws ClassCastException {
        return (PayWithGoogleDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentDetails`. If the actual instance is not `PaymentDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentDetails`
     * @throws ClassCastException if the instance is not `PaymentDetails`
     */
    public PaymentDetails getPaymentDetails() throws ClassCastException {
        return (PaymentDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RatepayDetails`. If the actual instance is not `RatepayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RatepayDetails`
     * @throws ClassCastException if the instance is not `RatepayDetails`
     */
    public RatepayDetails getRatepayDetails() throws ClassCastException {
        return (RatepayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SamsungPayDetails`. If the actual instance is not `SamsungPayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SamsungPayDetails`
     * @throws ClassCastException if the instance is not `SamsungPayDetails`
     */
    public SamsungPayDetails getSamsungPayDetails() throws ClassCastException {
        return (SamsungPayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SepaDirectDebitDetails`. If the actual instance is not `SepaDirectDebitDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SepaDirectDebitDetails`
     * @throws ClassCastException if the instance is not `SepaDirectDebitDetails`
     */
    public SepaDirectDebitDetails getSepaDirectDebitDetails() throws ClassCastException {
        return (SepaDirectDebitDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `StoredPaymentMethodDetails`. If the actual instance is not `StoredPaymentMethodDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StoredPaymentMethodDetails`
     * @throws ClassCastException if the instance is not `StoredPaymentMethodDetails`
     */
    public StoredPaymentMethodDetails getStoredPaymentMethodDetails() throws ClassCastException {
        return (StoredPaymentMethodDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UpiCollectDetails`. If the actual instance is not `UpiCollectDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpiCollectDetails`
     * @throws ClassCastException if the instance is not `UpiCollectDetails`
     */
    public UpiCollectDetails getUpiCollectDetails() throws ClassCastException {
        return (UpiCollectDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UpiIntentDetails`. If the actual instance is not `UpiIntentDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpiIntentDetails`
     * @throws ClassCastException if the instance is not `UpiIntentDetails`
     */
    public UpiIntentDetails getUpiIntentDetails() throws ClassCastException {
        return (UpiIntentDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VippsDetails`. If the actual instance is not `VippsDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VippsDetails`
     * @throws ClassCastException if the instance is not `VippsDetails`
     */
    public VippsDetails getVippsDetails() throws ClassCastException {
        return (VippsDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VisaCheckoutDetails`. If the actual instance is not `VisaCheckoutDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VisaCheckoutDetails`
     * @throws ClassCastException if the instance is not `VisaCheckoutDetails`
     */
    public VisaCheckoutDetails getVisaCheckoutDetails() throws ClassCastException {
        return (VisaCheckoutDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WeChatPayDetails`. If the actual instance is not `WeChatPayDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WeChatPayDetails`
     * @throws ClassCastException if the instance is not `WeChatPayDetails`
     */
    public WeChatPayDetails getWeChatPayDetails() throws ClassCastException {
        return (WeChatPayDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WeChatPayMiniProgramDetails`. If the actual instance is not `WeChatPayMiniProgramDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WeChatPayMiniProgramDetails`
     * @throws ClassCastException if the instance is not `WeChatPayMiniProgramDetails`
     */
    public WeChatPayMiniProgramDetails getWeChatPayMiniProgramDetails() throws ClassCastException {
        return (WeChatPayMiniProgramDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ZipDetails`. If the actual instance is not `ZipDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZipDetails`
     * @throws ClassCastException if the instance is not `ZipDetails`
     */
    public ZipDetails getZipDetails() throws ClassCastException {
        return (ZipDetails)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentDonationRequestPaymentMethod
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with AchDetails
    try {
      AchDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AchDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AfterpayDetails
    try {
      AfterpayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AfterpayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AmazonPayDetails
    try {
      AmazonPayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AmazonPayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AndroidPayDetails
    try {
      AndroidPayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AndroidPayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApplePayDetails
    try {
      ApplePayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApplePayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BacsDirectDebitDetails
    try {
      BacsDirectDebitDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BacsDirectDebitDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BillDeskDetails
    try {
      BillDeskDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BillDeskDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BlikDetails
    try {
      BlikDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BlikDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CardDetails
    try {
      CardDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CardDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CellulantDetails
    try {
      CellulantDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CellulantDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DokuDetails
    try {
      DokuDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DokuDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DotpayDetails
    try {
      DotpayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DotpayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DragonpayDetails
    try {
      DragonpayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DragonpayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EcontextVoucherDetails
    try {
      EcontextVoucherDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EcontextVoucherDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GenericIssuerPaymentMethodDetails
    try {
      GenericIssuerPaymentMethodDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GenericIssuerPaymentMethodDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GiropayDetails
    try {
      GiropayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GiropayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GooglePayDetails
    try {
      GooglePayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for GooglePayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with IdealDetails
    try {
      IdealDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for IdealDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with KlarnaDetails
    try {
      KlarnaDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for KlarnaDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MasterpassDetails
    try {
      MasterpassDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MasterpassDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MbwayDetails
    try {
      MbwayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MbwayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MobilePayDetails
    try {
      MobilePayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MobilePayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MolPayDetails
    try {
      MolPayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MolPayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with OpenInvoiceDetails
    try {
      OpenInvoiceDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for OpenInvoiceDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with PayPalDetails
    try {
      PayPalDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for PayPalDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with PayUUpiDetails
    try {
      PayUUpiDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for PayUUpiDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with PayWithGoogleDetails
    try {
      PayWithGoogleDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for PayWithGoogleDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with PaymentDetails
    try {
      PaymentDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for PaymentDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with RatepayDetails
    try {
      RatepayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for RatepayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SamsungPayDetails
    try {
      SamsungPayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SamsungPayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SepaDirectDebitDetails
    try {
      SepaDirectDebitDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SepaDirectDebitDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with StoredPaymentMethodDetails
    try {
      StoredPaymentMethodDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for StoredPaymentMethodDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with UpiCollectDetails
    try {
      UpiCollectDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for UpiCollectDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with UpiIntentDetails
    try {
      UpiIntentDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for UpiIntentDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with VippsDetails
    try {
      VippsDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for VippsDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with VisaCheckoutDetails
    try {
      VisaCheckoutDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for VisaCheckoutDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with WeChatPayDetails
    try {
      WeChatPayDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for WeChatPayDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with WeChatPayMiniProgramDetails
    try {
      WeChatPayMiniProgramDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for WeChatPayMiniProgramDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ZipDetails
    try {
      ZipDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ZipDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for PaymentDonationRequestPaymentMethod with oneOf schemas: AchDetails, AfterpayDetails, AmazonPayDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CellulantDetails, DokuDetails, DotpayDetails, DragonpayDetails, EcontextVoucherDetails, GenericIssuerPaymentMethodDetails, GiropayDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayPalDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, RatepayDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of PaymentDonationRequestPaymentMethod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentDonationRequestPaymentMethod
  * @throws IOException if the JSON string is invalid with respect to PaymentDonationRequestPaymentMethod
  */
  public static PaymentDonationRequestPaymentMethod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentDonationRequestPaymentMethod.class);
  }

 /**
  * Convert an instance of PaymentDonationRequestPaymentMethod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

