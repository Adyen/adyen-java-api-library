/*
 * Capital API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.capital;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * BankAccountIdentification
 */
@JsonPropertyOrder({
  BankAccountIdentification.JSON_PROPERTY_TYPE
})

@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AULocalAccountIdentification.class, name = "auLocal"),
  @JsonSubTypes.Type(value = BRLocalAccountIdentification.class, name = "brLocal"),
  @JsonSubTypes.Type(value = CALocalAccountIdentification.class, name = "caLocal"),
  @JsonSubTypes.Type(value = CZLocalAccountIdentification.class, name = "czLocal"),
  @JsonSubTypes.Type(value = DKLocalAccountIdentification.class, name = "dkLocal"),
  @JsonSubTypes.Type(value = HKLocalAccountIdentification.class, name = "hkLocal"),
  @JsonSubTypes.Type(value = HULocalAccountIdentification.class, name = "huLocal"),
  @JsonSubTypes.Type(value = IbanAccountIdentification.class, name = "iban"),
  @JsonSubTypes.Type(value = NOLocalAccountIdentification.class, name = "noLocal"),
  @JsonSubTypes.Type(value = NumberAndBicAccountIdentification.class, name = "numberAndBic"),
  @JsonSubTypes.Type(value = NZLocalAccountIdentification.class, name = "nzLocal"),
  @JsonSubTypes.Type(value = PLLocalAccountIdentification.class, name = "plLocal"),
  @JsonSubTypes.Type(value = SELocalAccountIdentification.class, name = "seLocal"),
  @JsonSubTypes.Type(value = SGLocalAccountIdentification.class, name = "sgLocal"),
  @JsonSubTypes.Type(value = UKLocalAccountIdentification.class, name = "ukLocal"),
  @JsonSubTypes.Type(value = USLocalAccountIdentification.class, name = "usLocal"),
})

public class BankAccountIdentification {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public BankAccountIdentification() { 
  }

  /**
   * The type of account, which depends on the country of the account and the currency of the transfer.
   *
   * @param type
   * @return the current {@code BankAccountIdentification} instance, allowing for method chaining
   */
  public BankAccountIdentification type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of account, which depends on the country of the account and the currency of the transfer.
   * @return type
   */
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getType() {
    return type;
  }

  /**
   * The type of account, which depends on the country of the account and the currency of the transfer.
   *
   * @param type
   */
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  /**
   * Return true if this BankAccountIdentification object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankAccountIdentification bankAccountIdentification = (BankAccountIdentification) o;
    return Objects.equals(this.type, bankAccountIdentification.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankAccountIdentification {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  static {
    // Initialize and register the discriminator mappings.
    Map<String, Class<?>> mappings = new HashMap<>();
    mappings.put("auLocal", AULocalAccountIdentification.class);
    mappings.put("brLocal", BRLocalAccountIdentification.class);
    mappings.put("caLocal", CALocalAccountIdentification.class);
    mappings.put("czLocal", CZLocalAccountIdentification.class);
    mappings.put("dkLocal", DKLocalAccountIdentification.class);
    mappings.put("hkLocal", HKLocalAccountIdentification.class);
    mappings.put("huLocal", HULocalAccountIdentification.class);
    mappings.put("iban", IbanAccountIdentification.class);
    mappings.put("noLocal", NOLocalAccountIdentification.class);
    mappings.put("numberAndBic", NumberAndBicAccountIdentification.class);
    mappings.put("nzLocal", NZLocalAccountIdentification.class);
    mappings.put("plLocal", PLLocalAccountIdentification.class);
    mappings.put("seLocal", SELocalAccountIdentification.class);
    mappings.put("sgLocal", SGLocalAccountIdentification.class);
    mappings.put("ukLocal", UKLocalAccountIdentification.class);
    mappings.put("usLocal", USLocalAccountIdentification.class);
    mappings.put("BankAccountIdentification", BankAccountIdentification.class);
    JSON.registerDiscriminator(BankAccountIdentification.class, "type", mappings);
  }
/**
   * Create an instance of BankAccountIdentification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BankAccountIdentification
   * @throws JsonProcessingException if the JSON string is invalid with respect to BankAccountIdentification
   */
  public static BankAccountIdentification fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, BankAccountIdentification.class);
  }
/**
  * Convert an instance of BankAccountIdentification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
