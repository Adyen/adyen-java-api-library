/*
 * Session authentication API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.sessionauthentication;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.adyen.model.sessionauthentication.AccountHolderResource;
import com.adyen.model.sessionauthentication.BalanceAccountResource;
import com.adyen.model.sessionauthentication.LegalEntityResource;
import com.adyen.model.sessionauthentication.MerchantAccountResource;
import com.adyen.model.sessionauthentication.PaymentInstrumentResource;
import com.adyen.model.sessionauthentication.PaymentInstrumentResourceAllOf;
import com.adyen.model.sessionauthentication.Resource;
import com.adyen.model.sessionauthentication.ResourceType;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * PaymentInstrumentResource
 */
@JsonPropertyOrder({
  PaymentInstrumentResource.JSON_PROPERTY_PAYMENT_INSTRUMENT_ID
})

@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AccountHolderResource.class, name = "accountHolder"),
  @JsonSubTypes.Type(value = BalanceAccountResource.class, name = "balanceAccount"),
  @JsonSubTypes.Type(value = LegalEntityResource.class, name = "legalEntity"),
  @JsonSubTypes.Type(value = MerchantAccountResource.class, name = "merchantAccount"),
  @JsonSubTypes.Type(value = PaymentInstrumentResource.class, name = "paymentInstrument"),
})

public class PaymentInstrumentResource extends Resource {
  public static final String JSON_PROPERTY_PAYMENT_INSTRUMENT_ID = "paymentInstrumentId";
  private String paymentInstrumentId;

  public PaymentInstrumentResource() { 
  }

  /**
   * paymentInstrumentId
   *
   * @param paymentInstrumentId
   * @return the current {@code PaymentInstrumentResource} instance, allowing for method chaining
   */
  public PaymentInstrumentResource paymentInstrumentId(String paymentInstrumentId) {
    this.paymentInstrumentId = paymentInstrumentId;
    return this;
  }

  /**
   * paymentInstrumentId
   * @return paymentInstrumentId
   */
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PAYMENT_INSTRUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPaymentInstrumentId() {
    return paymentInstrumentId;
  }

  /**
   * paymentInstrumentId
   *
   * @param paymentInstrumentId
   */ 
  @JsonProperty(JSON_PROPERTY_PAYMENT_INSTRUMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentInstrumentId(String paymentInstrumentId) {
    this.paymentInstrumentId = paymentInstrumentId;
  }

  /**
   * Return true if this PaymentInstrumentResource object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentInstrumentResource paymentInstrumentResource = (PaymentInstrumentResource) o;
    return Objects.equals(this.paymentInstrumentId, paymentInstrumentResource.paymentInstrumentId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentInstrumentId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentInstrumentResource {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    paymentInstrumentId: ").append(toIndentedString(paymentInstrumentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("accountHolder", AccountHolderResource.class);
  mappings.put("balanceAccount", BalanceAccountResource.class);
  mappings.put("legalEntity", LegalEntityResource.class);
  mappings.put("merchantAccount", MerchantAccountResource.class);
  mappings.put("paymentInstrument", PaymentInstrumentResource.class);
  mappings.put("PaymentInstrumentResource", PaymentInstrumentResource.class);
  JSON.registerDiscriminator(PaymentInstrumentResource.class, "type", mappings);
}
/**
   * Create an instance of PaymentInstrumentResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentInstrumentResource
   * @throws JsonProcessingException if the JSON string is invalid with respect to PaymentInstrumentResource
   */
  public static PaymentInstrumentResource fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, PaymentInstrumentResource.class);
  }
/**
  * Convert an instance of PaymentInstrumentResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
