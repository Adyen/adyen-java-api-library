/*
 * Session authentication API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.sessionauthentication;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.adyen.model.sessionauthentication.Policy;
import com.adyen.model.sessionauthentication.ProductType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * SessionRequest
 */
@JsonPropertyOrder({
  SessionRequest.JSON_PROPERTY_ALLOW_ORIGIN,
  SessionRequest.JSON_PROPERTY_POLICY,
  SessionRequest.JSON_PROPERTY_PRODUCT
})

public class SessionRequest {
  public static final String JSON_PROPERTY_ALLOW_ORIGIN = "allowOrigin";
  private String allowOrigin;

  public static final String JSON_PROPERTY_POLICY = "policy";
  private Policy policy;

  public static final String JSON_PROPERTY_PRODUCT = "product";
  private ProductType product;

  public SessionRequest() { 
  }

  /**
   * The URL where the component will appear. In your live environment, you must protect the URL with an SSL certificate and ensure that it starts with &#x60;https://&#x60;.
   *
   * @param allowOrigin
   * @return the current {@code SessionRequest} instance, allowing for method chaining
   */
  public SessionRequest allowOrigin(String allowOrigin) {
    this.allowOrigin = allowOrigin;
    return this;
  }

  /**
   * The URL where the component will appear. In your live environment, you must protect the URL with an SSL certificate and ensure that it starts with &#x60;https://&#x60;.
   * @return allowOrigin
   */
  @ApiModelProperty(required = true, value = "The URL where the component will appear. In your live environment, you must protect the URL with an SSL certificate and ensure that it starts with `https://`.")
  @JsonProperty(JSON_PROPERTY_ALLOW_ORIGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAllowOrigin() {
    return allowOrigin;
  }

  /**
   * The URL where the component will appear. In your live environment, you must protect the URL with an SSL certificate and ensure that it starts with &#x60;https://&#x60;.
   *
   * @param allowOrigin
   */ 
  @JsonProperty(JSON_PROPERTY_ALLOW_ORIGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowOrigin(String allowOrigin) {
    this.allowOrigin = allowOrigin;
  }

  /**
   * policy
   *
   * @param policy
   * @return the current {@code SessionRequest} instance, allowing for method chaining
   */
  public SessionRequest policy(Policy policy) {
    this.policy = policy;
    return this;
  }

  /**
   * policy
   * @return policy
   */
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Policy getPolicy() {
    return policy;
  }

  /**
   * policy
   *
   * @param policy
   */ 
  @JsonProperty(JSON_PROPERTY_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPolicy(Policy policy) {
    this.policy = policy;
  }

  /**
   * product
   *
   * @param product
   * @return the current {@code SessionRequest} instance, allowing for method chaining
   */
  public SessionRequest product(ProductType product) {
    this.product = product;
    return this;
  }

  /**
   * product
   * @return product
   */
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PRODUCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ProductType getProduct() {
    return product;
  }

  /**
   * product
   *
   * @param product
   */ 
  @JsonProperty(JSON_PROPERTY_PRODUCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProduct(ProductType product) {
    this.product = product;
  }

  /**
   * Return true if this SessionRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionRequest sessionRequest = (SessionRequest) o;
    return Objects.equals(this.allowOrigin, sessionRequest.allowOrigin) &&
        Objects.equals(this.policy, sessionRequest.policy) &&
        Objects.equals(this.product, sessionRequest.product);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowOrigin, policy, product);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionRequest {\n");
    sb.append("    allowOrigin: ").append(toIndentedString(allowOrigin)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of SessionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionRequest
   * @throws JsonProcessingException if the JSON string is invalid with respect to SessionRequest
   */
  public static SessionRequest fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, SessionRequest.class);
  }
/**
  * Convert an instance of SessionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
