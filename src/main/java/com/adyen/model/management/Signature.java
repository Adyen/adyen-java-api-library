/*
 * Management API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.management;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Signature
 */
@JsonPropertyOrder({
  Signature.JSON_PROPERTY_ASK_SIGNATURE_ON_SCREEN,
  Signature.JSON_PROPERTY_DEVICE_NAME,
  Signature.JSON_PROPERTY_DEVICE_SLOGAN,
  Signature.JSON_PROPERTY_SKIP_SIGNATURE
})

public class Signature {
  public static final String JSON_PROPERTY_ASK_SIGNATURE_ON_SCREEN = "askSignatureOnScreen";
  private Boolean askSignatureOnScreen;

  public static final String JSON_PROPERTY_DEVICE_NAME = "deviceName";
  private String deviceName;

  public static final String JSON_PROPERTY_DEVICE_SLOGAN = "deviceSlogan";
  private String deviceSlogan;

  public static final String JSON_PROPERTY_SKIP_SIGNATURE = "skipSignature";
  private Boolean skipSignature;

  public Signature() { 
  }

  /**
   * If &#x60;skipSignature&#x60; is false, indicates whether the shopper should provide a signature on the display (**true**) or on the merchant receipt (**false**).
   *
   * @param askSignatureOnScreen
   * @return the current {@code Signature} instance, allowing for method chaining
   */
  public Signature askSignatureOnScreen(Boolean askSignatureOnScreen) {
    this.askSignatureOnScreen = askSignatureOnScreen;
    return this;
  }

  /**
   * If &#x60;skipSignature&#x60; is false, indicates whether the shopper should provide a signature on the display (**true**) or on the merchant receipt (**false**).
   * @return askSignatureOnScreen
   */
  @ApiModelProperty(value = "If `skipSignature` is false, indicates whether the shopper should provide a signature on the display (**true**) or on the merchant receipt (**false**).")
  @JsonProperty(JSON_PROPERTY_ASK_SIGNATURE_ON_SCREEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAskSignatureOnScreen() {
    return askSignatureOnScreen;
  }

  /**
   * If &#x60;skipSignature&#x60; is false, indicates whether the shopper should provide a signature on the display (**true**) or on the merchant receipt (**false**).
   *
   * @param askSignatureOnScreen
   */ 
  @JsonProperty(JSON_PROPERTY_ASK_SIGNATURE_ON_SCREEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAskSignatureOnScreen(Boolean askSignatureOnScreen) {
    this.askSignatureOnScreen = askSignatureOnScreen;
  }

  /**
   * Name that identifies the terminal.
   *
   * @param deviceName
   * @return the current {@code Signature} instance, allowing for method chaining
   */
  public Signature deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Name that identifies the terminal.
   * @return deviceName
   */
  @ApiModelProperty(value = "Name that identifies the terminal.")
  @JsonProperty(JSON_PROPERTY_DEVICE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDeviceName() {
    return deviceName;
  }

  /**
   * Name that identifies the terminal.
   *
   * @param deviceName
   */ 
  @JsonProperty(JSON_PROPERTY_DEVICE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }

  /**
   * Slogan shown on the start screen of the device.
   *
   * @param deviceSlogan
   * @return the current {@code Signature} instance, allowing for method chaining
   */
  public Signature deviceSlogan(String deviceSlogan) {
    this.deviceSlogan = deviceSlogan;
    return this;
  }

  /**
   * Slogan shown on the start screen of the device.
   * @return deviceSlogan
   */
  @ApiModelProperty(value = "Slogan shown on the start screen of the device.")
  @JsonProperty(JSON_PROPERTY_DEVICE_SLOGAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDeviceSlogan() {
    return deviceSlogan;
  }

  /**
   * Slogan shown on the start screen of the device.
   *
   * @param deviceSlogan
   */ 
  @JsonProperty(JSON_PROPERTY_DEVICE_SLOGAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceSlogan(String deviceSlogan) {
    this.deviceSlogan = deviceSlogan;
  }

  /**
   * Skip asking for a signature. This is possible because all global card schemes (American Express, Diners, Discover, JCB, MasterCard, VISA, and UnionPay) regard a signature as optional.
   *
   * @param skipSignature
   * @return the current {@code Signature} instance, allowing for method chaining
   */
  public Signature skipSignature(Boolean skipSignature) {
    this.skipSignature = skipSignature;
    return this;
  }

  /**
   * Skip asking for a signature. This is possible because all global card schemes (American Express, Diners, Discover, JCB, MasterCard, VISA, and UnionPay) regard a signature as optional.
   * @return skipSignature
   */
  @ApiModelProperty(value = "Skip asking for a signature. This is possible because all global card schemes (American Express, Diners, Discover, JCB, MasterCard, VISA, and UnionPay) regard a signature as optional.")
  @JsonProperty(JSON_PROPERTY_SKIP_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSkipSignature() {
    return skipSignature;
  }

  /**
   * Skip asking for a signature. This is possible because all global card schemes (American Express, Diners, Discover, JCB, MasterCard, VISA, and UnionPay) regard a signature as optional.
   *
   * @param skipSignature
   */ 
  @JsonProperty(JSON_PROPERTY_SKIP_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipSignature(Boolean skipSignature) {
    this.skipSignature = skipSignature;
  }

  /**
   * Return true if this Signature object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Signature signature = (Signature) o;
    return Objects.equals(this.askSignatureOnScreen, signature.askSignatureOnScreen) &&
        Objects.equals(this.deviceName, signature.deviceName) &&
        Objects.equals(this.deviceSlogan, signature.deviceSlogan) &&
        Objects.equals(this.skipSignature, signature.skipSignature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(askSignatureOnScreen, deviceName, deviceSlogan, skipSignature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Signature {\n");
    sb.append("    askSignatureOnScreen: ").append(toIndentedString(askSignatureOnScreen)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceSlogan: ").append(toIndentedString(deviceSlogan)).append("\n");
    sb.append("    skipSignature: ").append(toIndentedString(skipSignature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of Signature given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Signature
   * @throws JsonProcessingException if the JSON string is invalid with respect to Signature
   */
  public static Signature fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Signature.class);
  }
/**
  * Convert an instance of Signature to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
