/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.management;

import java.util.Objects;
import java.util.Arrays;
import com.adyen.model.management.CardholderReceipt;
import com.adyen.model.management.Connectivity;
import com.adyen.model.management.Gratuity;
import com.adyen.model.management.Hardware;
import com.adyen.model.management.Nexo;
import com.adyen.model.management.OfflineProcessing;
import com.adyen.model.management.Opi;
import com.adyen.model.management.ReceiptOptions;
import com.adyen.model.management.ReceiptPrinting;
import com.adyen.model.management.Signature;
import com.adyen.model.management.Surcharge;
import com.adyen.model.management.Timeouts;
import com.adyen.model.management.WifiProfiles;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.adyen.model.management.JSON;

/**
 * TerminalSettings
 */

public class TerminalSettings {
  public static final String SERIALIZED_NAME_CARDHOLDER_RECEIPT = "cardholderReceipt";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_RECEIPT)
  private CardholderReceipt cardholderReceipt;

  public static final String SERIALIZED_NAME_CONNECTIVITY = "connectivity";
  @SerializedName(SERIALIZED_NAME_CONNECTIVITY)
  private Connectivity connectivity;

  public static final String SERIALIZED_NAME_GRATUITIES = "gratuities";
  @SerializedName(SERIALIZED_NAME_GRATUITIES)
  private List<Gratuity> gratuities = null;

  public static final String SERIALIZED_NAME_HARDWARE = "hardware";
  @SerializedName(SERIALIZED_NAME_HARDWARE)
  private Hardware hardware;

  public static final String SERIALIZED_NAME_NEXO = "nexo";
  @SerializedName(SERIALIZED_NAME_NEXO)
  private Nexo nexo;

  public static final String SERIALIZED_NAME_OFFLINE_PROCESSING = "offlineProcessing";
  @SerializedName(SERIALIZED_NAME_OFFLINE_PROCESSING)
  private OfflineProcessing offlineProcessing;

  public static final String SERIALIZED_NAME_OPI = "opi";
  @SerializedName(SERIALIZED_NAME_OPI)
  private Opi opi;

  public static final String SERIALIZED_NAME_RECEIPT_OPTIONS = "receiptOptions";
  @SerializedName(SERIALIZED_NAME_RECEIPT_OPTIONS)
  private ReceiptOptions receiptOptions;

  public static final String SERIALIZED_NAME_RECEIPT_PRINTING = "receiptPrinting";
  @SerializedName(SERIALIZED_NAME_RECEIPT_PRINTING)
  private ReceiptPrinting receiptPrinting;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private Signature signature;

  public static final String SERIALIZED_NAME_SURCHARGE = "surcharge";
  @SerializedName(SERIALIZED_NAME_SURCHARGE)
  private Surcharge surcharge;

  public static final String SERIALIZED_NAME_TIMEOUTS = "timeouts";
  @SerializedName(SERIALIZED_NAME_TIMEOUTS)
  private Timeouts timeouts;

  public static final String SERIALIZED_NAME_WIFI_PROFILES = "wifiProfiles";
  @SerializedName(SERIALIZED_NAME_WIFI_PROFILES)
  private WifiProfiles wifiProfiles;

  public TerminalSettings() { 
  }

  public TerminalSettings cardholderReceipt(CardholderReceipt cardholderReceipt) {
    
    this.cardholderReceipt = cardholderReceipt;
    return this;
  }

   /**
   * Get cardholderReceipt
   * @return cardholderReceipt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CardholderReceipt getCardholderReceipt() {
    return cardholderReceipt;
  }


  public void setCardholderReceipt(CardholderReceipt cardholderReceipt) {
    this.cardholderReceipt = cardholderReceipt;
  }


  public TerminalSettings connectivity(Connectivity connectivity) {
    
    this.connectivity = connectivity;
    return this;
  }

   /**
   * Get connectivity
   * @return connectivity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Connectivity getConnectivity() {
    return connectivity;
  }


  public void setConnectivity(Connectivity connectivity) {
    this.connectivity = connectivity;
  }


  public TerminalSettings gratuities(List<Gratuity> gratuities) {
    
    this.gratuities = gratuities;
    return this;
  }

  public TerminalSettings addGratuitiesItem(Gratuity gratuitiesItem) {
    if (this.gratuities == null) {
      this.gratuities = new ArrayList<>();
    }
    this.gratuities.add(gratuitiesItem);
    return this;
  }

   /**
   * Settings for tipping with or without predefined options to choose from. The maximum number of predefined options is four, or three plus the option to enter a custom tip.
   * @return gratuities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Settings for tipping with or without predefined options to choose from. The maximum number of predefined options is four, or three plus the option to enter a custom tip.")

  public List<Gratuity> getGratuities() {
    return gratuities;
  }


  public void setGratuities(List<Gratuity> gratuities) {
    this.gratuities = gratuities;
  }


  public TerminalSettings hardware(Hardware hardware) {
    
    this.hardware = hardware;
    return this;
  }

   /**
   * Get hardware
   * @return hardware
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Hardware getHardware() {
    return hardware;
  }


  public void setHardware(Hardware hardware) {
    this.hardware = hardware;
  }


  public TerminalSettings nexo(Nexo nexo) {
    
    this.nexo = nexo;
    return this;
  }

   /**
   * Get nexo
   * @return nexo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Nexo getNexo() {
    return nexo;
  }


  public void setNexo(Nexo nexo) {
    this.nexo = nexo;
  }


  public TerminalSettings offlineProcessing(OfflineProcessing offlineProcessing) {
    
    this.offlineProcessing = offlineProcessing;
    return this;
  }

   /**
   * Get offlineProcessing
   * @return offlineProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OfflineProcessing getOfflineProcessing() {
    return offlineProcessing;
  }


  public void setOfflineProcessing(OfflineProcessing offlineProcessing) {
    this.offlineProcessing = offlineProcessing;
  }


  public TerminalSettings opi(Opi opi) {
    
    this.opi = opi;
    return this;
  }

   /**
   * Get opi
   * @return opi
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Opi getOpi() {
    return opi;
  }


  public void setOpi(Opi opi) {
    this.opi = opi;
  }


  public TerminalSettings receiptOptions(ReceiptOptions receiptOptions) {
    
    this.receiptOptions = receiptOptions;
    return this;
  }

   /**
   * Get receiptOptions
   * @return receiptOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReceiptOptions getReceiptOptions() {
    return receiptOptions;
  }


  public void setReceiptOptions(ReceiptOptions receiptOptions) {
    this.receiptOptions = receiptOptions;
  }


  public TerminalSettings receiptPrinting(ReceiptPrinting receiptPrinting) {
    
    this.receiptPrinting = receiptPrinting;
    return this;
  }

   /**
   * Get receiptPrinting
   * @return receiptPrinting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReceiptPrinting getReceiptPrinting() {
    return receiptPrinting;
  }


  public void setReceiptPrinting(ReceiptPrinting receiptPrinting) {
    this.receiptPrinting = receiptPrinting;
  }


  public TerminalSettings signature(Signature signature) {
    
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Signature getSignature() {
    return signature;
  }


  public void setSignature(Signature signature) {
    this.signature = signature;
  }


  public TerminalSettings surcharge(Surcharge surcharge) {
    
    this.surcharge = surcharge;
    return this;
  }

   /**
   * Get surcharge
   * @return surcharge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Surcharge getSurcharge() {
    return surcharge;
  }


  public void setSurcharge(Surcharge surcharge) {
    this.surcharge = surcharge;
  }


  public TerminalSettings timeouts(Timeouts timeouts) {
    
    this.timeouts = timeouts;
    return this;
  }

   /**
   * Get timeouts
   * @return timeouts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Timeouts getTimeouts() {
    return timeouts;
  }


  public void setTimeouts(Timeouts timeouts) {
    this.timeouts = timeouts;
  }


  public TerminalSettings wifiProfiles(WifiProfiles wifiProfiles) {
    
    this.wifiProfiles = wifiProfiles;
    return this;
  }

   /**
   * Get wifiProfiles
   * @return wifiProfiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WifiProfiles getWifiProfiles() {
    return wifiProfiles;
  }


  public void setWifiProfiles(WifiProfiles wifiProfiles) {
    this.wifiProfiles = wifiProfiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerminalSettings terminalSettings = (TerminalSettings) o;
    return Objects.equals(this.cardholderReceipt, terminalSettings.cardholderReceipt) &&
        Objects.equals(this.connectivity, terminalSettings.connectivity) &&
        Objects.equals(this.gratuities, terminalSettings.gratuities) &&
        Objects.equals(this.hardware, terminalSettings.hardware) &&
        Objects.equals(this.nexo, terminalSettings.nexo) &&
        Objects.equals(this.offlineProcessing, terminalSettings.offlineProcessing) &&
        Objects.equals(this.opi, terminalSettings.opi) &&
        Objects.equals(this.receiptOptions, terminalSettings.receiptOptions) &&
        Objects.equals(this.receiptPrinting, terminalSettings.receiptPrinting) &&
        Objects.equals(this.signature, terminalSettings.signature) &&
        Objects.equals(this.surcharge, terminalSettings.surcharge) &&
        Objects.equals(this.timeouts, terminalSettings.timeouts) &&
        Objects.equals(this.wifiProfiles, terminalSettings.wifiProfiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardholderReceipt, connectivity, gratuities, hardware, nexo, offlineProcessing, opi, receiptOptions, receiptPrinting, signature, surcharge, timeouts, wifiProfiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerminalSettings {\n");
    sb.append("    cardholderReceipt: ").append(toIndentedString(cardholderReceipt)).append("\n");
    sb.append("    connectivity: ").append(toIndentedString(connectivity)).append("\n");
    sb.append("    gratuities: ").append(toIndentedString(gratuities)).append("\n");
    sb.append("    hardware: ").append(toIndentedString(hardware)).append("\n");
    sb.append("    nexo: ").append(toIndentedString(nexo)).append("\n");
    sb.append("    offlineProcessing: ").append(toIndentedString(offlineProcessing)).append("\n");
    sb.append("    opi: ").append(toIndentedString(opi)).append("\n");
    sb.append("    receiptOptions: ").append(toIndentedString(receiptOptions)).append("\n");
    sb.append("    receiptPrinting: ").append(toIndentedString(receiptPrinting)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    surcharge: ").append(toIndentedString(surcharge)).append("\n");
    sb.append("    timeouts: ").append(toIndentedString(timeouts)).append("\n");
    sb.append("    wifiProfiles: ").append(toIndentedString(wifiProfiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardholderReceipt");
    openapiFields.add("connectivity");
    openapiFields.add("gratuities");
    openapiFields.add("hardware");
    openapiFields.add("nexo");
    openapiFields.add("offlineProcessing");
    openapiFields.add("opi");
    openapiFields.add("receiptOptions");
    openapiFields.add("receiptPrinting");
    openapiFields.add("signature");
    openapiFields.add("surcharge");
    openapiFields.add("timeouts");
    openapiFields.add("wifiProfiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TerminalSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TerminalSettings.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerminalSettings is not found in the empty JSON string", TerminalSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TerminalSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerminalSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `cardholderReceipt`
      if (jsonObj.getAsJsonObject("cardholderReceipt") != null) {
        CardholderReceipt.validateJsonObject(jsonObj.getAsJsonObject("cardholderReceipt"));
      }
      // validate the optional field `connectivity`
      if (jsonObj.getAsJsonObject("connectivity") != null) {
        Connectivity.validateJsonObject(jsonObj.getAsJsonObject("connectivity"));
      }
      JsonArray jsonArraygratuities = jsonObj.getAsJsonArray("gratuities");
      if (jsonArraygratuities != null) {
        // ensure the json data is an array
        if (!jsonObj.get("gratuities").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `gratuities` to be an array in the JSON string but got `%s`", jsonObj.get("gratuities").toString()));
        }

        // validate the optional field `gratuities` (array)
        for (int i = 0; i < jsonArraygratuities.size(); i++) {
          Gratuity.validateJsonObject(jsonArraygratuities.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `hardware`
      if (jsonObj.getAsJsonObject("hardware") != null) {
        Hardware.validateJsonObject(jsonObj.getAsJsonObject("hardware"));
      }
      // validate the optional field `nexo`
      if (jsonObj.getAsJsonObject("nexo") != null) {
        Nexo.validateJsonObject(jsonObj.getAsJsonObject("nexo"));
      }
      // validate the optional field `offlineProcessing`
      if (jsonObj.getAsJsonObject("offlineProcessing") != null) {
        OfflineProcessing.validateJsonObject(jsonObj.getAsJsonObject("offlineProcessing"));
      }
      // validate the optional field `opi`
      if (jsonObj.getAsJsonObject("opi") != null) {
        Opi.validateJsonObject(jsonObj.getAsJsonObject("opi"));
      }
      // validate the optional field `receiptOptions`
      if (jsonObj.getAsJsonObject("receiptOptions") != null) {
        ReceiptOptions.validateJsonObject(jsonObj.getAsJsonObject("receiptOptions"));
      }
      // validate the optional field `receiptPrinting`
      if (jsonObj.getAsJsonObject("receiptPrinting") != null) {
        ReceiptPrinting.validateJsonObject(jsonObj.getAsJsonObject("receiptPrinting"));
      }
      // validate the optional field `signature`
      if (jsonObj.getAsJsonObject("signature") != null) {
        Signature.validateJsonObject(jsonObj.getAsJsonObject("signature"));
      }
      // validate the optional field `surcharge`
      if (jsonObj.getAsJsonObject("surcharge") != null) {
        Surcharge.validateJsonObject(jsonObj.getAsJsonObject("surcharge"));
      }
      // validate the optional field `timeouts`
      if (jsonObj.getAsJsonObject("timeouts") != null) {
        Timeouts.validateJsonObject(jsonObj.getAsJsonObject("timeouts"));
      }
      // validate the optional field `wifiProfiles`
      if (jsonObj.getAsJsonObject("wifiProfiles") != null) {
        WifiProfiles.validateJsonObject(jsonObj.getAsJsonObject("wifiProfiles"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerminalSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerminalSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerminalSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerminalSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<TerminalSettings>() {
           @Override
           public void write(JsonWriter out, TerminalSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerminalSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TerminalSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TerminalSettings
  * @throws IOException if the JSON string is invalid with respect to TerminalSettings
  */
  public static TerminalSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerminalSettings.class);
  }

 /**
  * Convert an instance of TerminalSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

