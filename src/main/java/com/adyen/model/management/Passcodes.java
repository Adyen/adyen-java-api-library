/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.management;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.adyen.model.management.JSON;

/**
 * Passcodes
 */

public class Passcodes {
  public static final String SERIALIZED_NAME_ADMIN_MENU_PIN = "adminMenuPin";
  @SerializedName(SERIALIZED_NAME_ADMIN_MENU_PIN)
  private String adminMenuPin;

  public static final String SERIALIZED_NAME_REFUND_PIN = "refundPin";
  @SerializedName(SERIALIZED_NAME_REFUND_PIN)
  private String refundPin;

  public static final String SERIALIZED_NAME_SCREEN_LOCK_PIN = "screenLockPin";
  @SerializedName(SERIALIZED_NAME_SCREEN_LOCK_PIN)
  private String screenLockPin;

  public static final String SERIALIZED_NAME_TX_MENU_PIN = "txMenuPin";
  @SerializedName(SERIALIZED_NAME_TX_MENU_PIN)
  private String txMenuPin;

  public Passcodes() { 
  }

  public Passcodes adminMenuPin(String adminMenuPin) {
    
    this.adminMenuPin = adminMenuPin;
    return this;
  }

   /**
   * The passcode for the Admin menu and the Settings menu.
   * @return adminMenuPin
  **/
  @ApiModelProperty(value = "The passcode for the Admin menu and the Settings menu.")

  public String getAdminMenuPin() {
    return adminMenuPin;
  }


  public void setAdminMenuPin(String adminMenuPin) {
    this.adminMenuPin = adminMenuPin;
  }


  public Passcodes refundPin(String refundPin) {
    
    this.refundPin = refundPin;
    return this;
  }

   /**
   * The passcode for unreferenced refunds on standalone terminals.
   * @return refundPin
  **/
  @ApiModelProperty(value = "The passcode for unreferenced refunds on standalone terminals.")

  public String getRefundPin() {
    return refundPin;
  }


  public void setRefundPin(String refundPin) {
    this.refundPin = refundPin;
  }


  public Passcodes screenLockPin(String screenLockPin) {
    
    this.screenLockPin = screenLockPin;
    return this;
  }

   /**
   * The passcode to unlock the terminal screen after a timeout.
   * @return screenLockPin
  **/
  @ApiModelProperty(value = "The passcode to unlock the terminal screen after a timeout.")

  public String getScreenLockPin() {
    return screenLockPin;
  }


  public void setScreenLockPin(String screenLockPin) {
    this.screenLockPin = screenLockPin;
  }


  public Passcodes txMenuPin(String txMenuPin) {
    
    this.txMenuPin = txMenuPin;
    return this;
  }

   /**
   * The passcode for the Transactions menu.
   * @return txMenuPin
  **/
  @ApiModelProperty(value = "The passcode for the Transactions menu.")

  public String getTxMenuPin() {
    return txMenuPin;
  }


  public void setTxMenuPin(String txMenuPin) {
    this.txMenuPin = txMenuPin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Passcodes passcodes = (Passcodes) o;
    return Objects.equals(this.adminMenuPin, passcodes.adminMenuPin) &&
        Objects.equals(this.refundPin, passcodes.refundPin) &&
        Objects.equals(this.screenLockPin, passcodes.screenLockPin) &&
        Objects.equals(this.txMenuPin, passcodes.txMenuPin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminMenuPin, refundPin, screenLockPin, txMenuPin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Passcodes {\n");
    sb.append("    adminMenuPin: ").append(toIndentedString(adminMenuPin)).append("\n");
    sb.append("    refundPin: ").append(toIndentedString(refundPin)).append("\n");
    sb.append("    screenLockPin: ").append(toIndentedString(screenLockPin)).append("\n");
    sb.append("    txMenuPin: ").append(toIndentedString(txMenuPin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminMenuPin");
    openapiFields.add("refundPin");
    openapiFields.add("screenLockPin");
    openapiFields.add("txMenuPin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }
  /**
  * logger for Deserialization Errors
  */
  private static final Logger log = Logger.getLogger(Passcodes.class.getName());

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Passcodes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Passcodes.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Passcodes is not found in the empty JSON string", Passcodes.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Passcodes.openapiFields.contains(entry.getKey())) {
          log.log(Level.WARNING, String.format("The field `%s` in the JSON string is not defined in the `BusinessLineInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field adminMenuPin
      if (jsonObj.get("adminMenuPin") != null && !jsonObj.get("adminMenuPin").isJsonPrimitive()) {
        log.log(Level.WARNING, String.format("Expected the field `adminMenuPin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminMenuPin").toString()));
      }
      // validate the optional field refundPin
      if (jsonObj.get("refundPin") != null && !jsonObj.get("refundPin").isJsonPrimitive()) {
        log.log(Level.WARNING, String.format("Expected the field `refundPin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundPin").toString()));
      }
      // validate the optional field screenLockPin
      if (jsonObj.get("screenLockPin") != null && !jsonObj.get("screenLockPin").isJsonPrimitive()) {
        log.log(Level.WARNING, String.format("Expected the field `screenLockPin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenLockPin").toString()));
      }
      // validate the optional field txMenuPin
      if (jsonObj.get("txMenuPin") != null && !jsonObj.get("txMenuPin").isJsonPrimitive()) {
        log.log(Level.WARNING, String.format("Expected the field `txMenuPin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txMenuPin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Passcodes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Passcodes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Passcodes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Passcodes.class));

       return (TypeAdapter<T>) new TypeAdapter<Passcodes>() {
           @Override
           public void write(JsonWriter out, Passcodes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Passcodes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Passcodes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Passcodes
  * @throws IOException if the JSON string is invalid with respect to Passcodes
  */
  public static Passcodes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Passcodes.class);
  }

 /**
  * Convert an instance of Passcodes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

