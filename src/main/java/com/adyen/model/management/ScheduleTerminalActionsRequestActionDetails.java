/*
 * Management API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.management;

import java.util.*;

import com.adyen.model.management.InstallAndroidAppDetails;
import com.adyen.model.management.InstallAndroidCertificateDetails;
import com.adyen.model.management.ReleaseUpdateDetails;
import com.adyen.model.management.UninstallAndroidAppDetails;
import com.adyen.model.management.UninstallAndroidCertificateDetails;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;


@JsonDeserialize(using = ScheduleTerminalActionsRequestActionDetails.ScheduleTerminalActionsRequestActionDetailsDeserializer.class)
@JsonSerialize(using = ScheduleTerminalActionsRequestActionDetails.ScheduleTerminalActionsRequestActionDetailsSerializer.class)
public class ScheduleTerminalActionsRequestActionDetails extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ScheduleTerminalActionsRequestActionDetails.class.getName());

    public static class ScheduleTerminalActionsRequestActionDetailsSerializer extends StdSerializer<ScheduleTerminalActionsRequestActionDetails> {
        public ScheduleTerminalActionsRequestActionDetailsSerializer(Class<ScheduleTerminalActionsRequestActionDetails> t) {
            super(t);
        }

        public ScheduleTerminalActionsRequestActionDetailsSerializer() {
            this(null);
        }

        @Override
        public void serialize(ScheduleTerminalActionsRequestActionDetails value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class ScheduleTerminalActionsRequestActionDetailsDeserializer extends StdDeserializer<ScheduleTerminalActionsRequestActionDetails> {
        public ScheduleTerminalActionsRequestActionDetailsDeserializer() {
            this(ScheduleTerminalActionsRequestActionDetails.class);
        }

        public ScheduleTerminalActionsRequestActionDetailsDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public ScheduleTerminalActionsRequestActionDetails deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {

            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            int match = 0;

            List<Class<?>> targetClasses = Arrays.asList(
                    InstallAndroidAppDetails.class,
                    InstallAndroidCertificateDetails.class,
                    ReleaseUpdateDetails.class,
                    UninstallAndroidAppDetails.class,
                    UninstallAndroidCertificateDetails.class
            );

            for (Class<?> targetClass : targetClasses) {
                try {
                    if (canAttemptParsing(targetClass, typeCoercion, token) || matchesTypeEnum(targetClass, tree)) {
                        deserialized = JSON.getMapper().readValue(tree.toString(), targetClass);
                        match++;
                        log.log(Level.FINER, "Input data matches schema '" + targetClass.getSimpleName() + "'");
                    }
                } catch (Exception e) {
                    log.log(Level.FINER, "Input data does not match schema '" + targetClass.getSimpleName() + "'", e);
                }
            }

            if (match == 0) {
                throw new IOException(String.format("Failed deserialization: %d classes match result, expected 1", match));
            }
            if (match > 1) {
                log.log(Level.WARNING, String.format("Warning, indecisive deserialization: %d classes match result, expected 1", match));
            }

            ScheduleTerminalActionsRequestActionDetails result = new ScheduleTerminalActionsRequestActionDetails();
            result.setActualInstance(deserialized);
            return result;
        }

        private boolean canAttemptParsing(Class<?> targetClass, boolean typeCoercion, JsonToken token) {
            boolean attemptParsing = typeCoercion;
            if (!attemptParsing) {
                attemptParsing |= ((targetClass.equals(Integer.class) || targetClass.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                attemptParsing |= ((targetClass.equals(Float.class) || targetClass.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                attemptParsing |= (targetClass.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                attemptParsing |= (targetClass.equals(String.class) && token == JsonToken.VALUE_STRING);
            }
            return attemptParsing;
        }

        private boolean matchesTypeEnum(Class<?> targetClass, JsonNode tree) {
            try {
                JsonNode typeNode = tree.findValue("type");
                if (typeNode == null) return false;

                String typeValue = typeNode.asText();
                Class<?> typeEnumClass = Class.forName(targetClass.getName() + "$TypeEnum");
                Object[] enumValues = typeEnumClass.getEnumConstants();
                return Arrays.stream(enumValues)
                        .map(enumValue -> {
                            try {
                                return typeEnumClass.getMethod("getValue").invoke(enumValue).toString();
                            } catch (Exception ignored) {
                                return "";
                            }
                        })
                        .anyMatch(value -> value.contains(typeValue));
            } catch (Exception ignored) {
                return false;
            }
        }


        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public ScheduleTerminalActionsRequestActionDetails getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "ScheduleTerminalActionsRequestActionDetails cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ScheduleTerminalActionsRequestActionDetails() {
        super("oneOf", Boolean.FALSE);
    }

    public ScheduleTerminalActionsRequestActionDetails(InstallAndroidAppDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ScheduleTerminalActionsRequestActionDetails(InstallAndroidCertificateDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ScheduleTerminalActionsRequestActionDetails(ReleaseUpdateDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ScheduleTerminalActionsRequestActionDetails(UninstallAndroidAppDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ScheduleTerminalActionsRequestActionDetails(UninstallAndroidCertificateDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("InstallAndroidAppDetails", new GenericType<InstallAndroidAppDetails>() {
        });
        schemas.put("InstallAndroidCertificateDetails", new GenericType<InstallAndroidCertificateDetails>() {
        });
        schemas.put("ReleaseUpdateDetails", new GenericType<ReleaseUpdateDetails>() {
        });
        schemas.put("UninstallAndroidAppDetails", new GenericType<UninstallAndroidAppDetails>() {
        });
        schemas.put("UninstallAndroidCertificateDetails", new GenericType<UninstallAndroidCertificateDetails>() {
        });
        JSON.registerDescendants(ScheduleTerminalActionsRequestActionDetails.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ScheduleTerminalActionsRequestActionDetails.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(InstallAndroidAppDetails.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(InstallAndroidCertificateDetails.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ReleaseUpdateDetails.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(UninstallAndroidAppDetails.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(UninstallAndroidCertificateDetails.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails");
    }

    /**
     * Get the actual instance, which can be the following:
     * InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails
     *
     * @return The actual instance (InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `InstallAndroidAppDetails`. If the actual instance is not `InstallAndroidAppDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InstallAndroidAppDetails`
     * @throws ClassCastException if the instance is not `InstallAndroidAppDetails`
     */
    public InstallAndroidAppDetails getInstallAndroidAppDetails() throws ClassCastException {
        return (InstallAndroidAppDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InstallAndroidCertificateDetails`. If the actual instance is not `InstallAndroidCertificateDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InstallAndroidCertificateDetails`
     * @throws ClassCastException if the instance is not `InstallAndroidCertificateDetails`
     */
    public InstallAndroidCertificateDetails getInstallAndroidCertificateDetails() throws ClassCastException {
        return (InstallAndroidCertificateDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ReleaseUpdateDetails`. If the actual instance is not `ReleaseUpdateDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReleaseUpdateDetails`
     * @throws ClassCastException if the instance is not `ReleaseUpdateDetails`
     */
    public ReleaseUpdateDetails getReleaseUpdateDetails() throws ClassCastException {
        return (ReleaseUpdateDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UninstallAndroidAppDetails`. If the actual instance is not `UninstallAndroidAppDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UninstallAndroidAppDetails`
     * @throws ClassCastException if the instance is not `UninstallAndroidAppDetails`
     */
    public UninstallAndroidAppDetails getUninstallAndroidAppDetails() throws ClassCastException {
        return (UninstallAndroidAppDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UninstallAndroidCertificateDetails`. If the actual instance is not `UninstallAndroidCertificateDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UninstallAndroidCertificateDetails`
     * @throws ClassCastException if the instance is not `UninstallAndroidCertificateDetails`
     */
    public UninstallAndroidCertificateDetails getUninstallAndroidCertificateDetails() throws ClassCastException {
        return (UninstallAndroidCertificateDetails)super.getActualInstance();
    }

    /**
    * Create an instance of ScheduleTerminalActionsRequestActionDetails given an JSON string
    *
    * @param jsonString JSON string
    * @return An instance of ScheduleTerminalActionsRequestActionDetails
    * @throws IOException if the JSON string is invalid with respect to ScheduleTerminalActionsRequestActionDetails
    */
    public static ScheduleTerminalActionsRequestActionDetails fromJson(String jsonString) throws IOException {
        return JSON.getMapper().readValue(jsonString, ScheduleTerminalActionsRequestActionDetails.class);
    }

    /**
    * Convert an instance of ScheduleTerminalActionsRequestActionDetails to an JSON string
    *
    * @return JSON string
    */
    public String toJson() throws JsonProcessingException {
        return JSON.getMapper().writeValueAsString(this);
    }
}

