/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.management;

import java.util.Objects;
import java.util.Arrays;
import com.adyen.model.management.InstallAndroidAppDetails;
import com.adyen.model.management.InstallAndroidCertificateDetails;
import com.adyen.model.management.ReleaseUpdateDetails;
import com.adyen.model.management.UninstallAndroidAppDetails;
import com.adyen.model.management.UninstallAndroidCertificateDetails;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.adyen.model.management.JSON;


public class ScheduleTerminalActionsRequestActionDetails extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ScheduleTerminalActionsRequestActionDetails.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ScheduleTerminalActionsRequestActionDetails.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ScheduleTerminalActionsRequestActionDetails' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InstallAndroidAppDetails> adapterInstallAndroidAppDetails = gson.getDelegateAdapter(this, TypeToken.get(InstallAndroidAppDetails.class));
            final TypeAdapter<InstallAndroidCertificateDetails> adapterInstallAndroidCertificateDetails = gson.getDelegateAdapter(this, TypeToken.get(InstallAndroidCertificateDetails.class));
            final TypeAdapter<ReleaseUpdateDetails> adapterReleaseUpdateDetails = gson.getDelegateAdapter(this, TypeToken.get(ReleaseUpdateDetails.class));
            final TypeAdapter<UninstallAndroidAppDetails> adapterUninstallAndroidAppDetails = gson.getDelegateAdapter(this, TypeToken.get(UninstallAndroidAppDetails.class));
            final TypeAdapter<UninstallAndroidCertificateDetails> adapterUninstallAndroidCertificateDetails = gson.getDelegateAdapter(this, TypeToken.get(UninstallAndroidCertificateDetails.class));

            return (TypeAdapter<T>) new TypeAdapter<ScheduleTerminalActionsRequestActionDetails>() {
                @Override
                public void write(JsonWriter out, ScheduleTerminalActionsRequestActionDetails value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `InstallAndroidAppDetails`
                    if (value.getActualInstance() instanceof InstallAndroidAppDetails) {
                        JsonObject obj = adapterInstallAndroidAppDetails.toJsonTree((InstallAndroidAppDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `InstallAndroidCertificateDetails`
                    if (value.getActualInstance() instanceof InstallAndroidCertificateDetails) {
                        JsonObject obj = adapterInstallAndroidCertificateDetails.toJsonTree((InstallAndroidCertificateDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `ReleaseUpdateDetails`
                    if (value.getActualInstance() instanceof ReleaseUpdateDetails) {
                        JsonObject obj = adapterReleaseUpdateDetails.toJsonTree((ReleaseUpdateDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `UninstallAndroidAppDetails`
                    if (value.getActualInstance() instanceof UninstallAndroidAppDetails) {
                        JsonObject obj = adapterUninstallAndroidAppDetails.toJsonTree((UninstallAndroidAppDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `UninstallAndroidCertificateDetails`
                    if (value.getActualInstance() instanceof UninstallAndroidCertificateDetails) {
                        JsonObject obj = adapterUninstallAndroidCertificateDetails.toJsonTree((UninstallAndroidCertificateDetails)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails");
                }

                @Override
                public ScheduleTerminalActionsRequestActionDetails read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize InstallAndroidAppDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InstallAndroidAppDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterInstallAndroidAppDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InstallAndroidAppDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InstallAndroidAppDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InstallAndroidAppDetails'", e);
                    }

                    // deserialize InstallAndroidCertificateDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InstallAndroidCertificateDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterInstallAndroidCertificateDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InstallAndroidCertificateDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InstallAndroidCertificateDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InstallAndroidCertificateDetails'", e);
                    }

                    // deserialize ReleaseUpdateDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ReleaseUpdateDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterReleaseUpdateDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ReleaseUpdateDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ReleaseUpdateDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ReleaseUpdateDetails'", e);
                    }

                    // deserialize UninstallAndroidAppDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UninstallAndroidAppDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterUninstallAndroidAppDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UninstallAndroidAppDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UninstallAndroidAppDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UninstallAndroidAppDetails'", e);
                    }

                    // deserialize UninstallAndroidCertificateDetails
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UninstallAndroidCertificateDetails.validateJsonObject(jsonObject);
                        actualAdapter = adapterUninstallAndroidCertificateDetails;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UninstallAndroidCertificateDetails'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UninstallAndroidCertificateDetails failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UninstallAndroidCertificateDetails'", e);
                    }

                    if (match == 1) {
                        ScheduleTerminalActionsRequestActionDetails ret = new ScheduleTerminalActionsRequestActionDetails();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ScheduleTerminalActionsRequestActionDetails: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ScheduleTerminalActionsRequestActionDetails() {
        super("oneOf", Boolean.FALSE);
    }

    public ScheduleTerminalActionsRequestActionDetails(InstallAndroidAppDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ScheduleTerminalActionsRequestActionDetails(InstallAndroidCertificateDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ScheduleTerminalActionsRequestActionDetails(ReleaseUpdateDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ScheduleTerminalActionsRequestActionDetails(UninstallAndroidAppDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ScheduleTerminalActionsRequestActionDetails(UninstallAndroidCertificateDetails o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("InstallAndroidAppDetails", new GenericType<InstallAndroidAppDetails>() {
        });
        schemas.put("InstallAndroidCertificateDetails", new GenericType<InstallAndroidCertificateDetails>() {
        });
        schemas.put("ReleaseUpdateDetails", new GenericType<ReleaseUpdateDetails>() {
        });
        schemas.put("UninstallAndroidAppDetails", new GenericType<UninstallAndroidAppDetails>() {
        });
        schemas.put("UninstallAndroidCertificateDetails", new GenericType<UninstallAndroidCertificateDetails>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ScheduleTerminalActionsRequestActionDetails.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof InstallAndroidAppDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InstallAndroidCertificateDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ReleaseUpdateDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UninstallAndroidAppDetails) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UninstallAndroidCertificateDetails) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails");
    }

    /**
     * Get the actual instance, which can be the following:
     * InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails
     *
     * @return The actual instance (InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `InstallAndroidAppDetails`. If the actual instance is not `InstallAndroidAppDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InstallAndroidAppDetails`
     * @throws ClassCastException if the instance is not `InstallAndroidAppDetails`
     */
    public InstallAndroidAppDetails getInstallAndroidAppDetails() throws ClassCastException {
        return (InstallAndroidAppDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InstallAndroidCertificateDetails`. If the actual instance is not `InstallAndroidCertificateDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InstallAndroidCertificateDetails`
     * @throws ClassCastException if the instance is not `InstallAndroidCertificateDetails`
     */
    public InstallAndroidCertificateDetails getInstallAndroidCertificateDetails() throws ClassCastException {
        return (InstallAndroidCertificateDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ReleaseUpdateDetails`. If the actual instance is not `ReleaseUpdateDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReleaseUpdateDetails`
     * @throws ClassCastException if the instance is not `ReleaseUpdateDetails`
     */
    public ReleaseUpdateDetails getReleaseUpdateDetails() throws ClassCastException {
        return (ReleaseUpdateDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UninstallAndroidAppDetails`. If the actual instance is not `UninstallAndroidAppDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UninstallAndroidAppDetails`
     * @throws ClassCastException if the instance is not `UninstallAndroidAppDetails`
     */
    public UninstallAndroidAppDetails getUninstallAndroidAppDetails() throws ClassCastException {
        return (UninstallAndroidAppDetails)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UninstallAndroidCertificateDetails`. If the actual instance is not `UninstallAndroidCertificateDetails`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UninstallAndroidCertificateDetails`
     * @throws ClassCastException if the instance is not `UninstallAndroidCertificateDetails`
     */
    public UninstallAndroidCertificateDetails getUninstallAndroidCertificateDetails() throws ClassCastException {
        return (UninstallAndroidCertificateDetails)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScheduleTerminalActionsRequestActionDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with InstallAndroidAppDetails
    try {
      InstallAndroidAppDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for InstallAndroidAppDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with InstallAndroidCertificateDetails
    try {
      InstallAndroidCertificateDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for InstallAndroidCertificateDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ReleaseUpdateDetails
    try {
      ReleaseUpdateDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ReleaseUpdateDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with UninstallAndroidAppDetails
    try {
      UninstallAndroidAppDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for UninstallAndroidAppDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with UninstallAndroidCertificateDetails
    try {
      UninstallAndroidCertificateDetails.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for UninstallAndroidCertificateDetails failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ScheduleTerminalActionsRequestActionDetails with oneOf schemas: InstallAndroidAppDetails, InstallAndroidCertificateDetails, ReleaseUpdateDetails, UninstallAndroidAppDetails, UninstallAndroidCertificateDetails. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of ScheduleTerminalActionsRequestActionDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScheduleTerminalActionsRequestActionDetails
  * @throws IOException if the JSON string is invalid with respect to ScheduleTerminalActionsRequestActionDetails
  */
  public static ScheduleTerminalActionsRequestActionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduleTerminalActionsRequestActionDetails.class);
  }

 /**
  * Convert an instance of ScheduleTerminalActionsRequestActionDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

