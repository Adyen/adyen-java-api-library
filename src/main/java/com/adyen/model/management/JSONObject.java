/*
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.management;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.adyen.model.management.JSONPath;
import com.adyen.model.management.JSONPathWrapper;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * JSONObject
 */
@JsonPropertyOrder({
  JSONObject.JSON_PROPERTY_PATHS,
  JSONObject.JSON_PROPERTY_ROOT_PATH
})

public class JSONObject {
  public static final String JSON_PROPERTY_PATHS = "paths";
  private List<JSONPathWrapper> paths = null;

  public static final String JSON_PROPERTY_ROOT_PATH = "rootPath";
  private JSONPath rootPath;

  public JSONObject() { 
  }

  public JSONObject paths(List<JSONPathWrapper> paths) {
    this.paths = paths;
    return this;
  }

  public JSONObject addPathsItem(JSONPathWrapper pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

   /**
   * Get paths
   * @return paths
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<JSONPathWrapper> getPaths() {
    return paths;
  }


  @JsonProperty(JSON_PROPERTY_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaths(List<JSONPathWrapper> paths) {
    this.paths = paths;
  }


  public JSONObject rootPath(JSONPath rootPath) {
    this.rootPath = rootPath;
    return this;
  }

   /**
   * Get rootPath
   * @return rootPath
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ROOT_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JSONPath getRootPath() {
    return rootPath;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootPath(JSONPath rootPath) {
    this.rootPath = rootPath;
  }


  /**
   * Return true if this JSONObject object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JSONObject jsONObject = (JSONObject) o;
    return Objects.equals(this.paths, jsONObject.paths) &&
        Objects.equals(this.rootPath, jsONObject.rootPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paths, rootPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JSONObject {\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    rootPath: ").append(toIndentedString(rootPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of JSONObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JSONObject
   * @throws JsonProcessingException if the JSON string is invalid with respect to JSONObject
   */
  public static JSONObject fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, JSONObject.class);
  }
/**
  * Convert an instance of JSONObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}

