/*
 * Open Banking API
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.adyen.model.openbanking;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.util.*;

/** Provider */
@JsonPropertyOrder({Provider.JSON_PROPERTY_LOGO_U_R_L, Provider.JSON_PROPERTY_NAME})
public class Provider {
  public static final String JSON_PROPERTY_LOGO_U_R_L = "logoURL";
  private String logoURL;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public Provider() {}

  /**
   * The URL of the organization&#39;s or brand&#39;s logo. This URL typically points to an image
   * file (e.g., .png, .jpg, .svg) that can be displayed to visually represent the entity.
   *
   * @param logoURL The URL of the organization&#39;s or brand&#39;s logo. This URL typically points
   *     to an image file (e.g., .png, .jpg, .svg) that can be displayed to visually represent the
   *     entity.
   * @return the current {@code Provider} instance, allowing for method chaining
   */
  public Provider logoURL(String logoURL) {
    this.logoURL = logoURL;
    return this;
  }

  /**
   * The URL of the organization&#39;s or brand&#39;s logo. This URL typically points to an image
   * file (e.g., .png, .jpg, .svg) that can be displayed to visually represent the entity.
   *
   * @return logoURL The URL of the organization&#39;s or brand&#39;s logo. This URL typically
   *     points to an image file (e.g., .png, .jpg, .svg) that can be displayed to visually
   *     represent the entity.
   */
  @JsonProperty(JSON_PROPERTY_LOGO_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLogoURL() {
    return logoURL;
  }

  /**
   * The URL of the organization&#39;s or brand&#39;s logo. This URL typically points to an image
   * file (e.g., .png, .jpg, .svg) that can be displayed to visually represent the entity.
   *
   * @param logoURL The URL of the organization&#39;s or brand&#39;s logo. This URL typically points
   *     to an image file (e.g., .png, .jpg, .svg) that can be displayed to visually represent the
   *     entity.
   */
  @JsonProperty(JSON_PROPERTY_LOGO_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogoURL(String logoURL) {
    this.logoURL = logoURL;
  }

  /**
   * The official or commonly used name of the organization, brand, or entity.
   *
   * @param name The official or commonly used name of the organization, brand, or entity.
   * @return the current {@code Provider} instance, allowing for method chaining
   */
  public Provider name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The official or commonly used name of the organization, brand, or entity.
   *
   * @return name The official or commonly used name of the organization, brand, or entity.
   */
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }

  /**
   * The official or commonly used name of the organization, brand, or entity.
   *
   * @param name The official or commonly used name of the organization, brand, or entity.
   */
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  /** Return true if this Provider object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Provider provider = (Provider) o;
    return Objects.equals(this.logoURL, provider.logoURL)
        && Objects.equals(this.name, provider.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logoURL, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Provider {\n");
    sb.append("    logoURL: ").append(toIndentedString(logoURL)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Create an instance of Provider given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Provider
   * @throws JsonProcessingException if the JSON string is invalid with respect to Provider
   */
  public static Provider fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Provider.class);
  }

  /**
   * Convert an instance of Provider to an JSON string
   *
   * @return JSON string
   */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
