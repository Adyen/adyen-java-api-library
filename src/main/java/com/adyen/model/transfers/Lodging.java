/*
 * Transfers API
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.transfers;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Lodging
 */
@JsonPropertyOrder({
  Lodging.JSON_PROPERTY_CHECK_IN_DATE,
  Lodging.JSON_PROPERTY_NUMBER_OF_NIGHTS
})

public class Lodging {
  public static final String JSON_PROPERTY_CHECK_IN_DATE = "checkInDate";
  private String checkInDate;

  public static final String JSON_PROPERTY_NUMBER_OF_NIGHTS = "numberOfNights";
  private Integer numberOfNights;

  public Lodging() { 
  }

  /**
   * The check-in date.
   *
   * @param checkInDate The check-in date.
   * @return the current {@code Lodging} instance, allowing for method chaining
   */
  public Lodging checkInDate(String checkInDate) {
    this.checkInDate = checkInDate;
    return this;
  }

  /**
   * The check-in date.
   * @return checkInDate The check-in date.
   */
  @JsonProperty(JSON_PROPERTY_CHECK_IN_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCheckInDate() {
    return checkInDate;
  }

  /**
   * The check-in date.
   *
   * @param checkInDate The check-in date.
   */
  @JsonProperty(JSON_PROPERTY_CHECK_IN_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCheckInDate(String checkInDate) {
    this.checkInDate = checkInDate;
  }

  /**
   * The total number of nights the room is booked for.
   *
   * @param numberOfNights The total number of nights the room is booked for.
   * @return the current {@code Lodging} instance, allowing for method chaining
   */
  public Lodging numberOfNights(Integer numberOfNights) {
    this.numberOfNights = numberOfNights;
    return this;
  }

  /**
   * The total number of nights the room is booked for.
   * @return numberOfNights The total number of nights the room is booked for.
   */
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_NIGHTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getNumberOfNights() {
    return numberOfNights;
  }

  /**
   * The total number of nights the room is booked for.
   *
   * @param numberOfNights The total number of nights the room is booked for.
   */
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_NIGHTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfNights(Integer numberOfNights) {
    this.numberOfNights = numberOfNights;
  }

  /**
   * Return true if this Lodging object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Lodging lodging = (Lodging) o;
    return Objects.equals(this.checkInDate, lodging.checkInDate) &&
        Objects.equals(this.numberOfNights, lodging.numberOfNights);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkInDate, numberOfNights);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Lodging {\n");
    sb.append("    checkInDate: ").append(toIndentedString(checkInDate)).append("\n");
    sb.append("    numberOfNights: ").append(toIndentedString(numberOfNights)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of Lodging given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Lodging
   * @throws JsonProcessingException if the JSON string is invalid with respect to Lodging
   */
  public static Lodging fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Lodging.class);
  }
/**
  * Convert an instance of Lodging to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
