/*
 * Configuration API
 *
 * The version of the OpenAPI document: 2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.adyen.model.balanceplatform;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** WalletProviderDeviceType */
@JsonPropertyOrder({
  WalletProviderDeviceType.JSON_PROPERTY_OPERATION,
  WalletProviderDeviceType.JSON_PROPERTY_VALUE
})
public class WalletProviderDeviceType {
  public static final String JSON_PROPERTY_OPERATION = "operation";
  private String operation;

  /** Gets or Sets value */
  public enum ValueEnum {
    CARD(String.valueOf("CARD")),

    MOBILE_PHONE(String.valueOf("MOBILE_PHONE")),

    OTHER(String.valueOf("OTHER")),

    PC(String.valueOf("PC")),

    TABLET_OR_EREADER(String.valueOf("TABLET_OR_EREADER")),

    UNKNOWN(String.valueOf("UNKNOWN")),

    WATCH_OR_WRISTBAND(String.valueOf("WATCH_OR_WRISTBAND")),

    WEARABLE(String.valueOf("WEARABLE"));

    private String value;

    ValueEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ValueEnum fromValue(String value) {
      for (ValueEnum b : ValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VALUE = "value";
  private List<ValueEnum> value;

  public WalletProviderDeviceType() {}

  /**
   * Defines how the condition must be evaluated.
   *
   * @param operation Defines how the condition must be evaluated.
   * @return the current {@code WalletProviderDeviceType} instance, allowing for method chaining
   */
  public WalletProviderDeviceType operation(String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Defines how the condition must be evaluated.
   *
   * @return operation Defines how the condition must be evaluated.
   */
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOperation() {
    return operation;
  }

  /**
   * Defines how the condition must be evaluated.
   *
   * @param operation Defines how the condition must be evaluated.
   */
  @JsonProperty(JSON_PROPERTY_OPERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperation(String operation) {
    this.operation = operation;
  }

  /**
   * value
   *
   * @param value
   * @return the current {@code WalletProviderDeviceType} instance, allowing for method chaining
   */
  public WalletProviderDeviceType value(List<ValueEnum> value) {
    this.value = value;
    return this;
  }

  public WalletProviderDeviceType addValueItem(ValueEnum valueItem) {
    if (this.value == null) {
      this.value = new ArrayList<>();
    }
    this.value.add(valueItem);
    return this;
  }

  /**
   * Get value
   *
   * @return value
   */
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ValueEnum> getValue() {
    return value;
  }

  /**
   * value
   *
   * @param value
   */
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(List<ValueEnum> value) {
    this.value = value;
  }

  /** Return true if this WalletProviderDeviceType object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WalletProviderDeviceType walletProviderDeviceType = (WalletProviderDeviceType) o;
    return Objects.equals(this.operation, walletProviderDeviceType.operation)
        && Objects.equals(this.value, walletProviderDeviceType.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WalletProviderDeviceType {\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Create an instance of WalletProviderDeviceType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WalletProviderDeviceType
   * @throws JsonProcessingException if the JSON string is invalid with respect to
   *     WalletProviderDeviceType
   */
  public static WalletProviderDeviceType fromJson(String jsonString)
      throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, WalletProviderDeviceType.class);
  }

  /**
   * Convert an instance of WalletProviderDeviceType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
