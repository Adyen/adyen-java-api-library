/*
 * Configuration API
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.balanceplatform;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.balanceplatform.AssociationStatus;
import com.adyen.model.balanceplatform.ScaEntityType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Association
 */
@JsonPropertyOrder({
  Association.JSON_PROPERTY_ENTITY_ID,
  Association.JSON_PROPERTY_ENTITY_TYPE,
  Association.JSON_PROPERTY_SCA_DEVICE_ID,
  Association.JSON_PROPERTY_STATUS
})

public class Association {
  public static final String JSON_PROPERTY_ENTITY_ID = "entityId";
  private String entityId;

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private ScaEntityType entityType;

  public static final String JSON_PROPERTY_SCA_DEVICE_ID = "scaDeviceId";
  private String scaDeviceId;

  public static final String JSON_PROPERTY_STATUS = "status";
  private AssociationStatus status;

  public Association() { 
  }

  /**
   * The unique identifier of the entity.
   *
   * @param entityId The unique identifier of the entity.
   * @return the current {@code Association} instance, allowing for method chaining
   */
  public Association entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * The unique identifier of the entity.
   * @return entityId The unique identifier of the entity.
   */
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEntityId() {
    return entityId;
  }

  /**
   * The unique identifier of the entity.
   *
   * @param entityId The unique identifier of the entity.
   */
  @JsonProperty(JSON_PROPERTY_ENTITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }

  /**
   * entityType
   *
   * @param entityType 
   * @return the current {@code Association} instance, allowing for method chaining
   */
  public Association entityType(ScaEntityType entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType 
   */
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ScaEntityType getEntityType() {
    return entityType;
  }

  /**
   * entityType
   *
   * @param entityType 
   */
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(ScaEntityType entityType) {
    this.entityType = entityType;
  }

  /**
   * The unique identifier for the SCA device.
   *
   * @param scaDeviceId The unique identifier for the SCA device.
   * @return the current {@code Association} instance, allowing for method chaining
   */
  public Association scaDeviceId(String scaDeviceId) {
    this.scaDeviceId = scaDeviceId;
    return this;
  }

  /**
   * The unique identifier for the SCA device.
   * @return scaDeviceId The unique identifier for the SCA device.
   */
  @JsonProperty(JSON_PROPERTY_SCA_DEVICE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getScaDeviceId() {
    return scaDeviceId;
  }

  /**
   * The unique identifier for the SCA device.
   *
   * @param scaDeviceId The unique identifier for the SCA device.
   */
  @JsonProperty(JSON_PROPERTY_SCA_DEVICE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScaDeviceId(String scaDeviceId) {
    this.scaDeviceId = scaDeviceId;
  }

  /**
   * status
   *
   * @param status 
   * @return the current {@code Association} instance, allowing for method chaining
   */
  public Association status(AssociationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status 
   */
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public AssociationStatus getStatus() {
    return status;
  }

  /**
   * status
   *
   * @param status 
   */
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(AssociationStatus status) {
    this.status = status;
  }

  /**
   * Return true if this Association object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Association association = (Association) o;
    return Objects.equals(this.entityId, association.entityId) &&
        Objects.equals(this.entityType, association.entityType) &&
        Objects.equals(this.scaDeviceId, association.scaDeviceId) &&
        Objects.equals(this.status, association.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, entityType, scaDeviceId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Association {\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    scaDeviceId: ").append(toIndentedString(scaDeviceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of Association given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Association
   * @throws JsonProcessingException if the JSON string is invalid with respect to Association
   */
  public static Association fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Association.class);
  }
/**
  * Convert an instance of Association to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
