/*
 * Configuration API
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.balanceplatform;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.balanceplatform.ScaExemption;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * CreateScaInformation
 */
@JsonPropertyOrder({
  CreateScaInformation.JSON_PROPERTY_EXEMPTION,
  CreateScaInformation.JSON_PROPERTY_SCA_ON_APPROVAL
})

public class CreateScaInformation {
  public static final String JSON_PROPERTY_EXEMPTION = "exemption";
  private ScaExemption exemption;

  public static final String JSON_PROPERTY_SCA_ON_APPROVAL = "scaOnApproval";
  private Boolean scaOnApproval;

  public CreateScaInformation() { 
  }

  /**
   * exemption
   *
   * @param exemption 
   * @return the current {@code CreateScaInformation} instance, allowing for method chaining
   */
  public CreateScaInformation exemption(ScaExemption exemption) {
    this.exemption = exemption;
    return this;
  }

  /**
   * Get exemption
   * @return exemption 
   */
  @JsonProperty(JSON_PROPERTY_EXEMPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ScaExemption getExemption() {
    return exemption;
  }

  /**
   * exemption
   *
   * @param exemption 
   */
  @JsonProperty(JSON_PROPERTY_EXEMPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExemption(ScaExemption exemption) {
    this.exemption = exemption;
  }

  /**
   * Indicates whether to initiate Strong Customer Authentication (SCA) later, during approval, or immediately after you submit this request. Possible values: * **true**: you can initiate SCA later, during approval, for all pending transfer limits. * **false** (default): you initiate SCA immediately after submitting the transfer limit request.
   *
   * @param scaOnApproval Indicates whether to initiate Strong Customer Authentication (SCA) later, during approval, or immediately after you submit this request. Possible values: * **true**: you can initiate SCA later, during approval, for all pending transfer limits. * **false** (default): you initiate SCA immediately after submitting the transfer limit request.
   * @return the current {@code CreateScaInformation} instance, allowing for method chaining
   */
  public CreateScaInformation scaOnApproval(Boolean scaOnApproval) {
    this.scaOnApproval = scaOnApproval;
    return this;
  }

  /**
   * Indicates whether to initiate Strong Customer Authentication (SCA) later, during approval, or immediately after you submit this request. Possible values: * **true**: you can initiate SCA later, during approval, for all pending transfer limits. * **false** (default): you initiate SCA immediately after submitting the transfer limit request.
   * @return scaOnApproval Indicates whether to initiate Strong Customer Authentication (SCA) later, during approval, or immediately after you submit this request. Possible values: * **true**: you can initiate SCA later, during approval, for all pending transfer limits. * **false** (default): you initiate SCA immediately after submitting the transfer limit request.
   */
  @JsonProperty(JSON_PROPERTY_SCA_ON_APPROVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getScaOnApproval() {
    return scaOnApproval;
  }

  /**
   * Indicates whether to initiate Strong Customer Authentication (SCA) later, during approval, or immediately after you submit this request. Possible values: * **true**: you can initiate SCA later, during approval, for all pending transfer limits. * **false** (default): you initiate SCA immediately after submitting the transfer limit request.
   *
   * @param scaOnApproval Indicates whether to initiate Strong Customer Authentication (SCA) later, during approval, or immediately after you submit this request. Possible values: * **true**: you can initiate SCA later, during approval, for all pending transfer limits. * **false** (default): you initiate SCA immediately after submitting the transfer limit request.
   */
  @JsonProperty(JSON_PROPERTY_SCA_ON_APPROVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScaOnApproval(Boolean scaOnApproval) {
    this.scaOnApproval = scaOnApproval;
  }

  /**
   * Return true if this CreateScaInformation object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateScaInformation createScaInformation = (CreateScaInformation) o;
    return Objects.equals(this.exemption, createScaInformation.exemption) &&
        Objects.equals(this.scaOnApproval, createScaInformation.scaOnApproval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exemption, scaOnApproval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateScaInformation {\n");
    sb.append("    exemption: ").append(toIndentedString(exemption)).append("\n");
    sb.append("    scaOnApproval: ").append(toIndentedString(scaOnApproval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of CreateScaInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateScaInformation
   * @throws JsonProcessingException if the JSON string is invalid with respect to CreateScaInformation
   */
  public static CreateScaInformation fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, CreateScaInformation.class);
  }
/**
  * Convert an instance of CreateScaInformation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
