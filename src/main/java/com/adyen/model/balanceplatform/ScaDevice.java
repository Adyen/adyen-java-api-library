/*
 * Configuration API
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.balanceplatform;

import java.util.*;
import java.util.logging.Logger;
import com.adyen.model.balanceplatform.ScaDeviceType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * A resource that contains information about a device, including its unique ID, name, and type.
 */
@JsonPropertyOrder({
  ScaDevice.JSON_PROPERTY_ID,
  ScaDevice.JSON_PROPERTY_NAME,
  ScaDevice.JSON_PROPERTY_TYPE
})

public class ScaDevice {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TYPE = "type";
  private ScaDeviceType type;

  public ScaDevice() { 
  }

  /**
   * The unique identifier of the SCA device you are registering.
   *
   * @param id The unique identifier of the SCA device you are registering.
   * @return the current {@code ScaDevice} instance, allowing for method chaining
   */
  public ScaDevice id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the SCA device you are registering.
   * @return id The unique identifier of the SCA device you are registering.
   */
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }

  /**
   * The unique identifier of the SCA device you are registering.
   *
   * @param id The unique identifier of the SCA device you are registering.
   */
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }

  /**
   * The name of the SCA device that you are registering. You can use it to help your users identify the device.
   *
   * @param name The name of the SCA device that you are registering. You can use it to help your users identify the device.
   * @return the current {@code ScaDevice} instance, allowing for method chaining
   */
  public ScaDevice name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the SCA device that you are registering. You can use it to help your users identify the device.
   * @return name The name of the SCA device that you are registering. You can use it to help your users identify the device.
   */
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }

  /**
   * The name of the SCA device that you are registering. You can use it to help your users identify the device.
   *
   * @param name The name of the SCA device that you are registering. You can use it to help your users identify the device.
   */
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  /**
   * type
   *
   * @param type 
   * @return the current {@code ScaDevice} instance, allowing for method chaining
   */
  public ScaDevice type(ScaDeviceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type 
   */
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ScaDeviceType getType() {
    return type;
  }

  /**
   * type
   *
   * @param type 
   */
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(ScaDeviceType type) {
    this.type = type;
  }

  /**
   * Return true if this ScaDevice object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScaDevice scaDevice = (ScaDevice) o;
    return Objects.equals(this.id, scaDevice.id) &&
        Objects.equals(this.name, scaDevice.name) &&
        Objects.equals(this.type, scaDevice.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScaDevice {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of ScaDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScaDevice
   * @throws JsonProcessingException if the JSON string is invalid with respect to ScaDevice
   */
  public static ScaDevice fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, ScaDevice.class);
  }
/**
  * Convert an instance of ScaDevice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
