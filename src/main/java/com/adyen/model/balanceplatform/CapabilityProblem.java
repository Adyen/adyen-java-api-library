/*
 * Configuration API
 *
 * The version of the OpenAPI document: 2
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.balanceplatform;

import java.util.Objects;
import java.util.Arrays;
import com.adyen.model.balanceplatform.CapabilityProblemEntity;
import com.adyen.model.balanceplatform.VerificationError;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.adyen.model.balanceplatform.JSON;

/**
 * CapabilityProblem
 */

public class CapabilityProblem {
  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private CapabilityProblemEntity entity;

  public static final String SERIALIZED_NAME_VERIFICATION_ERRORS = "verificationErrors";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ERRORS)
  private List<VerificationError> verificationErrors = null;

  public CapabilityProblem() { 
  }

  public CapabilityProblem entity(CapabilityProblemEntity entity) {
    
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CapabilityProblemEntity getEntity() {
    return entity;
  }


  public void setEntity(CapabilityProblemEntity entity) {
    this.entity = entity;
  }


  public CapabilityProblem verificationErrors(List<VerificationError> verificationErrors) {
    
    this.verificationErrors = verificationErrors;
    return this;
  }

  public CapabilityProblem addVerificationErrorsItem(VerificationError verificationErrorsItem) {
    if (this.verificationErrors == null) {
      this.verificationErrors = new ArrayList<>();
    }
    this.verificationErrors.add(verificationErrorsItem);
    return this;
  }

   /**
   * Contains information about the verification error.
   * @return verificationErrors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contains information about the verification error.")

  public List<VerificationError> getVerificationErrors() {
    return verificationErrors;
  }


  public void setVerificationErrors(List<VerificationError> verificationErrors) {
    this.verificationErrors = verificationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapabilityProblem capabilityProblem = (CapabilityProblem) o;
    return Objects.equals(this.entity, capabilityProblem.entity) &&
        Objects.equals(this.verificationErrors, capabilityProblem.verificationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entity, verificationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapabilityProblem {\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    verificationErrors: ").append(toIndentedString(verificationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity");
    openapiFields.add("verificationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CapabilityProblem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CapabilityProblem.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CapabilityProblem is not found in the empty JSON string", CapabilityProblem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CapabilityProblem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CapabilityProblem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `entity`
      if (jsonObj.getAsJsonObject("entity") != null) {
        CapabilityProblemEntity.validateJsonObject(jsonObj.getAsJsonObject("entity"));
      }
      JsonArray jsonArrayverificationErrors = jsonObj.getAsJsonArray("verificationErrors");
      if (jsonArrayverificationErrors != null) {
        // ensure the json data is an array
        if (!jsonObj.get("verificationErrors").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `verificationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("verificationErrors").toString()));
        }

        // validate the optional field `verificationErrors` (array)
        for (int i = 0; i < jsonArrayverificationErrors.size(); i++) {
          VerificationError.validateJsonObject(jsonArrayverificationErrors.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CapabilityProblem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CapabilityProblem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CapabilityProblem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CapabilityProblem.class));

       return (TypeAdapter<T>) new TypeAdapter<CapabilityProblem>() {
           @Override
           public void write(JsonWriter out, CapabilityProblem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CapabilityProblem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CapabilityProblem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CapabilityProblem
  * @throws IOException if the JSON string is invalid with respect to CapabilityProblem
  */
  public static CapabilityProblem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CapabilityProblem.class);
  }

 /**
  * Convert an instance of CapabilityProblem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

