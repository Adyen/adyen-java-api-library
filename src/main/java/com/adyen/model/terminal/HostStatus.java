/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminal;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Indicate the reachability of the host by the POI Terminal. State of a Host.
 */
@ApiModel(description = "Indicate the reachability of the host by the POI Terminal. State of a Host.")
@JsonPropertyOrder({
  HostStatus.JSON_PROPERTY_ACQUIRER_I_D,
  HostStatus.JSON_PROPERTY_IS_REACHABLE_FLAG
})

public class HostStatus {
  public static final String JSON_PROPERTY_ACQUIRER_I_D = "AcquirerID";
  private Integer acquirerID;

  public static final String JSON_PROPERTY_IS_REACHABLE_FLAG = "IsReachableFlag";
  private Boolean isReachableFlag = true;

  public HostStatus() { 
  }

  public HostStatus acquirerID(Integer acquirerID) {
    this.acquirerID = acquirerID;
    return this;
  }

   /**
   * Identification of the Acquirer.
   * @return acquirerID
  **/
  @ApiModelProperty(required = true, value = "Identification of the Acquirer.")
  @JsonProperty(JSON_PROPERTY_ACQUIRER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAcquirerID() {
    return acquirerID;
  }


 /**
  * Identification of the Acquirer.
  *
  * @param acquirerID
  */ 
  @JsonProperty(JSON_PROPERTY_ACQUIRER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcquirerID(Integer acquirerID) {
    this.acquirerID = acquirerID;
  }


  public HostStatus isReachableFlag(Boolean isReachableFlag) {
    this.isReachableFlag = isReachableFlag;
    return this;
  }

   /**
   * Indicate if a Host is reachable.
   * @return isReachableFlag
  **/
  @ApiModelProperty(value = "Indicate if a Host is reachable.")
  @JsonProperty(JSON_PROPERTY_IS_REACHABLE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsReachableFlag() {
    return isReachableFlag;
  }


 /**
  * Indicate if a Host is reachable.
  *
  * @param isReachableFlag
  */ 
  @JsonProperty(JSON_PROPERTY_IS_REACHABLE_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsReachableFlag(Boolean isReachableFlag) {
    this.isReachableFlag = isReachableFlag;
  }


  /**
   * Return true if this HostStatus object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostStatus hostStatus = (HostStatus) o;
    return Objects.equals(this.acquirerID, hostStatus.acquirerID) &&
        Objects.equals(this.isReachableFlag, hostStatus.isReachableFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerID, isReachableFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostStatus {\n");
    sb.append("    acquirerID: ").append(toIndentedString(acquirerID)).append("\n");
    sb.append("    isReachableFlag: ").append(toIndentedString(isReachableFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of HostStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HostStatus
   * @throws JsonProcessingException if the JSON string is invalid with respect to HostStatus
   */
  public static HostStatus fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, HostStatus.class);
  }
/**
  * Convert an instance of HostStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}

