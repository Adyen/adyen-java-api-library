/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminal;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.adyen.model.terminal.ConvertedAmount;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt). Information related to a currency conversion.
 */
@ApiModel(description = "A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt). Information related to a currency conversion.")
@JsonPropertyOrder({
  CurrencyConversion.JSON_PROPERTY_CUSTOMER_APPROVED_FLAG,
  CurrencyConversion.JSON_PROPERTY_CONVERTED_AMOUNT,
  CurrencyConversion.JSON_PROPERTY_RATE,
  CurrencyConversion.JSON_PROPERTY_MARKUP,
  CurrencyConversion.JSON_PROPERTY_COMMISSION,
  CurrencyConversion.JSON_PROPERTY_DECLARATION
})

public class CurrencyConversion {
  public static final String JSON_PROPERTY_CUSTOMER_APPROVED_FLAG = "CustomerApprovedFlag";
  private Boolean customerApprovedFlag = true;

  public static final String JSON_PROPERTY_CONVERTED_AMOUNT = "ConvertedAmount";
  private ConvertedAmount convertedAmount;

  public static final String JSON_PROPERTY_RATE = "Rate";
  private String rate;

  public static final String JSON_PROPERTY_MARKUP = "Markup";
  private String markup;

  public static final String JSON_PROPERTY_COMMISSION = "Commission";
  private BigDecimal commission;

  public static final String JSON_PROPERTY_DECLARATION = "Declaration";
  private String declaration;

  public CurrencyConversion() { 
  }

  public CurrencyConversion customerApprovedFlag(Boolean customerApprovedFlag) {
    this.customerApprovedFlag = customerApprovedFlag;
    return this;
  }

   /**
   * Notify if the customer has approved something. Indicates if the customer has accepted a currency conversion.
   * @return customerApprovedFlag
  **/
  @ApiModelProperty(value = "Notify if the customer has approved something. Indicates if the customer has accepted a currency conversion.")
  @JsonProperty(JSON_PROPERTY_CUSTOMER_APPROVED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCustomerApprovedFlag() {
    return customerApprovedFlag;
  }


 /**
  * Notify if the customer has approved something. Indicates if the customer has accepted a currency conversion.
  *
  * @param customerApprovedFlag
  */ 
  @JsonProperty(JSON_PROPERTY_CUSTOMER_APPROVED_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomerApprovedFlag(Boolean customerApprovedFlag) {
    this.customerApprovedFlag = customerApprovedFlag;
  }


  public CurrencyConversion convertedAmount(ConvertedAmount convertedAmount) {
    this.convertedAmount = convertedAmount;
    return this;
  }

   /**
   * Get convertedAmount
   * @return convertedAmount
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONVERTED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConvertedAmount getConvertedAmount() {
    return convertedAmount;
  }


 /**
  * convertedAmount
  *
  * @param convertedAmount
  */ 
  @JsonProperty(JSON_PROPERTY_CONVERTED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConvertedAmount(ConvertedAmount convertedAmount) {
    this.convertedAmount = convertedAmount;
  }


  public CurrencyConversion rate(String rate) {
    this.rate = rate;
    return this;
  }

   /**
   * Rate of currency conversion.
   * @return rate
  **/
  @ApiModelProperty(value = "Rate of currency conversion.")
  @JsonProperty(JSON_PROPERTY_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRate() {
    return rate;
  }


 /**
  * Rate of currency conversion.
  *
  * @param rate
  */ 
  @JsonProperty(JSON_PROPERTY_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRate(String rate) {
    this.rate = rate;
  }


  public CurrencyConversion markup(String markup) {
    this.markup = markup;
    return this;
  }

   /**
   * Markup of a currency conversion amount as a percentage.
   * @return markup
  **/
  @ApiModelProperty(value = "Markup of a currency conversion amount as a percentage.")
  @JsonProperty(JSON_PROPERTY_MARKUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMarkup() {
    return markup;
  }


 /**
  * Markup of a currency conversion amount as a percentage.
  *
  * @param markup
  */ 
  @JsonProperty(JSON_PROPERTY_MARKUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarkup(String markup) {
    this.markup = markup;
  }


  public CurrencyConversion commission(BigDecimal commission) {
    this.commission = commission;
    return this;
  }

   /**
   * Commission for a currency conversion.
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return commission
  **/
  @ApiModelProperty(value = "Commission for a currency conversion.")
  @JsonProperty(JSON_PROPERTY_COMMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCommission() {
    return commission;
  }


 /**
  * Commission for a currency conversion.
  *
  * @param commission
  */ 
  @JsonProperty(JSON_PROPERTY_COMMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommission(BigDecimal commission) {
    this.commission = commission;
  }


  public CurrencyConversion declaration(String declaration) {
    this.declaration = declaration;
    return this;
  }

   /**
   * If a declaration has to be presented to the customer.
   * @return declaration
  **/
  @ApiModelProperty(value = "If a declaration has to be presented to the customer.")
  @JsonProperty(JSON_PROPERTY_DECLARATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDeclaration() {
    return declaration;
  }


 /**
  * If a declaration has to be presented to the customer.
  *
  * @param declaration
  */ 
  @JsonProperty(JSON_PROPERTY_DECLARATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeclaration(String declaration) {
    this.declaration = declaration;
  }


  /**
   * Return true if this CurrencyConversion object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyConversion currencyConversion = (CurrencyConversion) o;
    return Objects.equals(this.customerApprovedFlag, currencyConversion.customerApprovedFlag) &&
        Objects.equals(this.convertedAmount, currencyConversion.convertedAmount) &&
        Objects.equals(this.rate, currencyConversion.rate) &&
        Objects.equals(this.markup, currencyConversion.markup) &&
        Objects.equals(this.commission, currencyConversion.commission) &&
        Objects.equals(this.declaration, currencyConversion.declaration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerApprovedFlag, convertedAmount, rate, markup, commission, declaration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyConversion {\n");
    sb.append("    customerApprovedFlag: ").append(toIndentedString(customerApprovedFlag)).append("\n");
    sb.append("    convertedAmount: ").append(toIndentedString(convertedAmount)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    markup: ").append(toIndentedString(markup)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    declaration: ").append(toIndentedString(declaration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of CurrencyConversion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrencyConversion
   * @throws JsonProcessingException if the JSON string is invalid with respect to CurrencyConversion
   */
  public static CurrencyConversion fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, CurrencyConversion.class);
  }
/**
  * Convert an instance of CurrencyConversion to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}

