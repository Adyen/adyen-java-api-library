/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminal;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.adyen.model.terminal.CoinsOrBills;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Indicate the status and the remaining coins and bill in a cash handling device. Status of cash handling device.
 */
@ApiModel(description = "Indicate the status and the remaining coins and bill in a cash handling device. Status of cash handling device.")
@JsonPropertyOrder({
  CashHandlingDevice.JSON_PROPERTY_CASH_HANDLING_O_K_FLAG,
  CashHandlingDevice.JSON_PROPERTY_CURRENCY,
  CashHandlingDevice.JSON_PROPERTY_COINS_OR_BILLS
})

public class CashHandlingDevice {
  public static final String JSON_PROPERTY_CASH_HANDLING_O_K_FLAG = "CashHandlingOKFlag";
  private Boolean cashHandlingOKFlag;

  public static final String JSON_PROPERTY_CURRENCY = "Currency";
  private String currency;

  public static final String JSON_PROPERTY_COINS_OR_BILLS = "CoinsOrBills";
  private List<CoinsOrBills> coinsOrBills = new ArrayList<>();

  public CashHandlingDevice() { 
  }

  public CashHandlingDevice cashHandlingOKFlag(Boolean cashHandlingOKFlag) {
    this.cashHandlingOKFlag = cashHandlingOKFlag;
    return this;
  }

   /**
   * Indicates if the cash handling device is working and usable.
   * @return cashHandlingOKFlag
  **/
  @ApiModelProperty(required = true, value = "Indicates if the cash handling device is working and usable.")
  @JsonProperty(JSON_PROPERTY_CASH_HANDLING_O_K_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCashHandlingOKFlag() {
    return cashHandlingOKFlag;
  }


 /**
  * Indicates if the cash handling device is working and usable.
  *
  * @param cashHandlingOKFlag
  */ 
  @JsonProperty(JSON_PROPERTY_CASH_HANDLING_O_K_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCashHandlingOKFlag(Boolean cashHandlingOKFlag) {
    this.cashHandlingOKFlag = cashHandlingOKFlag;
  }


  public CashHandlingDevice currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Currency of a monetary amount.
   * @return currency
  **/
  @ApiModelProperty(required = true, value = "Currency of a monetary amount.")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


 /**
  * Currency of a monetary amount.
  *
  * @param currency
  */ 
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public CashHandlingDevice coinsOrBills(List<CoinsOrBills> coinsOrBills) {
    this.coinsOrBills = coinsOrBills;
    return this;
  }

  public CashHandlingDevice addCoinsOrBillsItem(CoinsOrBills coinsOrBillsItem) {
    this.coinsOrBills.add(coinsOrBillsItem);
    return this;
  }

   /**
   * Get coinsOrBills
   * @return coinsOrBills
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_COINS_OR_BILLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CoinsOrBills> getCoinsOrBills() {
    return coinsOrBills;
  }


 /**
  * coinsOrBills
  *
  * @param coinsOrBills
  */ 
  @JsonProperty(JSON_PROPERTY_COINS_OR_BILLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCoinsOrBills(List<CoinsOrBills> coinsOrBills) {
    this.coinsOrBills = coinsOrBills;
  }


  /**
   * Return true if this CashHandlingDevice object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashHandlingDevice cashHandlingDevice = (CashHandlingDevice) o;
    return Objects.equals(this.cashHandlingOKFlag, cashHandlingDevice.cashHandlingOKFlag) &&
        Objects.equals(this.currency, cashHandlingDevice.currency) &&
        Objects.equals(this.coinsOrBills, cashHandlingDevice.coinsOrBills);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashHandlingOKFlag, currency, coinsOrBills);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashHandlingDevice {\n");
    sb.append("    cashHandlingOKFlag: ").append(toIndentedString(cashHandlingOKFlag)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    coinsOrBills: ").append(toIndentedString(coinsOrBills)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of CashHandlingDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CashHandlingDevice
   * @throws JsonProcessingException if the JSON string is invalid with respect to CashHandlingDevice
   */
  public static CashHandlingDevice fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, CashHandlingDevice.class);
  }
/**
  * Convert an instance of CashHandlingDevice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}

