/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminal;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.adyen.model.terminal.TransactionType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Totals of the loyalty transaction during the reconciliation period.
 */
@ApiModel(description = "Totals of the loyalty transaction during the reconciliation period.")
@JsonPropertyOrder({
  LoyaltyTotals.JSON_PROPERTY_TRANSACTION_TYPE,
  LoyaltyTotals.JSON_PROPERTY_TRANSACTION_COUNT,
  LoyaltyTotals.JSON_PROPERTY_TRANSACTION_AMOUNT
})

public class LoyaltyTotals {
  public static final String JSON_PROPERTY_TRANSACTION_TYPE = "TransactionType";
  private TransactionType transactionType;

  public static final String JSON_PROPERTY_TRANSACTION_COUNT = "TransactionCount";
  private Integer transactionCount;

  public static final String JSON_PROPERTY_TRANSACTION_AMOUNT = "TransactionAmount";
  private BigDecimal transactionAmount;

  public LoyaltyTotals() { 
  }

  public LoyaltyTotals transactionType(TransactionType transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionType getTransactionType() {
    return transactionType;
  }


 /**
  * transactionType
  *
  * @param transactionType
  */ 
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionType(TransactionType transactionType) {
    this.transactionType = transactionType;
  }


  public LoyaltyTotals transactionCount(Integer transactionCount) {
    this.transactionCount = transactionCount;
    return this;
  }

   /**
   * Number of processed transaction during the period.
   * @return transactionCount
  **/
  @ApiModelProperty(required = true, value = "Number of processed transaction during the period.")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTransactionCount() {
    return transactionCount;
  }


 /**
  * Number of processed transaction during the period.
  *
  * @param transactionCount
  */ 
  @JsonProperty(JSON_PROPERTY_TRANSACTION_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionCount(Integer transactionCount) {
    this.transactionCount = transactionCount;
  }


  public LoyaltyTotals transactionAmount(BigDecimal transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Sum of amount of processed transaction during the period.
   * minimum: 0.0
   * maximum: 99999999.999999
   * @return transactionAmount
  **/
  @ApiModelProperty(required = true, value = "Sum of amount of processed transaction during the period.")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTransactionAmount() {
    return transactionAmount;
  }


 /**
  * Sum of amount of processed transaction during the period.
  *
  * @param transactionAmount
  */ 
  @JsonProperty(JSON_PROPERTY_TRANSACTION_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionAmount(BigDecimal transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  /**
   * Return true if this LoyaltyTotals object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyTotals loyaltyTotals = (LoyaltyTotals) o;
    return Objects.equals(this.transactionType, loyaltyTotals.transactionType) &&
        Objects.equals(this.transactionCount, loyaltyTotals.transactionCount) &&
        Objects.equals(this.transactionAmount, loyaltyTotals.transactionAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionType, transactionCount, transactionAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyTotals {\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    transactionCount: ").append(toIndentedString(transactionCount)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of LoyaltyTotals given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyTotals
   * @throws JsonProcessingException if the JSON string is invalid with respect to LoyaltyTotals
   */
  public static LoyaltyTotals fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, LoyaltyTotals.class);
  }
/**
  * Convert an instance of LoyaltyTotals to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}

