/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminal;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.adyen.model.terminal.IdentificationType;
import com.adyen.model.terminal.StoredValueAccountType;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * It contains the identifications of the stored value account or the stored value card, and the associated product sold by the Sale System for stored value requests. Identification of the stored value account or the stored value card.
 */
@ApiModel(description = "It contains the identifications of the stored value account or the stored value card, and the associated product sold by the Sale System for stored value requests. Identification of the stored value account or the stored value card.")
@JsonPropertyOrder({
  StoredValueAccountID.JSON_PROPERTY_STORED_VALUE_ACCOUNT_TYPE,
  StoredValueAccountID.JSON_PROPERTY_STORED_VALUE_PROVIDER,
  StoredValueAccountID.JSON_PROPERTY_OWNER_NAME,
  StoredValueAccountID.JSON_PROPERTY_EXPIRY_DATE,
  StoredValueAccountID.JSON_PROPERTY_ENTRY_MODE,
  StoredValueAccountID.JSON_PROPERTY_IDENTIFICATION_TYPE,
  StoredValueAccountID.JSON_PROPERTY_STORED_VALUE_I_D
})

public class StoredValueAccountID {
  public static final String JSON_PROPERTY_STORED_VALUE_ACCOUNT_TYPE = "StoredValueAccountType";
  private StoredValueAccountType storedValueAccountType;

  public static final String JSON_PROPERTY_STORED_VALUE_PROVIDER = "StoredValueProvider";
  private String storedValueProvider;

  public static final String JSON_PROPERTY_OWNER_NAME = "OwnerName";
  private String ownerName;

  public static final String JSON_PROPERTY_EXPIRY_DATE = "ExpiryDate";
  private Integer expiryDate;

  /**
   * Gets or Sets entryMode
   */
  public enum EntryModeEnum {
    CONTACTLESS("Contactless"),
    
    FILE("File"),
    
    ICC("ICC"),
    
    KEYED("Keyed"),
    
    MAGSTRIPE("MagStripe"),
    
    MANUAL("Manual"),
    
    MOBILE("Mobile"),
    
    RFID("RFID"),
    
    SCANNED("Scanned"),
    
    SYNCHRONOUSICC("SynchronousICC"),
    
    TAPPED("Tapped");

    private String value;

    EntryModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntryModeEnum fromValue(String value) {
      for (EntryModeEnum b : EntryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTRY_MODE = "EntryMode";
  private List<EntryModeEnum> entryMode = new ArrayList<>();

  public static final String JSON_PROPERTY_IDENTIFICATION_TYPE = "IdentificationType";
  private IdentificationType identificationType;

  public static final String JSON_PROPERTY_STORED_VALUE_I_D = "StoredValueID";
  private String storedValueID;

  public StoredValueAccountID() { 
  }

  public StoredValueAccountID storedValueAccountType(StoredValueAccountType storedValueAccountType) {
    this.storedValueAccountType = storedValueAccountType;
    return this;
  }

   /**
   * Get storedValueAccountType
   * @return storedValueAccountType
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StoredValueAccountType getStoredValueAccountType() {
    return storedValueAccountType;
  }


 /**
  * storedValueAccountType
  *
  * @param storedValueAccountType
  */ 
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoredValueAccountType(StoredValueAccountType storedValueAccountType) {
    this.storedValueAccountType = storedValueAccountType;
  }


  public StoredValueAccountID storedValueProvider(String storedValueProvider) {
    this.storedValueProvider = storedValueProvider;
    return this;
  }

   /**
   * Get storedValueProvider
   * @return storedValueProvider
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStoredValueProvider() {
    return storedValueProvider;
  }


 /**
  * storedValueProvider
  *
  * @param storedValueProvider
  */ 
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoredValueProvider(String storedValueProvider) {
    this.storedValueProvider = storedValueProvider;
  }


  public StoredValueAccountID ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

   /**
   * Get ownerName
   * @return ownerName
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OWNER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOwnerName() {
    return ownerName;
  }


 /**
  * ownerName
  *
  * @param ownerName
  */ 
  @JsonProperty(JSON_PROPERTY_OWNER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  public StoredValueAccountID expiryDate(Integer expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Get expiryDate
   * minimum: 4
   * maximum: 4
   * @return expiryDate
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_EXPIRY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExpiryDate() {
    return expiryDate;
  }


 /**
  * expiryDate
  *
  * @param expiryDate
  */ 
  @JsonProperty(JSON_PROPERTY_EXPIRY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiryDate(Integer expiryDate) {
    this.expiryDate = expiryDate;
  }


  public StoredValueAccountID entryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
    return this;
  }

  public StoredValueAccountID addEntryModeItem(EntryModeEnum entryModeItem) {
    this.entryMode.add(entryModeItem);
    return this;
  }

   /**
   * Get entryMode
   * @return entryMode
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ENTRY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<EntryModeEnum> getEntryMode() {
    return entryMode;
  }


 /**
  * entryMode
  *
  * @param entryMode
  */ 
  @JsonProperty(JSON_PROPERTY_ENTRY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
  }


  public StoredValueAccountID identificationType(IdentificationType identificationType) {
    this.identificationType = identificationType;
    return this;
  }

   /**
   * Get identificationType
   * @return identificationType
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_IDENTIFICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IdentificationType getIdentificationType() {
    return identificationType;
  }


 /**
  * identificationType
  *
  * @param identificationType
  */ 
  @JsonProperty(JSON_PROPERTY_IDENTIFICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdentificationType(IdentificationType identificationType) {
    this.identificationType = identificationType;
  }


  public StoredValueAccountID storedValueID(String storedValueID) {
    this.storedValueID = storedValueID;
    return this;
  }

   /**
   * Get storedValueID
   * @return storedValueID
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStoredValueID() {
    return storedValueID;
  }


 /**
  * storedValueID
  *
  * @param storedValueID
  */ 
  @JsonProperty(JSON_PROPERTY_STORED_VALUE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoredValueID(String storedValueID) {
    this.storedValueID = storedValueID;
  }


  /**
   * Return true if this StoredValueAccountID object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoredValueAccountID storedValueAccountID = (StoredValueAccountID) o;
    return Objects.equals(this.storedValueAccountType, storedValueAccountID.storedValueAccountType) &&
        Objects.equals(this.storedValueProvider, storedValueAccountID.storedValueProvider) &&
        Objects.equals(this.ownerName, storedValueAccountID.ownerName) &&
        Objects.equals(this.expiryDate, storedValueAccountID.expiryDate) &&
        Objects.equals(this.entryMode, storedValueAccountID.entryMode) &&
        Objects.equals(this.identificationType, storedValueAccountID.identificationType) &&
        Objects.equals(this.storedValueID, storedValueAccountID.storedValueID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storedValueAccountType, storedValueProvider, ownerName, expiryDate, entryMode, identificationType, storedValueID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoredValueAccountID {\n");
    sb.append("    storedValueAccountType: ").append(toIndentedString(storedValueAccountType)).append("\n");
    sb.append("    storedValueProvider: ").append(toIndentedString(storedValueProvider)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    entryMode: ").append(toIndentedString(entryMode)).append("\n");
    sb.append("    identificationType: ").append(toIndentedString(identificationType)).append("\n");
    sb.append("    storedValueID: ").append(toIndentedString(storedValueID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of StoredValueAccountID given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoredValueAccountID
   * @throws JsonProcessingException if the JSON string is invalid with respect to StoredValueAccountID
   */
  public static StoredValueAccountID fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, StoredValueAccountID.class);
  }
/**
  * Convert an instance of StoredValueAccountID to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}

