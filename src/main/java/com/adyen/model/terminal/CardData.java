/*
 * Adyen Terminal API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.terminal;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.adyen.model.terminal.AllowedProduct;
import com.adyen.model.terminal.CustomerOrder;
import com.adyen.model.terminal.PaymentToken;
import com.adyen.model.terminal.SensitiveCardData;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Allows acquisition of the card data by the Sale System before the Payment, CardAcquisition  or BalanceInquiry request to the POI. It could also be sent in the CardAcquisition response, to be processed by the Sale System. Information related to the payment card used for the transaction.
 */
@ApiModel(description = "Allows acquisition of the card data by the Sale System before the Payment, CardAcquisition  or BalanceInquiry request to the POI. It could also be sent in the CardAcquisition response, to be processed by the Sale System. Information related to the payment card used for the transaction.")
@JsonPropertyOrder({
  CardData.JSON_PROPERTY_PAYMENT_BRAND,
  CardData.JSON_PROPERTY_MASKED_PAN,
  CardData.JSON_PROPERTY_PAYMENT_ACCOUNT_REF,
  CardData.JSON_PROPERTY_ENTRY_MODE,
  CardData.JSON_PROPERTY_CARD_COUNTRY_CODE,
  CardData.JSON_PROPERTY_PROTECTED_CARD_DATA,
  CardData.JSON_PROPERTY_SENSITIVE_CARD_DATA,
  CardData.JSON_PROPERTY_ALLOWED_PRODUCT_CODE,
  CardData.JSON_PROPERTY_ALLOWED_PRODUCT,
  CardData.JSON_PROPERTY_PAYMENT_TOKEN,
  CardData.JSON_PROPERTY_CUSTOMER_ORDER
})

public class CardData {
  public static final String JSON_PROPERTY_PAYMENT_BRAND = "PaymentBrand";
  private String paymentBrand;

  public static final String JSON_PROPERTY_MASKED_PAN = "MaskedPan";
  private String maskedPan;

  public static final String JSON_PROPERTY_PAYMENT_ACCOUNT_REF = "PaymentAccountRef";
  private String paymentAccountRef;

  /**
   * Gets or Sets entryMode
   */
  public enum EntryModeEnum {
    CONTACTLESS("Contactless"),
    
    FILE("File"),
    
    ICC("ICC"),
    
    KEYED("Keyed"),
    
    MAGSTRIPE("MagStripe"),
    
    MANUAL("Manual"),
    
    MOBILE("Mobile"),
    
    RFID("RFID"),
    
    SCANNED("Scanned"),
    
    SYNCHRONOUSICC("SynchronousICC"),
    
    TAPPED("Tapped");

    private String value;

    EntryModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntryModeEnum fromValue(String value) {
      for (EntryModeEnum b : EntryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTRY_MODE = "EntryMode";
  private List<EntryModeEnum> entryMode = null;

  public static final String JSON_PROPERTY_CARD_COUNTRY_CODE = "CardCountryCode";
  private Integer cardCountryCode;

  public static final String JSON_PROPERTY_PROTECTED_CARD_DATA = "ProtectedCardData";
  private String protectedCardData;

  public static final String JSON_PROPERTY_SENSITIVE_CARD_DATA = "SensitiveCardData";
  private SensitiveCardData sensitiveCardData;

  public static final String JSON_PROPERTY_ALLOWED_PRODUCT_CODE = "AllowedProductCode";
  private List<Integer> allowedProductCode = null;

  public static final String JSON_PROPERTY_ALLOWED_PRODUCT = "AllowedProduct";
  private List<AllowedProduct> allowedProduct = null;

  public static final String JSON_PROPERTY_PAYMENT_TOKEN = "PaymentToken";
  private PaymentToken paymentToken;

  public static final String JSON_PROPERTY_CUSTOMER_ORDER = "CustomerOrder";
  private List<CustomerOrder> customerOrder = null;

  public CardData() { 
  }

  public CardData paymentBrand(String paymentBrand) {
    this.paymentBrand = paymentBrand;
    return this;
  }

   /**
   * If card PAN is readable .
   * @return paymentBrand
  **/
  @ApiModelProperty(value = "If card PAN is readable .")
  @JsonProperty(JSON_PROPERTY_PAYMENT_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentBrand() {
    return paymentBrand;
  }


 /**
  * If card PAN is readable .
  *
  * @param paymentBrand
  */ 
  @JsonProperty(JSON_PROPERTY_PAYMENT_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentBrand(String paymentBrand) {
    this.paymentBrand = paymentBrand;
  }


  public CardData maskedPan(String maskedPan) {
    this.maskedPan = maskedPan;
    return this;
  }

   /**
   * Get maskedPan
   * @return maskedPan
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MASKED_PAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMaskedPan() {
    return maskedPan;
  }


 /**
  * maskedPan
  *
  * @param maskedPan
  */ 
  @JsonProperty(JSON_PROPERTY_MASKED_PAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaskedPan(String maskedPan) {
    this.maskedPan = maskedPan;
  }


  public CardData paymentAccountRef(String paymentAccountRef) {
    this.paymentAccountRef = paymentAccountRef;
    return this;
  }

   /**
   * Get paymentAccountRef
   * @return paymentAccountRef
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PAYMENT_ACCOUNT_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentAccountRef() {
    return paymentAccountRef;
  }


 /**
  * paymentAccountRef
  *
  * @param paymentAccountRef
  */ 
  @JsonProperty(JSON_PROPERTY_PAYMENT_ACCOUNT_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentAccountRef(String paymentAccountRef) {
    this.paymentAccountRef = paymentAccountRef;
  }


  public CardData entryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
    return this;
  }

  public CardData addEntryModeItem(EntryModeEnum entryModeItem) {
    if (this.entryMode == null) {
      this.entryMode = new ArrayList<>();
    }
    this.entryMode.add(entryModeItem);
    return this;
  }

   /**
   * Get entryMode
   * @return entryMode
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ENTRY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<EntryModeEnum> getEntryMode() {
    return entryMode;
  }


 /**
  * entryMode
  *
  * @param entryMode
  */ 
  @JsonProperty(JSON_PROPERTY_ENTRY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
  }


  public CardData cardCountryCode(Integer cardCountryCode) {
    this.cardCountryCode = cardCountryCode;
    return this;
  }

   /**
   * If available in the card.
   * minimum: 3
   * maximum: 3
   * @return cardCountryCode
  **/
  @ApiModelProperty(value = "If available in the card.")
  @JsonProperty(JSON_PROPERTY_CARD_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCardCountryCode() {
    return cardCountryCode;
  }


 /**
  * If available in the card.
  *
  * @param cardCountryCode
  */ 
  @JsonProperty(JSON_PROPERTY_CARD_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardCountryCode(Integer cardCountryCode) {
    this.cardCountryCode = cardCountryCode;
  }


  public CardData protectedCardData(String protectedCardData) {
    this.protectedCardData = protectedCardData;
    return this;
  }

   /**
   * SensitiveCardData protected by CMS EnvelopedData.
   * @return protectedCardData
  **/
  @ApiModelProperty(value = "SensitiveCardData protected by CMS EnvelopedData.")
  @JsonProperty(JSON_PROPERTY_PROTECTED_CARD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProtectedCardData() {
    return protectedCardData;
  }


 /**
  * SensitiveCardData protected by CMS EnvelopedData.
  *
  * @param protectedCardData
  */ 
  @JsonProperty(JSON_PROPERTY_PROTECTED_CARD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtectedCardData(String protectedCardData) {
    this.protectedCardData = protectedCardData;
  }


  public CardData sensitiveCardData(SensitiveCardData sensitiveCardData) {
    this.sensitiveCardData = sensitiveCardData;
    return this;
  }

   /**
   * Get sensitiveCardData
   * @return sensitiveCardData
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SENSITIVE_CARD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SensitiveCardData getSensitiveCardData() {
    return sensitiveCardData;
  }


 /**
  * sensitiveCardData
  *
  * @param sensitiveCardData
  */ 
  @JsonProperty(JSON_PROPERTY_SENSITIVE_CARD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSensitiveCardData(SensitiveCardData sensitiveCardData) {
    this.sensitiveCardData = sensitiveCardData;
  }


  public CardData allowedProductCode(List<Integer> allowedProductCode) {
    this.allowedProductCode = allowedProductCode;
    return this;
  }

  public CardData addAllowedProductCodeItem(Integer allowedProductCodeItem) {
    if (this.allowedProductCode == null) {
      this.allowedProductCode = new ArrayList<>();
    }
    this.allowedProductCode.add(allowedProductCodeItem);
    return this;
  }

   /**
   * Get allowedProductCode
   * @return allowedProductCode
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ALLOWED_PRODUCT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getAllowedProductCode() {
    return allowedProductCode;
  }


 /**
  * allowedProductCode
  *
  * @param allowedProductCode
  */ 
  @JsonProperty(JSON_PROPERTY_ALLOWED_PRODUCT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedProductCode(List<Integer> allowedProductCode) {
    this.allowedProductCode = allowedProductCode;
  }


  public CardData allowedProduct(List<AllowedProduct> allowedProduct) {
    this.allowedProduct = allowedProduct;
    return this;
  }

  public CardData addAllowedProductItem(AllowedProduct allowedProductItem) {
    if (this.allowedProduct == null) {
      this.allowedProduct = new ArrayList<>();
    }
    this.allowedProduct.add(allowedProductItem);
    return this;
  }

   /**
   * Get allowedProduct
   * @return allowedProduct
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ALLOWED_PRODUCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<AllowedProduct> getAllowedProduct() {
    return allowedProduct;
  }


 /**
  * allowedProduct
  *
  * @param allowedProduct
  */ 
  @JsonProperty(JSON_PROPERTY_ALLOWED_PRODUCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedProduct(List<AllowedProduct> allowedProduct) {
    this.allowedProduct = allowedProduct;
  }


  public CardData paymentToken(PaymentToken paymentToken) {
    this.paymentToken = paymentToken;
    return this;
  }

   /**
   * Get paymentToken
   * @return paymentToken
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PAYMENT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaymentToken getPaymentToken() {
    return paymentToken;
  }


 /**
  * paymentToken
  *
  * @param paymentToken
  */ 
  @JsonProperty(JSON_PROPERTY_PAYMENT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentToken(PaymentToken paymentToken) {
    this.paymentToken = paymentToken;
  }


  public CardData customerOrder(List<CustomerOrder> customerOrder) {
    this.customerOrder = customerOrder;
    return this;
  }

  public CardData addCustomerOrderItem(CustomerOrder customerOrderItem) {
    if (this.customerOrder == null) {
      this.customerOrder = new ArrayList<>();
    }
    this.customerOrder.add(customerOrderItem);
    return this;
  }

   /**
   * Get customerOrder
   * @return customerOrder
  **/
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CustomerOrder> getCustomerOrder() {
    return customerOrder;
  }


 /**
  * customerOrder
  *
  * @param customerOrder
  */ 
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomerOrder(List<CustomerOrder> customerOrder) {
    this.customerOrder = customerOrder;
  }


  /**
   * Return true if this CardData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardData cardData = (CardData) o;
    return Objects.equals(this.paymentBrand, cardData.paymentBrand) &&
        Objects.equals(this.maskedPan, cardData.maskedPan) &&
        Objects.equals(this.paymentAccountRef, cardData.paymentAccountRef) &&
        Objects.equals(this.entryMode, cardData.entryMode) &&
        Objects.equals(this.cardCountryCode, cardData.cardCountryCode) &&
        Objects.equals(this.protectedCardData, cardData.protectedCardData) &&
        Objects.equals(this.sensitiveCardData, cardData.sensitiveCardData) &&
        Objects.equals(this.allowedProductCode, cardData.allowedProductCode) &&
        Objects.equals(this.allowedProduct, cardData.allowedProduct) &&
        Objects.equals(this.paymentToken, cardData.paymentToken) &&
        Objects.equals(this.customerOrder, cardData.customerOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentBrand, maskedPan, paymentAccountRef, entryMode, cardCountryCode, protectedCardData, sensitiveCardData, allowedProductCode, allowedProduct, paymentToken, customerOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardData {\n");
    sb.append("    paymentBrand: ").append(toIndentedString(paymentBrand)).append("\n");
    sb.append("    maskedPan: ").append(toIndentedString(maskedPan)).append("\n");
    sb.append("    paymentAccountRef: ").append(toIndentedString(paymentAccountRef)).append("\n");
    sb.append("    entryMode: ").append(toIndentedString(entryMode)).append("\n");
    sb.append("    cardCountryCode: ").append(toIndentedString(cardCountryCode)).append("\n");
    sb.append("    protectedCardData: ").append(toIndentedString(protectedCardData)).append("\n");
    sb.append("    sensitiveCardData: ").append(toIndentedString(sensitiveCardData)).append("\n");
    sb.append("    allowedProductCode: ").append(toIndentedString(allowedProductCode)).append("\n");
    sb.append("    allowedProduct: ").append(toIndentedString(allowedProduct)).append("\n");
    sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
    sb.append("    customerOrder: ").append(toIndentedString(customerOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of CardData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardData
   * @throws JsonProcessingException if the JSON string is invalid with respect to CardData
   */
  public static CardData fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, CardData.class);
  }
/**
  * Convert an instance of CardData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}

