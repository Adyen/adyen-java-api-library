/*
 * Legal Entity Management API
 *
 * The version of the OpenAPI document: 2
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.legalentitymanagement;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * BankAccountInfo
 */

public class BankAccountInfo {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_BANK_BIC_SWIFT = "bankBicSwift";
  @SerializedName(SERIALIZED_NAME_BANK_BIC_SWIFT)
  private String bankBicSwift;

  public static final String SERIALIZED_NAME_BANK_CITY = "bankCity";
  @SerializedName(SERIALIZED_NAME_BANK_CITY)
  private String bankCity;

  public static final String SERIALIZED_NAME_BANK_CODE = "bankCode";
  @SerializedName(SERIALIZED_NAME_BANK_CODE)
  private String bankCode;

  public static final String SERIALIZED_NAME_BANK_NAME = "bankName";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  public static final String SERIALIZED_NAME_BRANCH_CODE = "branchCode";
  @SerializedName(SERIALIZED_NAME_BRANCH_CODE)
  private String branchCode;

  public static final String SERIALIZED_NAME_CHECK_CODE = "checkCode";
  @SerializedName(SERIALIZED_NAME_CHECK_CODE)
  private String checkCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_IBAN = "iban";
  @SerializedName(SERIALIZED_NAME_IBAN)
  private String iban;

  public BankAccountInfo() { 
  }

  public BankAccountInfo accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * The bank account number (without separators).   When this is provided, the &#x60;branchCode&#x60; is also required.
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The bank account number (without separators).   When this is provided, the `branchCode` is also required.")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public BankAccountInfo accountType(String accountType) {
    
    this.accountType = accountType;
    return this;
  }

   /**
   * The type of bank account.
   * @return accountType
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of bank account.")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public BankAccountInfo bankBicSwift(String bankBicSwift) {
    
    this.bankBicSwift = bankBicSwift;
    return this;
  }

   /**
   * The bank&#39;s BIC or SWIFT code.
   * @return bankBicSwift
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The bank's BIC or SWIFT code.")

  public String getBankBicSwift() {
    return bankBicSwift;
  }


  public void setBankBicSwift(String bankBicSwift) {
    this.bankBicSwift = bankBicSwift;
  }


  public BankAccountInfo bankCity(String bankCity) {
    
    this.bankCity = bankCity;
    return this;
  }

   /**
   * The city where the bank is located.
   * @return bankCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The city where the bank is located.")

  public String getBankCity() {
    return bankCity;
  }


  public void setBankCity(String bankCity) {
    this.bankCity = bankCity;
  }


  public BankAccountInfo bankCode(String bankCode) {
    
    this.bankCode = bankCode;
    return this;
  }

   /**
   * The bank code of the banking institution with which the bank account is registered.
   * @return bankCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The bank code of the banking institution with which the bank account is registered.")

  public String getBankCode() {
    return bankCode;
  }


  public void setBankCode(String bankCode) {
    this.bankCode = bankCode;
  }


  public BankAccountInfo bankName(String bankName) {
    
    this.bankName = bankName;
    return this;
  }

   /**
   * The name of the banking institution where the bank account is held.
   * @return bankName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the banking institution where the bank account is held.")

  public String getBankName() {
    return bankName;
  }


  public void setBankName(String bankName) {
    this.bankName = bankName;
  }


  public BankAccountInfo branchCode(String branchCode) {
    
    this.branchCode = branchCode;
    return this;
  }

   /**
   * The branch code of the branch under which the bank account is registered.  Required when you provide an &#x60;accountNumber&#x60;.   In the following countries, this value corresponds to:   * United States: routing number * United Kingdom: sort code * Germany: Bankleitzahl
   * @return branchCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The branch code of the branch under which the bank account is registered.  Required when you provide an `accountNumber`.   In the following countries, this value corresponds to:   * United States: routing number * United Kingdom: sort code * Germany: Bankleitzahl")

  public String getBranchCode() {
    return branchCode;
  }


  public void setBranchCode(String branchCode) {
    this.branchCode = branchCode;
  }


  public BankAccountInfo checkCode(String checkCode) {
    
    this.checkCode = checkCode;
    return this;
  }

   /**
   * The check code of the bank account.
   * @return checkCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The check code of the bank account.")

  public String getCheckCode() {
    return checkCode;
  }


  public void setCheckCode(String checkCode) {
    this.checkCode = checkCode;
  }


  public BankAccountInfo countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.
   * @return countryCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public BankAccountInfo currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The account&#39;s three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**.
   * @return currencyCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The account's three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**.")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public BankAccountInfo iban(String iban) {
    
    this.iban = iban;
    return this;
  }

   /**
   * The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
   * @return iban
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.")

  public String getIban() {
    return iban;
  }


  public void setIban(String iban) {
    this.iban = iban;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankAccountInfo bankAccountInfo = (BankAccountInfo) o;
    return Objects.equals(this.accountNumber, bankAccountInfo.accountNumber) &&
        Objects.equals(this.accountType, bankAccountInfo.accountType) &&
        Objects.equals(this.bankBicSwift, bankAccountInfo.bankBicSwift) &&
        Objects.equals(this.bankCity, bankAccountInfo.bankCity) &&
        Objects.equals(this.bankCode, bankAccountInfo.bankCode) &&
        Objects.equals(this.bankName, bankAccountInfo.bankName) &&
        Objects.equals(this.branchCode, bankAccountInfo.branchCode) &&
        Objects.equals(this.checkCode, bankAccountInfo.checkCode) &&
        Objects.equals(this.countryCode, bankAccountInfo.countryCode) &&
        Objects.equals(this.currencyCode, bankAccountInfo.currencyCode) &&
        Objects.equals(this.iban, bankAccountInfo.iban);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, accountType, bankBicSwift, bankCity, bankCode, bankName, branchCode, checkCode, countryCode, currencyCode, iban);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankAccountInfo {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    bankBicSwift: ").append(toIndentedString(bankBicSwift)).append("\n");
    sb.append("    bankCity: ").append(toIndentedString(bankCity)).append("\n");
    sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    branchCode: ").append(toIndentedString(branchCode)).append("\n");
    sb.append("    checkCode: ").append(toIndentedString(checkCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountNumber");
    openapiFields.add("accountType");
    openapiFields.add("bankBicSwift");
    openapiFields.add("bankCity");
    openapiFields.add("bankCode");
    openapiFields.add("bankName");
    openapiFields.add("branchCode");
    openapiFields.add("checkCode");
    openapiFields.add("countryCode");
    openapiFields.add("currencyCode");
    openapiFields.add("iban");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countryCode");
    openapiRequiredFields.add("currencyCode");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BankAccountInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (BankAccountInfo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankAccountInfo is not found in the empty JSON string", BankAccountInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BankAccountInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BankAccountInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BankAccountInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field accountNumber
      if (jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      // validate the optional field accountType
      if (jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      // validate the optional field bankBicSwift
      if (jsonObj.get("bankBicSwift") != null && !jsonObj.get("bankBicSwift").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankBicSwift` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankBicSwift").toString()));
      }
      // validate the optional field bankCity
      if (jsonObj.get("bankCity") != null && !jsonObj.get("bankCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCity").toString()));
      }
      // validate the optional field bankCode
      if (jsonObj.get("bankCode") != null && !jsonObj.get("bankCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCode").toString()));
      }
      // validate the optional field bankName
      if (jsonObj.get("bankName") != null && !jsonObj.get("bankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankName").toString()));
      }
      // validate the optional field branchCode
      if (jsonObj.get("branchCode") != null && !jsonObj.get("branchCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branchCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branchCode").toString()));
      }
      // validate the optional field checkCode
      if (jsonObj.get("checkCode") != null && !jsonObj.get("checkCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkCode").toString()));
      }
      // validate the optional field countryCode
      if (jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the optional field currencyCode
      if (jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the optional field iban
      if (jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iban").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankAccountInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankAccountInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankAccountInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankAccountInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BankAccountInfo>() {
           @Override
           public void write(JsonWriter out, BankAccountInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BankAccountInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BankAccountInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BankAccountInfo
  * @throws IOException if the JSON string is invalid with respect to BankAccountInfo
  */
  public static BankAccountInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankAccountInfo.class);
  }

 /**
  * Convert an instance of BankAccountInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

