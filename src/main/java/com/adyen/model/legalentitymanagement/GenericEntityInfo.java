/*
 * Legal Entity Management API
 *
 * The version of the OpenAPI document: 2
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.legalentitymanagement;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * GenericEntityInfo
 */

public class GenericEntityInfo {
  public static final String SERIALIZED_NAME_ENTITY_ASSOCIATIONS = "entityAssociations";
  @SerializedName(SERIALIZED_NAME_ENTITY_ASSOCIATIONS)
  private List<LegalEntityAssociation> entityAssociations = null;

  public static final String SERIALIZED_NAME_INDIVIDUAL = "individual";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL)
  private Individual individual;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private Organization organization;

  public static final String SERIALIZED_NAME_SOLE_PROPRIETORSHIP = "soleProprietorship";
  @SerializedName(SERIALIZED_NAME_SOLE_PROPRIETORSHIP)
  private SoleProprietorship soleProprietorship;

  public GenericEntityInfo() { 
  }

  public GenericEntityInfo entityAssociations(List<LegalEntityAssociation> entityAssociations) {
    
    this.entityAssociations = entityAssociations;
    return this;
  }

  public GenericEntityInfo addEntityAssociationsItem(LegalEntityAssociation entityAssociationsItem) {
    if (this.entityAssociations == null) {
      this.entityAssociations = new ArrayList<>();
    }
    this.entityAssociations.add(entityAssociationsItem);
    return this;
  }

   /**
   * List of legal entities associated with the current legal entity. For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
   * @return entityAssociations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of legal entities associated with the current legal entity. For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.")

  public List<LegalEntityAssociation> getEntityAssociations() {
    return entityAssociations;
  }


  public void setEntityAssociations(List<LegalEntityAssociation> entityAssociations) {
    this.entityAssociations = entityAssociations;
  }


  public GenericEntityInfo individual(Individual individual) {
    
    this.individual = individual;
    return this;
  }

   /**
   * Get individual
   * @return individual
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Individual getIndividual() {
    return individual;
  }


  public void setIndividual(Individual individual) {
    this.individual = individual;
  }


  public GenericEntityInfo organization(Organization organization) {
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Organization getOrganization() {
    return organization;
  }


  public void setOrganization(Organization organization) {
    this.organization = organization;
  }


  public GenericEntityInfo soleProprietorship(SoleProprietorship soleProprietorship) {
    
    this.soleProprietorship = soleProprietorship;
    return this;
  }

   /**
   * Get soleProprietorship
   * @return soleProprietorship
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SoleProprietorship getSoleProprietorship() {
    return soleProprietorship;
  }


  public void setSoleProprietorship(SoleProprietorship soleProprietorship) {
    this.soleProprietorship = soleProprietorship;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericEntityInfo genericEntityInfo = (GenericEntityInfo) o;
    return Objects.equals(this.entityAssociations, genericEntityInfo.entityAssociations) &&
        Objects.equals(this.individual, genericEntityInfo.individual) &&
        Objects.equals(this.organization, genericEntityInfo.organization) &&
        Objects.equals(this.soleProprietorship, genericEntityInfo.soleProprietorship);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityAssociations, individual, organization, soleProprietorship);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericEntityInfo {\n");
    sb.append("    entityAssociations: ").append(toIndentedString(entityAssociations)).append("\n");
    sb.append("    individual: ").append(toIndentedString(individual)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    soleProprietorship: ").append(toIndentedString(soleProprietorship)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityAssociations");
    openapiFields.add("individual");
    openapiFields.add("organization");
    openapiFields.add("soleProprietorship");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GenericEntityInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GenericEntityInfo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenericEntityInfo is not found in the empty JSON string", GenericEntityInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GenericEntityInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenericEntityInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayentityAssociations = jsonObj.getAsJsonArray("entityAssociations");
      if (jsonArrayentityAssociations != null) {
        // ensure the json data is an array
        if (!jsonObj.get("entityAssociations").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `entityAssociations` to be an array in the JSON string but got `%s`", jsonObj.get("entityAssociations").toString()));
        }

        // validate the optional field `entityAssociations` (array)
        for (int i = 0; i < jsonArrayentityAssociations.size(); i++) {
          LegalEntityAssociation.validateJsonObject(jsonArrayentityAssociations.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `individual`
      if (jsonObj.getAsJsonObject("individual") != null) {
        Individual.validateJsonObject(jsonObj.getAsJsonObject("individual"));
      }
      // validate the optional field `organization`
      if (jsonObj.getAsJsonObject("organization") != null) {
        Organization.validateJsonObject(jsonObj.getAsJsonObject("organization"));
      }
      // validate the optional field `soleProprietorship`
      if (jsonObj.getAsJsonObject("soleProprietorship") != null) {
        SoleProprietorship.validateJsonObject(jsonObj.getAsJsonObject("soleProprietorship"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenericEntityInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenericEntityInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenericEntityInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenericEntityInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GenericEntityInfo>() {
           @Override
           public void write(JsonWriter out, GenericEntityInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenericEntityInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenericEntityInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenericEntityInfo
  * @throws IOException if the JSON string is invalid with respect to GenericEntityInfo
  */
  public static GenericEntityInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenericEntityInfo.class);
  }

 /**
  * Convert an instance of GenericEntityInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

