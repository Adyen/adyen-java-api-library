/*
 * Legal Entity Management API
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.legalentitymanagement;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.adyen.model.legalentitymanagement.AULocalAccountIdentification;
import com.adyen.model.legalentitymanagement.AdditionalBankIdentification;
import com.adyen.model.legalentitymanagement.CALocalAccountIdentification;
import com.adyen.model.legalentitymanagement.CZLocalAccountIdentification;
import com.adyen.model.legalentitymanagement.DKLocalAccountIdentification;
import com.adyen.model.legalentitymanagement.HKLocalAccountIdentification;
import com.adyen.model.legalentitymanagement.HULocalAccountIdentification;
import com.adyen.model.legalentitymanagement.IbanAccountIdentification;
import com.adyen.model.legalentitymanagement.NOLocalAccountIdentification;
import com.adyen.model.legalentitymanagement.NZLocalAccountIdentification;
import com.adyen.model.legalentitymanagement.NumberAndBicAccountIdentification;
import com.adyen.model.legalentitymanagement.PLLocalAccountIdentification;
import com.adyen.model.legalentitymanagement.SELocalAccountIdentification;
import com.adyen.model.legalentitymanagement.SGLocalAccountIdentification;
import com.adyen.model.legalentitymanagement.UKLocalAccountIdentification;
import com.adyen.model.legalentitymanagement.USLocalAccountIdentification;
import com.adyen.model.payment.BankAccountIdentification;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;


@JsonDeserialize(using = BankAccountInfoAccountIdentificationDeserializer.class)
@JsonSerialize(using = BankAccountInfoAccountIdentificationSerializer.class)
public class BankAccountInfoAccountIdentification extends BankAccountIdentification {
    private static final Logger log = Logger.getLogger(BankAccountInfoAccountIdentification.class.getName());

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public BankAccountInfoAccountIdentification() {
        super("oneOf", Boolean.FALSE, schemas);
    }

    public BankAccountInfoAccountIdentification(AULocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(CALocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(CZLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(DKLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(HKLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(HULocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(IbanAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(NOLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(NZLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(NumberAndBicAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(PLLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(SELocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(SGLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(UKLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    public BankAccountInfoAccountIdentification(USLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE, schemas);
        setActualInstance(o);
    }

    static {
        schemas.put("AULocalAccountIdentification", new GenericType<AULocalAccountIdentification>() {
        });
        schemas.put("CALocalAccountIdentification", new GenericType<CALocalAccountIdentification>() {
        });
        schemas.put("CZLocalAccountIdentification", new GenericType<CZLocalAccountIdentification>() {
        });
        schemas.put("DKLocalAccountIdentification", new GenericType<DKLocalAccountIdentification>() {
        });
        schemas.put("HKLocalAccountIdentification", new GenericType<HKLocalAccountIdentification>() {
        });
        schemas.put("HULocalAccountIdentification", new GenericType<HULocalAccountIdentification>() {
        });
        schemas.put("IbanAccountIdentification", new GenericType<IbanAccountIdentification>() {
        });
        schemas.put("NOLocalAccountIdentification", new GenericType<NOLocalAccountIdentification>() {
        });
        schemas.put("NZLocalAccountIdentification", new GenericType<NZLocalAccountIdentification>() {
        });
        schemas.put("NumberAndBicAccountIdentification", new GenericType<NumberAndBicAccountIdentification>() {
        });
        schemas.put("PLLocalAccountIdentification", new GenericType<PLLocalAccountIdentification>() {
        });
        schemas.put("SELocalAccountIdentification", new GenericType<SELocalAccountIdentification>() {
        });
        schemas.put("SGLocalAccountIdentification", new GenericType<SGLocalAccountIdentification>() {
        });
        schemas.put("UKLocalAccountIdentification", new GenericType<UKLocalAccountIdentification>() {
        });
        schemas.put("USLocalAccountIdentification", new GenericType<USLocalAccountIdentification>() {
        });
        JSON.registerDescendants(BankAccountInfoAccountIdentification.class, Collections.unmodifiableMap(schemas));
    }

//    @Override
//    public Map<String, GenericType> getSchemas() {
//        return BankAccountInfoAccountIdentification.schemas;
//    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AULocalAccountIdentification, CALocalAccountIdentification, CZLocalAccountIdentification, DKLocalAccountIdentification, HKLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NZLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, SGLocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(AULocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(CALocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(CZLocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(DKLocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(HKLocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(HULocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(IbanAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(NOLocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(NZLocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(NumberAndBicAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PLLocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SELocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(SGLocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(UKLocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(USLocalAccountIdentification.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AULocalAccountIdentification, CALocalAccountIdentification, CZLocalAccountIdentification, DKLocalAccountIdentification, HKLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NZLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, SGLocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification");
    }

    /**
     * Get the actual instance, which can be the following:
     * AULocalAccountIdentification, CALocalAccountIdentification, CZLocalAccountIdentification, DKLocalAccountIdentification, HKLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NZLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, SGLocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification
     *
     * @return The actual instance (AULocalAccountIdentification, CALocalAccountIdentification, CZLocalAccountIdentification, DKLocalAccountIdentification, HKLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NZLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, SGLocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AULocalAccountIdentification`. If the actual instance is not `AULocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AULocalAccountIdentification`
     * @throws ClassCastException if the instance is not `AULocalAccountIdentification`
     */
    public AULocalAccountIdentification getAULocalAccountIdentification() throws ClassCastException {
        return (AULocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CALocalAccountIdentification`. If the actual instance is not `CALocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CALocalAccountIdentification`
     * @throws ClassCastException if the instance is not `CALocalAccountIdentification`
     */
    public CALocalAccountIdentification getCALocalAccountIdentification() throws ClassCastException {
        return (CALocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CZLocalAccountIdentification`. If the actual instance is not `CZLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CZLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `CZLocalAccountIdentification`
     */
    public CZLocalAccountIdentification getCZLocalAccountIdentification() throws ClassCastException {
        return (CZLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DKLocalAccountIdentification`. If the actual instance is not `DKLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DKLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `DKLocalAccountIdentification`
     */
    public DKLocalAccountIdentification getDKLocalAccountIdentification() throws ClassCastException {
        return (DKLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `HKLocalAccountIdentification`. If the actual instance is not `HKLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HKLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `HKLocalAccountIdentification`
     */
    public HKLocalAccountIdentification getHKLocalAccountIdentification() throws ClassCastException {
        return (HKLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `HULocalAccountIdentification`. If the actual instance is not `HULocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HULocalAccountIdentification`
     * @throws ClassCastException if the instance is not `HULocalAccountIdentification`
     */
    public HULocalAccountIdentification getHULocalAccountIdentification() throws ClassCastException {
        return (HULocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `IbanAccountIdentification`. If the actual instance is not `IbanAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IbanAccountIdentification`
     * @throws ClassCastException if the instance is not `IbanAccountIdentification`
     */
    public IbanAccountIdentification getIbanAccountIdentification() throws ClassCastException {
        return (IbanAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `NOLocalAccountIdentification`. If the actual instance is not `NOLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NOLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `NOLocalAccountIdentification`
     */
    public NOLocalAccountIdentification getNOLocalAccountIdentification() throws ClassCastException {
        return (NOLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `NZLocalAccountIdentification`. If the actual instance is not `NZLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NZLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `NZLocalAccountIdentification`
     */
    public NZLocalAccountIdentification getNZLocalAccountIdentification() throws ClassCastException {
        return (NZLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `NumberAndBicAccountIdentification`. If the actual instance is not `NumberAndBicAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NumberAndBicAccountIdentification`
     * @throws ClassCastException if the instance is not `NumberAndBicAccountIdentification`
     */
    public NumberAndBicAccountIdentification getNumberAndBicAccountIdentification() throws ClassCastException {
        return (NumberAndBicAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PLLocalAccountIdentification`. If the actual instance is not `PLLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PLLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `PLLocalAccountIdentification`
     */
    public PLLocalAccountIdentification getPLLocalAccountIdentification() throws ClassCastException {
        return (PLLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SELocalAccountIdentification`. If the actual instance is not `SELocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SELocalAccountIdentification`
     * @throws ClassCastException if the instance is not `SELocalAccountIdentification`
     */
    public SELocalAccountIdentification getSELocalAccountIdentification() throws ClassCastException {
        return (SELocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SGLocalAccountIdentification`. If the actual instance is not `SGLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SGLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `SGLocalAccountIdentification`
     */
    public SGLocalAccountIdentification getSGLocalAccountIdentification() throws ClassCastException {
        return (SGLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UKLocalAccountIdentification`. If the actual instance is not `UKLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UKLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `UKLocalAccountIdentification`
     */
    public UKLocalAccountIdentification getUKLocalAccountIdentification() throws ClassCastException {
        return (UKLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `USLocalAccountIdentification`. If the actual instance is not `USLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `USLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `USLocalAccountIdentification`
     */
    public USLocalAccountIdentification getUSLocalAccountIdentification() throws ClassCastException {
        return (USLocalAccountIdentification)super.getActualInstance();
    }

    /**
    * Create an instance of BankAccountInfoAccountIdentification given an JSON string
    *
    * @param jsonString JSON string
    * @return An instance of BankAccountInfoAccountIdentification
    * @throws IOException if the JSON string is invalid with respect to BankAccountInfoAccountIdentification
    */
    public static BankAccountInfoAccountIdentification fromJson(String jsonString) throws IOException {
        return JSON.getMapper().readValue(jsonString, BankAccountInfoAccountIdentification.class);
    }

    /**
    * Convert an instance of BankAccountInfoAccountIdentification to an JSON string
    *
    * @return JSON string
    */
    public String toJson() throws JsonProcessingException {
        return JSON.getMapper().writeValueAsString(this);
    }
}

