/*
 * Transfers API
 *
 * The version of the OpenAPI document: 3
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.transfer;

import com.google.gson.*;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import javax.ws.rs.core.GenericType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;


public class BankAccountV3AccountIdentification extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(BankAccountV3AccountIdentification.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!BankAccountV3AccountIdentification.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'BankAccountV3AccountIdentification' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AULocalAccountIdentification> adapterAULocalAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(AULocalAccountIdentification.class));
            final TypeAdapter<BRLocalAccountIdentification> adapterBRLocalAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(BRLocalAccountIdentification.class));
            final TypeAdapter<CZLocalAccountIdentification> adapterCZLocalAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(CZLocalAccountIdentification.class));
            final TypeAdapter<HULocalAccountIdentification> adapterHULocalAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(HULocalAccountIdentification.class));
            final TypeAdapter<IbanAccountIdentification> adapterIbanAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(IbanAccountIdentification.class));
            final TypeAdapter<NOLocalAccountIdentification> adapterNOLocalAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(NOLocalAccountIdentification.class));
            final TypeAdapter<NumberAndBicAccountIdentification> adapterNumberAndBicAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(NumberAndBicAccountIdentification.class));
            final TypeAdapter<PLLocalAccountIdentification> adapterPLLocalAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(PLLocalAccountIdentification.class));
            final TypeAdapter<SELocalAccountIdentification> adapterSELocalAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(SELocalAccountIdentification.class));
            final TypeAdapter<UKLocalAccountIdentification> adapterUKLocalAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(UKLocalAccountIdentification.class));
            final TypeAdapter<USLocalAccountIdentification> adapterUSLocalAccountIdentification = gson.getDelegateAdapter(this, TypeToken.get(USLocalAccountIdentification.class));

            return (TypeAdapter<T>) new TypeAdapter<BankAccountV3AccountIdentification>() {
                @Override
                public void write(JsonWriter out, BankAccountV3AccountIdentification value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AULocalAccountIdentification`
                    if (value.getActualInstance() instanceof AULocalAccountIdentification) {
                        JsonObject obj = adapterAULocalAccountIdentification.toJsonTree((AULocalAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `BRLocalAccountIdentification`
                    if (value.getActualInstance() instanceof BRLocalAccountIdentification) {
                        JsonObject obj = adapterBRLocalAccountIdentification.toJsonTree((BRLocalAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CZLocalAccountIdentification`
                    if (value.getActualInstance() instanceof CZLocalAccountIdentification) {
                        JsonObject obj = adapterCZLocalAccountIdentification.toJsonTree((CZLocalAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `HULocalAccountIdentification`
                    if (value.getActualInstance() instanceof HULocalAccountIdentification) {
                        JsonObject obj = adapterHULocalAccountIdentification.toJsonTree((HULocalAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `IbanAccountIdentification`
                    if (value.getActualInstance() instanceof IbanAccountIdentification) {
                        JsonObject obj = adapterIbanAccountIdentification.toJsonTree((IbanAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `NOLocalAccountIdentification`
                    if (value.getActualInstance() instanceof NOLocalAccountIdentification) {
                        JsonObject obj = adapterNOLocalAccountIdentification.toJsonTree((NOLocalAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `NumberAndBicAccountIdentification`
                    if (value.getActualInstance() instanceof NumberAndBicAccountIdentification) {
                        JsonObject obj = adapterNumberAndBicAccountIdentification.toJsonTree((NumberAndBicAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `PLLocalAccountIdentification`
                    if (value.getActualInstance() instanceof PLLocalAccountIdentification) {
                        JsonObject obj = adapterPLLocalAccountIdentification.toJsonTree((PLLocalAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SELocalAccountIdentification`
                    if (value.getActualInstance() instanceof SELocalAccountIdentification) {
                        JsonObject obj = adapterSELocalAccountIdentification.toJsonTree((SELocalAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `UKLocalAccountIdentification`
                    if (value.getActualInstance() instanceof UKLocalAccountIdentification) {
                        JsonObject obj = adapterUKLocalAccountIdentification.toJsonTree((UKLocalAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `USLocalAccountIdentification`
                    if (value.getActualInstance() instanceof USLocalAccountIdentification) {
                        JsonObject obj = adapterUSLocalAccountIdentification.toJsonTree((USLocalAccountIdentification)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AULocalAccountIdentification, BRLocalAccountIdentification, CZLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification");
                }

                @Override
                public BankAccountV3AccountIdentification read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AULocalAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AULocalAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterAULocalAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AULocalAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AULocalAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AULocalAccountIdentification'", e);
                    }

                    // deserialize BRLocalAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BRLocalAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterBRLocalAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BRLocalAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BRLocalAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BRLocalAccountIdentification'", e);
                    }

                    // deserialize CZLocalAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CZLocalAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterCZLocalAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CZLocalAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CZLocalAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CZLocalAccountIdentification'", e);
                    }

                    // deserialize HULocalAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HULocalAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterHULocalAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HULocalAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HULocalAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HULocalAccountIdentification'", e);
                    }

                    // deserialize IbanAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IbanAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterIbanAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IbanAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IbanAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IbanAccountIdentification'", e);
                    }

                    // deserialize NOLocalAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NOLocalAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterNOLocalAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NOLocalAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NOLocalAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NOLocalAccountIdentification'", e);
                    }

                    // deserialize NumberAndBicAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NumberAndBicAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterNumberAndBicAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NumberAndBicAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NumberAndBicAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NumberAndBicAccountIdentification'", e);
                    }

                    // deserialize PLLocalAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PLLocalAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterPLLocalAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PLLocalAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PLLocalAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PLLocalAccountIdentification'", e);
                    }

                    // deserialize SELocalAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SELocalAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterSELocalAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SELocalAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SELocalAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SELocalAccountIdentification'", e);
                    }

                    // deserialize UKLocalAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UKLocalAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterUKLocalAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UKLocalAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UKLocalAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UKLocalAccountIdentification'", e);
                    }

                    // deserialize USLocalAccountIdentification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        USLocalAccountIdentification.validateJsonObject(jsonObject);
                        actualAdapter = adapterUSLocalAccountIdentification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'USLocalAccountIdentification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for USLocalAccountIdentification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'USLocalAccountIdentification'", e);
                    }

                    if (match == 1) {
                        BankAccountV3AccountIdentification ret = new BankAccountV3AccountIdentification();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for BankAccountV3AccountIdentification: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public BankAccountV3AccountIdentification() {
        super("oneOf", Boolean.FALSE);
    }

    public BankAccountV3AccountIdentification(AULocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankAccountV3AccountIdentification(BRLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankAccountV3AccountIdentification(CZLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankAccountV3AccountIdentification(HULocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankAccountV3AccountIdentification(IbanAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankAccountV3AccountIdentification(NOLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankAccountV3AccountIdentification(NumberAndBicAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankAccountV3AccountIdentification(PLLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankAccountV3AccountIdentification(SELocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankAccountV3AccountIdentification(UKLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankAccountV3AccountIdentification(USLocalAccountIdentification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AULocalAccountIdentification", new GenericType<AULocalAccountIdentification>() {
        });
        schemas.put("BRLocalAccountIdentification", new GenericType<BRLocalAccountIdentification>() {
        });
        schemas.put("CZLocalAccountIdentification", new GenericType<CZLocalAccountIdentification>() {
        });
        schemas.put("HULocalAccountIdentification", new GenericType<HULocalAccountIdentification>() {
        });
        schemas.put("IbanAccountIdentification", new GenericType<IbanAccountIdentification>() {
        });
        schemas.put("NOLocalAccountIdentification", new GenericType<NOLocalAccountIdentification>() {
        });
        schemas.put("NumberAndBicAccountIdentification", new GenericType<NumberAndBicAccountIdentification>() {
        });
        schemas.put("PLLocalAccountIdentification", new GenericType<PLLocalAccountIdentification>() {
        });
        schemas.put("SELocalAccountIdentification", new GenericType<SELocalAccountIdentification>() {
        });
        schemas.put("UKLocalAccountIdentification", new GenericType<UKLocalAccountIdentification>() {
        });
        schemas.put("USLocalAccountIdentification", new GenericType<USLocalAccountIdentification>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return BankAccountV3AccountIdentification.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AULocalAccountIdentification, BRLocalAccountIdentification, CZLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AULocalAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BRLocalAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CZLocalAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HULocalAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IbanAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NOLocalAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NumberAndBicAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PLLocalAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SELocalAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UKLocalAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof USLocalAccountIdentification) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AULocalAccountIdentification, BRLocalAccountIdentification, CZLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification");
    }

    /**
     * Get the actual instance, which can be the following:
     * AULocalAccountIdentification, BRLocalAccountIdentification, CZLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification
     *
     * @return The actual instance (AULocalAccountIdentification, BRLocalAccountIdentification, CZLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AULocalAccountIdentification`. If the actual instance is not `AULocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AULocalAccountIdentification`
     * @throws ClassCastException if the instance is not `AULocalAccountIdentification`
     */
    public AULocalAccountIdentification getAULocalAccountIdentification() throws ClassCastException {
        return (AULocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BRLocalAccountIdentification`. If the actual instance is not `BRLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BRLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `BRLocalAccountIdentification`
     */
    public BRLocalAccountIdentification getBRLocalAccountIdentification() throws ClassCastException {
        return (BRLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CZLocalAccountIdentification`. If the actual instance is not `CZLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CZLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `CZLocalAccountIdentification`
     */
    public CZLocalAccountIdentification getCZLocalAccountIdentification() throws ClassCastException {
        return (CZLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `HULocalAccountIdentification`. If the actual instance is not `HULocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HULocalAccountIdentification`
     * @throws ClassCastException if the instance is not `HULocalAccountIdentification`
     */
    public HULocalAccountIdentification getHULocalAccountIdentification() throws ClassCastException {
        return (HULocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `IbanAccountIdentification`. If the actual instance is not `IbanAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IbanAccountIdentification`
     * @throws ClassCastException if the instance is not `IbanAccountIdentification`
     */
    public IbanAccountIdentification getIbanAccountIdentification() throws ClassCastException {
        return (IbanAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `NOLocalAccountIdentification`. If the actual instance is not `NOLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NOLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `NOLocalAccountIdentification`
     */
    public NOLocalAccountIdentification getNOLocalAccountIdentification() throws ClassCastException {
        return (NOLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `NumberAndBicAccountIdentification`. If the actual instance is not `NumberAndBicAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NumberAndBicAccountIdentification`
     * @throws ClassCastException if the instance is not `NumberAndBicAccountIdentification`
     */
    public NumberAndBicAccountIdentification getNumberAndBicAccountIdentification() throws ClassCastException {
        return (NumberAndBicAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PLLocalAccountIdentification`. If the actual instance is not `PLLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PLLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `PLLocalAccountIdentification`
     */
    public PLLocalAccountIdentification getPLLocalAccountIdentification() throws ClassCastException {
        return (PLLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SELocalAccountIdentification`. If the actual instance is not `SELocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SELocalAccountIdentification`
     * @throws ClassCastException if the instance is not `SELocalAccountIdentification`
     */
    public SELocalAccountIdentification getSELocalAccountIdentification() throws ClassCastException {
        return (SELocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UKLocalAccountIdentification`. If the actual instance is not `UKLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UKLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `UKLocalAccountIdentification`
     */
    public UKLocalAccountIdentification getUKLocalAccountIdentification() throws ClassCastException {
        return (UKLocalAccountIdentification)super.getActualInstance();
    }

    /**
     * Get the actual instance of `USLocalAccountIdentification`. If the actual instance is not `USLocalAccountIdentification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `USLocalAccountIdentification`
     * @throws ClassCastException if the instance is not `USLocalAccountIdentification`
     */
    public USLocalAccountIdentification getUSLocalAccountIdentification() throws ClassCastException {
        return (USLocalAccountIdentification)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BankAccountV3AccountIdentification
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with AULocalAccountIdentification
    try {
      AULocalAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AULocalAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BRLocalAccountIdentification
    try {
      BRLocalAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BRLocalAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CZLocalAccountIdentification
    try {
      CZLocalAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CZLocalAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with HULocalAccountIdentification
    try {
      HULocalAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for HULocalAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with IbanAccountIdentification
    try {
      IbanAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for IbanAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with NOLocalAccountIdentification
    try {
      NOLocalAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for NOLocalAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with NumberAndBicAccountIdentification
    try {
      NumberAndBicAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for NumberAndBicAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with PLLocalAccountIdentification
    try {
      PLLocalAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for PLLocalAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SELocalAccountIdentification
    try {
      SELocalAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SELocalAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with UKLocalAccountIdentification
    try {
      UKLocalAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for UKLocalAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with USLocalAccountIdentification
    try {
      USLocalAccountIdentification.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for USLocalAccountIdentification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for BankAccountV3AccountIdentification with oneOf schemas: AULocalAccountIdentification, BRLocalAccountIdentification, CZLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of BankAccountV3AccountIdentification given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BankAccountV3AccountIdentification
  * @throws IOException if the JSON string is invalid with respect to BankAccountV3AccountIdentification
  */
  public static BankAccountV3AccountIdentification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankAccountV3AccountIdentification.class);
  }

 /**
  * Convert an instance of BankAccountV3AccountIdentification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

