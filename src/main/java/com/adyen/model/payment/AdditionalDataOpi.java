/*
 * Adyen Payment API
 *
 * The version of the OpenAPI document: 68
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.payment;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * AdditionalDataOpi
 */
@JsonPropertyOrder({
  AdditionalDataOpi.JSON_PROPERTY_OPI_INCLUDE_TRANS_TOKEN
})

public class AdditionalDataOpi {
  public static final String JSON_PROPERTY_OPI_INCLUDE_TRANS_TOKEN = "opi.includeTransToken";
  private String opiIncludeTransToken;

  public AdditionalDataOpi() { 
  }

  /**
   * Optional boolean indicator. Set to **true** if you want an ecommerce transaction to return an &#x60;opi.transToken&#x60; as additional data in the response.  You can store this Oracle Payment Interface token in your Oracle Opera database. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce).
   *
   * @param opiIncludeTransToken
   * @return the current {@code AdditionalDataOpi} instance, allowing for method chaining
   */
  public AdditionalDataOpi opiIncludeTransToken(String opiIncludeTransToken) {
    this.opiIncludeTransToken = opiIncludeTransToken;
    return this;
  }

  /**
   * Optional boolean indicator. Set to **true** if you want an ecommerce transaction to return an &#x60;opi.transToken&#x60; as additional data in the response.  You can store this Oracle Payment Interface token in your Oracle Opera database. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce).
   * @return opiIncludeTransToken
   */
  @ApiModelProperty(value = "Optional boolean indicator. Set to **true** if you want an ecommerce transaction to return an `opi.transToken` as additional data in the response.  You can store this Oracle Payment Interface token in your Oracle Opera database. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce).")
  @JsonProperty(JSON_PROPERTY_OPI_INCLUDE_TRANS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOpiIncludeTransToken() {
    return opiIncludeTransToken;
  }

  /**
   * Optional boolean indicator. Set to **true** if you want an ecommerce transaction to return an &#x60;opi.transToken&#x60; as additional data in the response.  You can store this Oracle Payment Interface token in your Oracle Opera database. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce).
   *
   * @param opiIncludeTransToken
   */ 
  @JsonProperty(JSON_PROPERTY_OPI_INCLUDE_TRANS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOpiIncludeTransToken(String opiIncludeTransToken) {
    this.opiIncludeTransToken = opiIncludeTransToken;
  }

  /**
   * Return true if this AdditionalDataOpi object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalDataOpi additionalDataOpi = (AdditionalDataOpi) o;
    return Objects.equals(this.opiIncludeTransToken, additionalDataOpi.opiIncludeTransToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(opiIncludeTransToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalDataOpi {\n");
    sb.append("    opiIncludeTransToken: ").append(toIndentedString(opiIncludeTransToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of AdditionalDataOpi given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalDataOpi
   * @throws JsonProcessingException if the JSON string is invalid with respect to AdditionalDataOpi
   */
  public static AdditionalDataOpi fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, AdditionalDataOpi.class);
  }
/**
  * Convert an instance of AdditionalDataOpi to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
