{{>licenseInfo}}
package {{modelPackage}};

import java.util.Optional;
import java.util.logging.Logger;

/**
 * Handler for processing {{serviceName}}.
 * <p>
 * This class provides functionality to deserialize the payload of {{serviceName}} events.
 */
public class {{serviceName}}Handler {

    private static final Logger LOG = Logger.getLogger({{serviceName}}Handler.class.getName());

    private final String payload;

    /**
     * Constructs a new handler for the given webhook payload
     *
     * @param payload the raw JSON payload from the webhook
     */
    public {{serviceName}}Handler(String payload) {
        this.payload = payload;
    }
{{#models}}{{#model.vendorExtensions.x-webhook-root}}
    /**
     * Attempts to deserialize the webhook payload into a {{model.name}}
     *
     * @return an Optional containing the deserialized object, or empty if deserialization fails
     */
    public Optional<{{model.name}}> get{{model.name}}() {

        var optional{{model.name}} =  getOptionalField({{model.name}}.class);

        if(optional{{model.name}}.isPresent()) {
            // verify event type
            for (var value : {{model.name}}.TypeEnum.values()) {
                if (value.equals(optional{{model.name}}.get().getType())) {
                    // found matching event type
                    return optional{{model.name}};
                }
            }
        }

        return Optional.empty();
    }
{{/model.vendorExtensions.x-webhook-root}}{{/models}}
    /**
     * Deserializes the payload into the specified class type.
     *
     * @param clazz the class to deserialize into
     * @param <T>   the type of the class
     * @return an Optional containing the deserialized object, or empty if an error occurs
    */
    private <T> Optional<T> getOptionalField(Class<T> clazz) {
        try {
            T val = JSON.getMapper().readValue(payload, clazz);
            return Optional.ofNullable(val);
        } catch (Exception e) {
            // an error has occurred during deserialization (object not found, deserialization error)
            LOG.warning("Object not found or unexpected error trying to access:  " + clazz.getName());
            LOG.warning("Deserialization error: " + e.getMessage());
            return Optional.empty();
        }
    }

}